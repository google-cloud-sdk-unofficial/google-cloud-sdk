- release_tracks: [ALPHA, BETA]
  help_text:
    brief: |
      Update a Dataproc Metastore service.
    description: |
      Update the metadata and/or configuration parameters of a Dataproc Metastore service.

      If run asynchronously with `--async`, exits after printing
      one operation name that can be used to poll the status of the
      update via:

        {top_command} metastore operations describe
    examples: |
      To update a Dataproc Metastore service with the name `my-metastore-service` to
      have the port number 8080, and add the two labels, `env` and `foo`, run:

          $ {command} my-metastore-service --port=8080 --update-labels=env=test,foo=bar

  request:
    ALPHA:
      api_version: v1alpha
    BETA:
      api_version: v1beta
    GA:
      api_version: v1
    collection: metastore.projects.locations.services
    modify_request_hooks:
    - googlecloudsdk.command_lib.metastore.services.util:SetServiceRequestUpdateHiveMetastoreConfigs
    - googlecloudsdk.command_lib.metastore.services.util:GenerateUpdateAuxiliaryVersionsConfigs
    - googlecloudsdk.command_lib.metastore.services.util:UpdateServiceMaskHook
    - googlecloudsdk.command_lib.metastore.validators:ValidateServiceMutexConfig

  arguments:
    resource:
      help_text: |
        Arguments and flags that specify the Dataproc Metastore service
        you want to update.
      spec: !REF googlecloudsdk.command_lib.metastore.resources:service
    params:
    - arg_name: port
      api_field: service.port
      processor: googlecloudsdk.command_lib.metastore.validators:ValidatePort
      help_text: |
        The TCP port on which the Metastore service will listen.
    - arg_name: data-catalog-sync
      api_field: service.metadataIntegration.dataCatalogConfig.enabled
      help_text: |
        A boolean flag to determine whether Dataproc Metastore metadata sync
        to Data Catalog should be enabled.
        Cannot be updated if the service uses customer-managed encryption keys.
    - group:
        help_text: |
          The instance size of the Dataproc Metastore instance.
        mutex: true
        params:
        - arg_name: tier
          api_field: service.tier
          help_text: |
            The tier of the service.
          choices:
          - arg_value: enterprise
            enum_value: ENTERPRISE
            help_text:  |
              The enterprise tier provides multi-zone high availability, and sufficient
              scalability for enterprise-level Dataproc Metastore workloads.
          - arg_value: developer
            enum_value: DEVELOPER
            help_text:  |
              The developer tier provides limited scalability and no fault tolerance.
              Good for low-cost proof-of-concept.
        - arg_name: scaling-factor
          api_field: service.scalingConfig.scalingFactor
          help_text: |
            The scaling factor of the service. This should be a float in the range [0.1,6.0].
            If the value is less than 1.0, then it should be a multiple of 0.1.
            If the value is greater than 1.0, then it should be a whole number.
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateScalingFactor
        - arg_name: instance-size
          api_field: service.scalingConfig.instanceSize
          help_text: |
            The instance size of the service.
          choices:
          - arg_value: extra_small
            enum_value: EXTRA_SMALL
            help_text:  |
              Extra small instance size, maps to a scaling factor of 0.1.
          - arg_value: small
            enum_value: SMALL
            help_text:  |
              Small instance size, maps to a scaling factor of 0.5.
          - arg_value: medium
            enum_value: MEDIUM
            help_text:  |
              Medium instance size, maps to a scaling factor of 1.0.
          - arg_value: large
            enum_value: LARGE
            help_text:  |
              Large instance size, maps to a scaling factor of 3.0.
          - arg_value: extra_large
            enum_value: EXTRA_LARGE
            help_text:  |
              Extra large instance size, maps to a scaling factor of 6.0.
    - group:
        help_text: |
          Configuration properties specific to running Hive metastore
          software as the metastore service.
        mutex: true
        params:
        - arg_name: update-hive-metastore-configs-from-file
          type: "googlecloudsdk.calliope.arg_parsers:FileContents:"
          help_text: |
            Path to a XML file containing a mapping of Hive metastore configuration key-value
            pairs to apply to the Hive metastore.

            For example:

              hive-site.xml
                  <configuration>
                    <property>
                      <name>hive.metastore.warehouse.dir</name>
                      <value>${test.warehouse.dir}</value>
                      <description></description>
                    </property>
                  </configuration>
        - group:
            help_text: |
              Modify the Hive metastore configuration properties by passing key-value pairs
              in through the flags.
            params:
            - arg_name: update-hive-metastore-configs
              type: "googlecloudsdk.calliope.arg_parsers:ArgDict:"
              help_text: |
                Comma-separated list of Hive metastore configurations. Each configuration has
                the form "NAME=VALUE".
            - group:
                mutex: true
                params:
                - arg_name: remove-hive-metastore-configs
                  type: "googlecloudsdk.calliope.arg_parsers:ArgList:"
                  help_text: |
                    Comma-separated list of configuration keys to remove with the form
                    "KEY1, KEY2". If a label does not exist it is silently ignored. If
                    --update-hive-metastore-configs is also specified, then
                    --remove-hive-metastore-configs is applied first.
                - arg_name: clear-hive-metastore-configs
                  action: store_true
                  help_text: |
                    clear existing Hive metastore configurations. If --update-hive-metastore-configs
                    is also specified, then --clear-hive-metastore-configs is applied first.
    - group:
        help_text: |
          Information used to configure the Hive metastore service as a service principal
          in a Kerberos realm.
        params:
        - arg_name: kerberos-principal
          api_field: service.hiveMetastoreConfig.kerberosConfig.principal
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateKerberosPrincipal
          help_text: |
            A Kerberos principal that exists in the KDC to authenticate as. A typical principal
            is of the form "primary/instance@REALM", but there is no exact format.
        - arg_name: krb5-config
          api_field: service.hiveMetastoreConfig.kerberosConfig.krb5ConfigGcsUri
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateGcsUri:arg_name=--krb5-config
          help_text: |
            A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form
            gs://{bucket_name}/path/krb5.conf, although the file does not need to be named
            krb5.conf explicitly.
        - arg_name: keytab
          api_field: service.hiveMetastoreConfig.kerberosConfig.keytab.cloudSecret
          processor: googlecloudsdk.command_lib.metastore.parsers:ParseSecretManagerSecretVersion
          help_text: |
            A Kerberos keytab file that can be used to authenticate a service principal
            with a Kerberos Key Distribution Center. This is a Secret Manager secret version,
            and can be fully-qualified URL, or relative name in the form
            `projects/{project_id}/secrets/{secret_id}/versions/{version_id}`.
    - group:
        help_text: |
          The one hour maintenance window that specifies when Dataproc
          Metastore may perform system maintenance operation to the service, in
          UTC time.
        params:
        - arg_name: maintenance-window-day
          api_field: service.maintenanceWindow.dayOfWeek
          required: true
          choices:
          - arg_value: mon
            enum_value: MONDAY
          - arg_value: tue
            enum_value: TUESDAY
          - arg_value: wed
            enum_value: WEDNESDAY
          - arg_value: thu
            enum_value: THURSDAY
          - arg_value: fri
            enum_value: FRIDAY
          - arg_value: sat
            enum_value: SATURDAY
          - arg_value: sun
            enum_value: SUNDAY
          help_text: |
            The day of week when the window starts, e.g., `sun`.
        - arg_name: maintenance-window-hour
          api_field: service.maintenanceWindow.hourOfDay
          required: true
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateHourOfDay
          help_text: |
            The hour of day (0-23) when the window starts.
    - arg_name: endpoint-protocol
      help_text: |
        The protocol to use for the metastore service endpoint.
      choices:
      - arg_value: thrift
        enum_value: THRIFT
        help_text:  |
          The legacy Apache `THRIFT` protocol.
      - arg_value: grpc
        enum_value: GRPC
        help_text:  |
          The modernized `GRPC` protocol.
      api_field: service.hiveMetastoreConfig.endpointProtocol
    - group:
        help_text: |
          Auxiliary versions configuration for the Dataproc Metastore service. When specified,
          a secondary Hive metastore service is created along with the primary service.
        mutex: true
        params:
        - arg_name: update-auxiliary-versions-from-file
          api_field: service.hiveMetastoreConfig.auxiliaryVersions
          type: "googlecloudsdk.calliope.arg_parsers:YAMLFileContents:"
          processor: googlecloudsdk.command_lib.metastore.services.util:LoadAuxiliaryVersionsConfigsFromYamlFile
          help_text: |
            Path to a YAML file containing the auxiliary versions configuration for
            Dataproc Metastore instance. The file should contain a unique auxiliary service name and
            auxiliary version that is lower than the primary service version. The primary version's
            Hive metastore configs are applied to the auxiliary version. Additional Hive metastore
            configs can be specified for the auxiliary version using "config_overrides". If a
            specified config property has already been overridden in the primary Hive metastore
            version's configs, the auxiliary version's override takes precedence.
            The contents of the file should be structured as follows:

            YAML:

            ```
              - name: aux-service1
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              - name: aux-service2
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              ...
            ```
        - group:
            params:
            - arg_name: add-auxiliary-versions
              type: "arg_list"
              help_text: |
                Comma-separated list of auxiliary Hive metastore versions to deploy.
                Auxiliary Hive metastore versions must be less than the primary Hive metastore
                service's version.
            - arg_name: clear-auxiliary-versions
              action: store_true
              help_text: |
                Clears the existing auxiliary services attached to the primary Hive metastore
                services. If --add-auxiliary-versions is also specified, --clear-auxiliary-versions
                is applied first.
    labels:
      api_field: service.labels

  async:
    collection: metastore.projects.locations.operations
  update:
    # b/136698204
    read_modify_update: true
    disable_auto_field_mask: true
- release_tracks: [GA]
  help_text:
    brief: |
      Update a Dataproc Metastore service.
    description: |
      Update the metadata and/or configuration parameters of a Dataproc Metastore service.

      If run asynchronously with `--async`, exits after printing
      one operation name that can be used to poll the status of the
      update via:

        {top_command} metastore operations describe
    examples: |
      To update a Dataproc Metastore service with the name `my-metastore-service` to
      have the port number 8080, and add the two labels, `env` and `foo`, run:

          $ {command} my-metastore-service --port=8080 --update-labels=env=test,foo=bar

  request:
    GA:
      api_version: v1
    collection: metastore.projects.locations.services
    modify_request_hooks:
    - googlecloudsdk.command_lib.metastore.services.util:SetServiceRequestUpdateHiveMetastoreConfigs
    - googlecloudsdk.command_lib.metastore.services.util:GenerateUpdateAuxiliaryVersionsConfigs
    - googlecloudsdk.command_lib.metastore.services.util:UpdateServiceMaskHook

  arguments:
    resource:
      help_text: |
        Arguments and flags that specify the Dataproc Metastore service
        you want to update.
      spec: !REF googlecloudsdk.command_lib.metastore.resources:service
    params:
    - arg_name: port
      api_field: service.port
      processor: googlecloudsdk.command_lib.metastore.validators:ValidatePort
      help_text: |
        The TCP port on which the Metastore service will listen.
    - group:
        help_text: |
          The instance size of the Dataproc Metastore instance.
        mutex: true
        params:
        - arg_name: tier
          api_field: service.tier
          help_text: |
            The tier of the service.
          choices:
          - arg_value: enterprise
            enum_value: ENTERPRISE
            help_text:  |
              The enterprise tier provides multi-zone high availability, and sufficient
              scalability for enterprise-level Dataproc Metastore workloads.
          - arg_value: developer
            enum_value: DEVELOPER
            help_text:  |
              The developer tier provides limited scalability and no fault tolerance.
              Good for low-cost proof-of-concept.
        - arg_name: scaling-factor
          api_field: service.scalingConfig.scalingFactor
          help_text: |
            The scaling factor of the service. This should be a float in the range [0.1,6.0].
            If the value is less than 1.0, then it should be a multiple of 0.1.
            If the value is greater than 1.0, then it should be a whole number.
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateScalingFactor
        - arg_name: instance-size
          api_field: service.scalingConfig.instanceSize
          help_text: |
            The instance size of the service.
          choices:
          - arg_value: extra_small
            enum_value: EXTRA_SMALL
            help_text:  |
              Extra small instance size, maps to a scaling factor of 0.1.
          - arg_value: small
            enum_value: SMALL
            help_text:  |
              Small instance size, maps to a scaling factor of 0.5.
          - arg_value: medium
            enum_value: MEDIUM
            help_text:  |
              Medium instance size, maps to a scaling factor of 1.0.
          - arg_value: large
            enum_value: LARGE
            help_text:  |
              Large instance size, maps to a scaling factor of 3.0.
          - arg_value: extra_large
            enum_value: EXTRA_LARGE
            help_text:  |
              Extra large instance size, maps to a scaling factor of 6.0.
    - group:
        help_text: |
          Configuration properties specific to running Hive metastore
          software as the metastore service.
        mutex: true
        params:
        - arg_name: update-hive-metastore-configs-from-file
          type: "googlecloudsdk.calliope.arg_parsers:FileContents:"
          help_text: |
            Path to a XML file containing a mapping of Hive metastore configuration key-value
            pairs to apply to the Hive metastore.

            For example:

              hive-site.xml
                  <configuration>
                    <property>
                      <name>hive.metastore.warehouse.dir</name>
                      <value>${test.warehouse.dir}</value>
                      <description></description>
                    </property>
                  </configuration>
        - group:
            help_text: |
              Modify the Hive metastore configuration properties by passing key-value pairs
              in through the flags.
            params:
            - arg_name: update-hive-metastore-configs
              type: "googlecloudsdk.calliope.arg_parsers:ArgDict:"
              help_text: |
                Comma-separated list of Hive metastore configurations. Each configuration has
                the form "NAME=VALUE".
            - group:
                mutex: true
                params:
                - arg_name: remove-hive-metastore-configs
                  type: "googlecloudsdk.calliope.arg_parsers:ArgList:"
                  help_text: |
                    Comma-separated list of configuration keys to remove with the form
                    "KEY1, KEY2". If a label does not exist it is silently ignored. If
                    --update-hive-metastore-configs is also specified, then
                    --remove-hive-metastore-configs is applied first.
                - arg_name: clear-hive-metastore-configs
                  action: store_true
                  help_text: |
                    clear existing Hive metastore configurations. If --update-hive-metastore-configs
                    is also specified, then --clear-hive-metastore-configs is applied first.
    - group:
        help_text: |
          Information used to configure the Hive metastore service as a service principal
          in a Kerberos realm.
        params:
        - arg_name: kerberos-principal
          api_field: service.hiveMetastoreConfig.kerberosConfig.principal
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateKerberosPrincipal
          help_text: |
            A Kerberos principal that exists in the KDC to authenticate as. A typical principal
            is of the form "primary/instance@REALM", but there is no exact format.
        - arg_name: krb5-config
          api_field: service.hiveMetastoreConfig.kerberosConfig.krb5ConfigGcsUri
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateGcsUri:arg_name=--krb5-config
          help_text: |
            A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form
            gs://{bucket_name}/path/krb5.conf, although the file does not need to be named
            krb5.conf explicitly.
        - arg_name: keytab
          api_field: service.hiveMetastoreConfig.kerberosConfig.keytab.cloudSecret
          processor: googlecloudsdk.command_lib.metastore.parsers:ParseSecretManagerSecretVersion
          help_text: |
            A Kerberos keytab file that can be used to authenticate a service principal
            with a Kerberos Key Distribution Center. This is a Secret Manager secret version,
            and can be fully-qualified URL, or relative name in the form
            `projects/{project_id}/secrets/{secret_id}/versions/{version_id}`.
    - group:
        help_text: |
          The one hour maintenance window that specifies when Dataproc
          Metastore may perform system maintenance operation to the service, in
          UTC time.
        params:
        - arg_name: maintenance-window-day
          api_field: service.maintenanceWindow.dayOfWeek
          required: true
          choices:
          - arg_value: mon
            enum_value: MONDAY
          - arg_value: tue
            enum_value: TUESDAY
          - arg_value: wed
            enum_value: WEDNESDAY
          - arg_value: thu
            enum_value: THURSDAY
          - arg_value: fri
            enum_value: FRIDAY
          - arg_value: sat
            enum_value: SATURDAY
          - arg_value: sun
            enum_value: SUNDAY
          help_text: |
            The day of week when the window starts, e.g., `sun`.
        - arg_name: maintenance-window-hour
          api_field: service.maintenanceWindow.hourOfDay
          required: true
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateHourOfDay
          help_text: |
            The hour of day (0-23) when the window starts.
    - group:
        help_text: |
          Auxiliary versions configuration for the Dataproc Metastore service. When specified,
          a secondary Hive metastore service is created along with the primary service.
        mutex: true
        params:
        - arg_name: update-auxiliary-versions-from-file
          api_field: service.hiveMetastoreConfig.auxiliaryVersions
          type: "googlecloudsdk.calliope.arg_parsers:YAMLFileContents:"
          processor: googlecloudsdk.command_lib.metastore.services.util:LoadAuxiliaryVersionsConfigsFromYamlFile
          help_text: |
            Path to a YAML file containing the auxiliary versions configuration for
            Dataproc Metastore instance. The file should contain a unique auxiliary service name and
            auxiliary version that is lower than the primary service version. The primary version's
            Hive metastore configs are applied to the auxiliary version. Additional Hive metastore
            configs can be specified for the auxiliary version using "config_overrides". If a
            specified config property has already been overridden in the primary Hive metastore
            version's configs, the auxiliary version's override takes precedence.
            The contents of the file should be structured as follows:

            YAML:

            ```
              - name: aux-service1
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              - name: aux-service2
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              ...
            ```
        - group:
            params:
            - arg_name: add-auxiliary-versions
              type: "arg_list"
              help_text: |
                Comma-separated list of auxiliary Hive metastore versions to deploy.
                Auxiliary Hive metastore versions must be less than the primary Hive metastore
                service's version.
            - arg_name: clear-auxiliary-versions
              action: store_true
              help_text: |
                Clears the existing auxiliary services attached to the primary Hive metastore
                services. If --add-auxiliary-versions is also specified, --clear-auxiliary-versions
                is applied first.
    labels:
      api_field: service.labels

  async:
    collection: metastore.projects.locations.operations
  update:
    # b/136698204
    read_modify_update: true
    disable_auto_field_mask: true
