# -*- coding: utf-8 -*- #
# Copyright 2024 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This file is autogenerated and should not be edited by hand.
# AUTOGEN_CLI_VERSION: HEAD
- release_tracks:
  - ALPHA
  help_text:
    brief: Create a blockchain validator configuration
    description: |
      Create a blockchain validator configuration on a blockchain node managed by Blockchain Node
      Engine.
    examples: |-
      To create an Ethereum validator configuration `my-validator` in the project `my-project`
      and location `us-central1`, using a new seed phrase which is exported to Secret Manager,
      and deploy it to the blockchain node `my-node`, run:

      $ {command} my-validator --location=us-central1 --project=my-project
        --validation-work-enabled=false
        --blockchain-type=ETHEREUM --key-source=SEED_PHRASE_REFERENCE
        --seed-phrase-reference-secret=projects/my-project/secrets/my-seed-phrase
        --seed-phrase-reference-export=true
        --blockchain-node-id=projects/my-project/locations/us-central1/blockchainNodes/my-node
  arguments:
    params:
    - group:
        mutex: true
        help_text: |-
          Arguments for the blockchain node.
        params:
        - arg_name: blockchain-node-id
          api_field: blockchainValidatorConfig.blockchainNodeId
          required: false
          repeated: false
          help_text: |-
            The fully qualified name of the blockchain node which carries out work
            on behalf of the validator. If not set, the validator must either be
            operated outside of Blockchain Validator Manager, or it will be offline
            (no attestations or blocks will be produced).
            If this node is offline or deleted, the validator will be offline.
    - group:
        mutex: true
        help_text: |-
          Arguments for the blockchain type details.
        params:
        - group:
            required: false
            help_text: |-
              Blockchain validator configuration unique to Ethereum blockchains.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  graffiti.
                params:
                - arg_name: ethereum-protocol-details-graffiti
                  api_field: blockchainValidatorConfig.ethereumProtocolDetails.graffiti
                  required: false
                  repeated: false
                  help_text: |-
                    Graffiti is a custom string published in blocks proposed by the
                    validator. This can only be written, as the current value cannot be read
                    back from the validator client API. See
                    https://lighthouse-book.sigmaprime.io/graffiti.html for an example of
                    how this is used.
                    If not set, the validator client's default is used.
                    If no blockchain node is specified, this has no effect as no validator
                    client is run.
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  use block builder proposals.
                params:
                - arg_name: ethereum-protocol-details-use-block-builder-proposals
                  api_field: blockchainValidatorConfig.ethereumProtocolDetails.useBlockBuilderProposals
                  action: store_true
                  required: false
                  type: bool
                  help_text: |-
                    Enable use of the external block building services (MEV).
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  gas limit.
                params:
                - arg_name: ethereum-protocol-details-gas-limit
                  api_field: blockchainValidatorConfig.ethereumProtocolDetails.gasLimit
                  required: false
                  repeated: false
                  type: long
                  help_text: |-
                    Optionally requested (not enforced) maximum gas per block. This is sent
                     to the block builder service, however whether it is followed depends on
                     the service. This field is only read if the field
                     use_block_builder_proposals is set to true. If not specified, the
                     validator client will use a default value.
            - arg_name: ethereum-protocol-details-suggested-fee-recipient
              api_field: blockchainValidatorConfig.ethereumProtocolDetails.suggestedFeeRecipient
              required: false
              repeated: false
              help_text: |-
                The Ethereum address to which fee rewards should be sent. This can only
                be set when creating the validator.
                If no blockchain node is specified for the validator, this has no effect
                as no validator client is run.
                See also
                https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html for
                more context.
    - group:
        mutex: true
        help_text: |-
          Arguments for the key source config.
        params:
        - group:
            required: false
            help_text: |-
              Configuration to use an external key signing service, such as the service
              endpoint. The external key signer is expected to be managed entirely by the
              customer. For reference see
              https://docs.web3signer.consensys.net/ for details on Web3Signer and
              https://docs.web3signer.consensys.net/reference/api/json-rpc for the API
              exposed by the external service.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  timeout duration.
                params:
                - arg_name: remote-web3-signer-timeout-duration
                  api_field: blockchainValidatorConfig.remoteWeb3Signer.timeoutDuration
                  required: false
                  repeated: false
                  type: googlecloudsdk.core.util.times:ParseDuration
                  processor: googlecloudsdk.core.util.times:FormatDurationForJson
                  help_text: |-
                    Timeout for requests to the Web3Signer service.
            - arg_name: remote-web3-signer-voting-public-key
              api_field: blockchainValidatorConfig.remoteWeb3Signer.votingPublicKey
              required: true
              repeated: false
              help_text: |-
                The public key of the validator, as a hexadecimal string prefixed with
                "0x". This is used as the identifier for the key when sending requests
                to the Web3Signer service.
            - arg_name: remote-web3-signer-web3signer-uri
              api_field: blockchainValidatorConfig.remoteWeb3Signer.web3signerUri
              required: true
              repeated: false
              help_text: |-
                URI of the Web3Signer service the validator client connects to, to
                request signing of attestations, blocks, etc.
        - group:
            required: false
            help_text: |-
              Derivation path used to generate the voting key, and optionally Secret
              Manager secret to backup the seed phrase to.
            params:
            - arg_name: seed-phrase-reference-secret
              help_text: |-
                Reference into Secret Manager for where the seed phrase is stored.
              is_positional: false
              resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1_resources:project_location_or_project_secret
              resource_method_params:
                blockchainValidatorConfig.seedPhraseReference.seedPhraseSecret: '{__relative_name__}'
              required: true
            - arg_name: seed-phrase-reference-export
              api_field: blockchainValidatorConfig.seedPhraseReference.exportSeedPhrase
              action: store_true
              default: null
              required: false
              type: bool
              help_text: |-
                True to export the seed phrase to Secret Manager.
        - group:
            required: false
            help_text: |-
              Location of existing seed material, and derivation path used to generate
              the voting key.
            params:
            - arg_name: existing-seed-phrase-reference-secret
              help_text: |-
                Reference into Secret Manager for where the seed phrase is stored.
              is_positional: false
              resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1_resources:project_location_or_project_secret
              resource_method_params:
                blockchainValidatorConfig.existingSeedPhraseReference.seedPhraseSecret: '{__relative_name__}'
              required: true
            - arg_name: existing-seed-phrase-reference-derivation-index
              api_field: blockchainValidatorConfig.existingSeedPhraseReference.derivationIndex
              required: false
              repeated: false
              type: int
              help_text: |-
                The index to derive the voting key at, used as part of a derivation path.
                The derivation path is built from this as
                "m/12381/3600/<derivation_index>/0/0"
                See also https://eips.ethereum.org/EIPS/eip-2334#eth2-specific-parameters
    - help_text: |-
        Blockchain Validator Config Name
        The name of the Blockchain Validator Config. The fully specified name must have the format
        projects/{project}/locations/{location}/blockchainValidatorConfigs/{validator}.
      is_positional: true
      request_id_field: blockchainValidatorConfigId
      resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1_resources:project_location_blockchain_validator_config
      required: true
    - arg_name: labels
      api_field: blockchainValidatorConfig.labels
      required: false
      repeated: true
      help_text: |-
        Labels as key value pairs
      spec:
      - api_field: key
      - api_field: value
    - arg_name: validation-work-enabled
      api_field: blockchainValidatorConfig.validationWorkEnabled
      action: store_true
      required: true
      type: bool
      help_text: |-
        True if the blockchain node requests and signs attestations and blocks on
        behalf of this validator, false if not.
        This does NOT define whether the blockchain expects work to occur, only
        whether the blockchain node specified above is carrying out validation
        tasks. This should be enabled under normal conditions, but may be useful
        when migrating validators to/from Blockchain Node Engine, where the
        validator may be paused during the migration.
    - arg_name: blockchain-type
      api_field: blockchainValidatorConfig.blockchainType
      required: true
      help_text: |-
        The blockchain type of the validator.
      choices:
      - arg_value: ethereum
        enum_value: ETHEREUM
        help_text: |-
          The blockchain type is Ethereum.
    - arg_name: key-source
      api_field: blockchainValidatorConfig.keySource
      required: true
      help_text: |-
        The source of the voting key for the blockchain validator.
      choices:
      - arg_value: remote-web3-signer
        enum_value: REMOTE_WEB3_SIGNER
        help_text: |-
          The voting key is stored in a remote signing service (Web3Signer) and
          signing requests are delegated.
      - arg_value: seed-phrase-reference
        enum_value: SEED_PHRASE_REFERENCE
        help_text: |-
          Derive voting keys from new seed material.
      - arg_value: existing-seed-phrase-reference
        enum_value: EXISTING_SEED_PHRASE_REFERENCE
        help_text: |-
          Derive voting keys from existing seed material.
  request:
    api_version: v1
    collection:
    - blockchainvalidatormanager.projects.locations.blockchainValidatorConfigs
  async:
    collection:
    - blockchainvalidatormanager.projects.locations.operations
