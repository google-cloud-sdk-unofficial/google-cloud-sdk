# -*- coding: utf-8 -*- #
# Copyright 2024 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This file is autogenerated and should not be edited by hand.
# AUTOGEN_CLI_VERSION: HEAD
- release_tracks:
  - ALPHA
  hidden: true
  help_text:
    brief: Generate one or more blockchain validator configurations
    description: |
      Generate one or more blockchain validator configurations, optionally with a new managed
      blockchain node.
    examples: |-
      To create an Ethereum validator configuration `my-validator` in the project `my-project`
      and location `us-central1`, using a new seed phrase which is exported to Secret Manager,
      and deploy it to the blockchain node `my-node`, run:

      $ {command} my-validator --location=us-central1 --project=my-project \
        --blockchain-validator-config-template-validation-work-enabled=false \
        --blockchain-validator-config-template-blockchain-type=ETHEREUM \
        --blockchain-validator-config-template-key-source=SEED_PHRASE_REFERENCE \
        --blockchain-validator-config-template-seed-phrase-reference-template-seed-phrase-secret=projects/my-project/secrets/my-seed-phrase \
        --blockchain-validator-config-template-seed-phrase-reference-template-export-seed-phrase=true \
        --blockchain-validator-config-template-blockchain-node-source=USE_EXISTING_NODE \
        --blockchain-validator-config-template-blockchain-node-id=projects/my-project/locations/us-central1/blockchainNodes/my-node
  arguments:
    params:
    - help_text: |-
        The parent location to create validator configurations under.
        Format: projects/{project_number}/locations/{location}.
      is_positional: false
      is_parent_resource: true
      is_primary_resource: true
      resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1alpha_resources:project_location
      required: true
    - group:
        mutex: true
        help_text: |-
          Arguments for the blockchain type details.
        params:
        - group:
            required: false
            help_text: |-
              Blockchain validator configuration unique to Ethereum blockchains.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  graffiti.
                params:
                - arg_name: ethereum-protocol-details-graffiti
                  api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.ethereumProtocolDetails.graffiti
                  required: false
                  repeated: false
                  help_text: |-
                    Graffiti is a custom string published in blocks proposed by the
                    validator. This can only be written, as the current value cannot be read
                    back from the validator client API. See
                    https://lighthouse-book.sigmaprime.io/graffiti.html for an example of
                    how this is used.
                    If not set, the validator client's default is used.
                    If no blockchain node is specified, this has no effect as no validator
                    client is run.
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  use block builder proposals.
                params:
                - arg_name: ethereum-protocol-details-use-block-builder-proposals
                  api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.ethereumProtocolDetails.useBlockBuilderProposals
                  action: store_true
                  required: false
                  type: bool
                  help_text: |-
                    Enable use of the external block building services (MEV).
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  gas limit.
                params:
                - arg_name: ethereum-protocol-details-gas-limit
                  api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.ethereumProtocolDetails.gasLimit
                  required: false
                  repeated: false
                  type: long
                  help_text: |-
                    Optionally requested (not enforced) maximum gas per block. This is sent
                     to the block builder service, however whether it is followed depends on
                     the service. This field is only read if the field
                     use_block_builder_proposals is set to true. If not specified, the
                     validator client will use a default value.
            - arg_name: ethereum-protocol-details-suggested-fee-recipient
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.ethereumProtocolDetails.suggestedFeeRecipient
              required: false
              repeated: false
              help_text: |-
                The Ethereum address to which fee rewards should be sent. This can only
                be set when creating the validator.
                If no blockchain node is specified for the validator, this has no effect
                as no validator client is run.
                See also
                https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html for
                more context.
    - group:
        mutex: true
        help_text: |-
          Arguments for the key source config.
        params:
        - group:
            required: false
            help_text: |-
              Configuration to use an external key signing service, such as the service
              endpoint. The external key signer is expected to be managed entirely by the
              customer. For reference see
              https://docs.web3signer.consensys.net/ for details on Web3Signer and
              https://docs.web3signer.consensys.net/reference/api/json-rpc for the API
              exposed by the external service.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  root certificate.
                params:
                - arg_name: remote-web3-signer-root-certificate
                  api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.remoteWeb3Signer.rootCertificate
                  required: false
                  repeated: false
                  help_text: |
                    PEM-format X.509 certificate corresponding to the URI of the Web3Signer.
                    An example of this can be found on
                    https://www.ssl.com/guide/pem-der-crt-and-cer-x-509-encodings-and-conversions/
                    When not set, the validator client will only accept TLS certificates
                    signed by well known certificate authorities (as in, the set configured
                    by default in the OS Docker image).
            - arg_name: remote-web3-signer-web3signer-uri
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.remoteWeb3Signer.web3signerUri
              required: true
              repeated: false
              help_text: |-
                URI of the Web3Signer service the validator client connects to, to
                request signing of attestations, blocks, etc.
            - arg_name: remote-web3-signer-timeout-duration
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.remoteWeb3Signer.timeoutDuration
              required: false
              repeated: false
              type: googlecloudsdk.core.util.times:ParseDuration
              processor: googlecloudsdk.core.util.times:FormatDurationForJson
              help_text: |-
                Timeout for requests to the Web3Signer service.
            - arg_name: remote-web3-signer-voting-public-keys
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.remoteWeb3Signer.votingPublicKeys
              required: true
              repeated: true
              help_text: |-
                The public key of the validator, as a hexadecimal string prefixed with
                "0x". This is used as the identifier for the key when sending requests
                to the Web3Signer service.
        - group:
            required: false
            help_text: |-
              Configuration for creating voting keys from a new seed phrase, and
              optionally location to back it up to, in Secret Manager.
            params:
            - arg_name: seed-phrase-reference-secret
              help_text: |-
                Reference into Secret Manager for where the seed phrase is stored.
              is_positional: false
              resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1alpha_resources:project_location_or_project_secret
              resource_method_params:
                generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.seedPhraseReference.seedPhraseSecret: '{__relative_name__}'
              required: true
            - arg_name: seed-phrase-reference-export
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.seedPhraseReference.exportSeedPhrase
              action: store_true
              required: false
              type: bool
              help_text: |-
                True to export the seed phrase to Secret Manager.
            - arg_name: seed-phrase-reference-key-count
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.seedPhraseReference.keyCount
              required: true
              repeated: false
              type: int
              help_text: |-
                Number of keys (and therefore validators) to derive from the seed phrase.
                Must be between 1 and 1,000.
        - group:
            required: false
            help_text: |-
              Location of the seed material, and derivation path used to generate the
              voting key.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the  derivation base.
                params:
                - arg_name: existing-seed-phrase-reference-derivation-base
                  api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.existingSeedPhraseReference.derivationBase
                  required: false
                  repeated: false
                  type: int
                  help_text: |-
                    The first derivation index to use when deriving keys. Must be 0
                    or greater.
            - arg_name: existing-seed-phrase-reference-secret
              help_text: |-
                Reference into Secret Manager for where the seed phrase is stored.
              is_positional: false
              resource_spec: !REF googlecloudsdk.command_lib.blockchain_validator.v1alpha_resources:project_location_or_project_secret
              resource_method_params:
                generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.existingSeedPhraseReference.seedPhraseSecret: '{__relative_name__}'
              required: true
            - arg_name: existing-seed-phrase-reference-key-count
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.existingSeedPhraseReference.keyCount
              required: true
              repeated: false
              type: int
              help_text: |-
                Number of keys (and therefore validators) to derive from the seed phrase.
                Must be between 1 and 1,000.
    - group:
        mutex: true
        help_text: |-
          Arguments for the blockchain node source config.
        params:
        - group:
            required: false
            help_text: |-
              Configuration for creating a new blockchain node to deploy the blockchain
              validator(s) to.
            params:
            - group:
                mutex: true
                help_text: |-
                  Arguments for the blockchain node details.
                params:
                - group:
                    required: false
                    help_text: |-
                      Ethereum-specific blockchain node details.
                    params:
                    - group:
                        mutex: true
                        help_text: |-
                          Arguments for the  network.
                        params:
                        - arg_name: new-blockchain-node-source-ethereum-details-network
                          api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.newBlockchainNodeSource.ethereumDetails.network
                          required: true
                          help_text: |-
                            The Ethereum environment being accessed.
                          choices:
                          - arg_value: mainnet
                            enum_value: MAINNET
                            help_text: |-
                              The Ethereum Mainnet.
                          - arg_value: testnet-goerli-prater
                            enum_value: TESTNET_GOERLI_PRATER
                            help_text: |-
                              Deprecated: The Ethereum Testnet based on Goerli protocol. Holesky
                              (TESTNET_HOLESKY) is the recommended testnet to replace Goerli.
                          - arg_value: testnet-sepolia
                            enum_value: TESTNET_SEPOLIA
                            help_text: |-
                              The Ethereum Testnet based on Sepolia/Bepolia protocol.
                              See https://github.com/eth-clients/sepolia.
                          - arg_value: testnet-holesky
                            enum_value: TESTNET_HOLESKY
                            help_text: |-
                              The Ethereum Testnet based on Holesky specification.
                              See https://github.com/eth-clients/holesky.
                    - group:
                        mutex: true
                        help_text: |-
                          Arguments for the  execution client.
                        params:
                        - arg_name: new-blockchain-node-source-ethereum-details-execution-client
                          api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.newBlockchainNodeSource.ethereumDetails.executionClient
                          required: true
                          help_text: |-
                            The execution client
                          choices:
                          - arg_value: geth
                            enum_value: GETH
                            help_text: |-
                              Official Go implementation of the Ethereum protocol.
                              See [go-ethereum](https://geth.ethereum.org/) for details.
                    - group:
                        mutex: true
                        help_text: |-
                          Arguments for the  consensus client.
                        params:
                        - arg_name: new-blockchain-node-source-ethereum-details-consensus-client
                          api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.newBlockchainNodeSource.ethereumDetails.consensusClient
                          required: true
                          help_text: |-
                            The consensus client.
                          choices:
                          - arg_value: lighthouse
                            enum_value: LIGHTHOUSE
                            help_text: |-
                              Consensus client implementation written in Rust, maintained by Sigma
                              Prime. See [Lighthouse - Sigma
                              Prime](https://lighthouse.sigmaprime.io/) for details.
                    - arg_name: new-blockchain-node-source-ethereum-details-mev-relay-urls
                      api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.newBlockchainNodeSource.ethereumDetails.mevRelayUrls
                      required: false
                      repeated: true
                      help_text: |-
                        URLs for MEV-relay services to use for block building. When set, a
                        Google Cloud managed MEV-boost service is configured on the beacon
                        client.
        - group:
            required: false
            help_text: |-
              Configuration for deploying blockchain validators to an existing blockchain
              node.
            params:
            - arg_name: existing-blockchain-node-source-id
              api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.existingBlockchainNodeSource.blockchainNodeId
              required: false
              repeated: false
              help_text: |-
                Name of the blockchain node to deploy the validators to. If not set,
                the validators are not deployed.
    - arg_name: blockchain-validator-config-template-validation-work-enabled
      api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.validationWorkEnabled
      action: store_true
      required: true
      type: bool
      help_text: |-
        True if the blockchain node requests and signs attestations and blocks on
        behalf of this validator, false if not. This does NOT define whether the
        blockchain expects work to occur, only whether the blockchain node
        specified above is carrying out validation tasks.
    - arg_name: blockchain-validator-config-template-type
      api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.blockchainType
      required: true
      help_text: |-
        The blockchain type of the validator.
      choices:
      - arg_value: ethereum
        enum_value: ETHEREUM
        help_text: |-
          The blockchain type is Ethereum.
    - arg_name: blockchain-validator-config-template-key-source
      api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.keySource
      required: true
      help_text: |-
        The source of the voting key for the blockchain validator.
      choices:
      - arg_value: remote-web3-signer
        enum_value: REMOTE_WEB3_SIGNER
        help_text: |-
          The voting key is stored in a remote signing service (Web3Signer) and
          signing requests are delegated.
      - arg_value: seed-phrase-reference
        enum_value: SEED_PHRASE_REFERENCE
        help_text: |-
          Derive voting keys from new seed material.
      - arg_value: existing-seed-phrase-reference
        enum_value: EXISTING_SEED_PHRASE_REFERENCE
        help_text: |-
          Derive voting keys from existing seed material.
    - arg_name: blockchain-validator-config-template-node-source
      api_field: generateBlockchainValidatorConfigsRequest.blockchainValidatorConfigTemplate.blockchainNodeSource
      required: true
      help_text: |-
        The source of the blockchain node for the validator configurations to be
        deployed to.
      choices:
      - arg_value: new-blockchain-node
        enum_value: NEW_BLOCKCHAIN_NODE
        help_text: |-
          Create a new blockchain node to deploy the validators to.
      - arg_value: existing-blockchain-node
        enum_value: EXISTING_BLOCKCHAIN_NODE
        help_text: |-
          Deploying blockchain validators to an existing blockchain node,
          or to no node.
  request:
    api_version: v1alpha
    collection:
    - blockchainvalidatormanager.projects.locations.blockchainValidatorConfigs
    method: generate
  async:
    collection:
    - blockchainvalidatormanager.projects.locations.operations
