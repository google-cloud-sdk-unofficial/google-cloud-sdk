{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "recaptchaenterprise:v1",
  "name": "recaptchaenterprise",
  "canonicalName": "Recaptcha Enterprise",
  "version": "v1",
  "revision": "0",
  "title": "reCAPTCHA Enterprise API",
  "description": "Help protect your website from fraudulent activity, spam, and abuse without creating friction.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/recaptcha-enterprise/",
  "protocol": "rest",
  "rootUrl": "https://recaptchaenterprise.googleapis.com/",
  "mtlsRootUrl": "https://recaptchaenterprise.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://recaptchaenterprise.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "schemas": {
    "GoogleCloudRecaptchaenterpriseV1Assessment": {
      "id": "GoogleCloudRecaptchaenterpriseV1Assessment",
      "description": "A recaptcha assessment resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The resource name for the Assessment in the format \"projects\/{project}\/assessments\/{assessment}\".",
          "readOnly": true,
          "type": "string"
        },
        "event": {
          "description": "The event being assessed.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1Event"
        },
        "riskAnalysis": {
          "description": "Output only. The risk analysis result for the event being assessed.",
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis"
        },
        "tokenProperties": {
          "description": "Output only. Properties of the provided event token.",
          "readOnly": true,
          "$ref": "GoogleCloudRecaptchaenterpriseV1TokenProperties"
        },
        "accountDefenderAssessment": {
          "description": "Assessment returned by account defender when a hashed_account_id is provided.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment"
        },
        "privatePasswordLeakVerification": {
          "description": "The private password leak verification field contains the parameters that are used to to check for leaks privately without sharing user credentials.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1Event": {
      "id": "GoogleCloudRecaptchaenterpriseV1Event",
      "type": "object",
      "properties": {
        "token": {
          "description": "Optional. The user response token provided by the reCAPTCHA client-side integration on your site.",
          "type": "string"
        },
        "siteKey": {
          "description": "Optional. The site key that was used to invoke reCAPTCHA on your site and generate the token.",
          "type": "string"
        },
        "userAgent": {
          "description": "Optional. The user agent present in the request from the user's device related to this event.",
          "type": "string"
        },
        "userIpAddress": {
          "description": "Optional. The IP address in the request from the user's device related to this event.",
          "type": "string"
        },
        "expectedAction": {
          "description": "Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.",
          "type": "string"
        },
        "hashedAccountId": {
          "description": "Optional. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RiskAnalysis": {
      "id": "GoogleCloudRecaptchaenterpriseV1RiskAnalysis",
      "description": "Risk analysis result for an event.",
      "type": "object",
      "properties": {
        "score": {
          "description": "Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate traffic while 0.0 means very likely non-legitimate traffic).",
          "type": "number",
          "format": "float"
        },
        "reasons": {
          "description": "Reasons contributing to the risk analysis verdict.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default unspecified type.",
              "Interactions matched the behavior of an automated agent.",
              "The event originated from an illegitimate environment.",
              "Traffic volume from the event source is higher than normal.",
              "Interactions with the site were significantly different than expected patterns.",
              "Too little traffic has been received from this site thus far to generate quality risk analysis."
            ],
            "enum": [
              "CLASSIFICATION_REASON_UNSPECIFIED",
              "AUTOMATION",
              "UNEXPECTED_ENVIRONMENT",
              "TOO_MUCH_TRAFFIC",
              "UNEXPECTED_USAGE_PATTERNS",
              "LOW_CONFIDENCE_SCORE"
            ]
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1TokenProperties": {
      "id": "GoogleCloudRecaptchaenterpriseV1TokenProperties",
      "type": "object",
      "properties": {
        "valid": {
          "description": "Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).",
          "type": "boolean"
        },
        "invalidReason": {
          "description": "Reason associated with the response when valid = false.",
          "type": "string",
          "enumDescriptions": [
            "Default unspecified type.",
            "If the failure reason was not accounted for.",
            "The provided user verification token was malformed.",
            "The user verification token had expired.",
            "The user verification had already been seen.",
            "The user verification token was not present.",
            "A retriable error (such as network failure) occurred on the browser. Could easily be simulated by an attacker."
          ],
          "enum": [
            "INVALID_REASON_UNSPECIFIED",
            "UNKNOWN_INVALID_REASON",
            "MALFORMED",
            "EXPIRED",
            "DUPE",
            "MISSING",
            "BROWSER_ERROR"
          ]
        },
        "createTime": {
          "description": "The timestamp corresponding to the generation of the token.",
          "type": "string",
          "format": "google-datetime"
        },
        "hostname": {
          "description": "The hostname of the page on which the token was generated (Web keys only).",
          "type": "string"
        },
        "androidPackageName": {
          "description": "The name of the Android package with which the token was generated (Android keys only).",
          "type": "string"
        },
        "iosBundleId": {
          "description": "The ID of the iOS bundle with which the token was generated (iOS keys only).",
          "type": "string"
        },
        "action": {
          "description": "Action name provided at token generation.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment": {
      "id": "GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment",
      "description": "Account defender risk assessment.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels for this request.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default unspecified type.",
              "The request matches a known good profile for the user.",
              "The request is potentially a suspicious login event and must be further verified either through multi-factor authentication or another system.",
              "The request matched a profile that previously had suspicious account creation behavior. This can mean that this is a fake account.",
              "The account in the request has a high number of related accounts. It does not necessarily imply that the account is bad but can require further investigation."
            ],
            "enum": [
              "ACCOUNT_DEFENDER_LABEL_UNSPECIFIED",
              "PROFILE_MATCH",
              "SUSPICIOUS_LOGIN_ACTIVITY",
              "SUSPICIOUS_ACCOUNT_CREATION",
              "RELATED_ACCOUNTS_NUMBER_HIGH"
            ]
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification": {
      "id": "GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification",
      "description": "Private password leak verification info.",
      "type": "object",
      "properties": {
        "lookupHashPrefix": {
          "description": "Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix.",
          "type": "string",
          "format": "byte"
        },
        "encryptedUserCredentialsHash": {
          "description": "Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through `reencrypted_user_credentials_hash`.",
          "type": "string",
          "format": "byte"
        },
        "encryptedLeakMatchPrefixes": {
          "description": "Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They must be compared with the client-side decryption prefix of `reencrypted_user_credentials_hash`",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "reencryptedUserCredentialsHash": {
          "description": "Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field. It is used to match potential password leaks within `encrypted_leak_match_prefixes`.",
          "readOnly": true,
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest": {
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest",
      "description": "The request message to annotate an Assessment.",
      "type": "object",
      "properties": {
        "annotation": {
          "description": "Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.",
          "type": "string",
          "enumDescriptions": [
            "Default unspecified type.",
            "Provides information that the event turned out to be legitimate.",
            "Provides information that the event turned out to be fraudulent.",
            "Provides information that the event was related to a login event in which the user typed the correct password. Deprecated, prefer indicating CORRECT_PASSWORD through the reasons field instead.",
            "Provides information that the event was related to a login event in which the user typed the incorrect password. Deprecated, prefer indicating INCORRECT_PASSWORD through the reasons field instead."
          ],
          "enum": [
            "ANNOTATION_UNSPECIFIED",
            "LEGITIMATE",
            "FRAUDULENT",
            "PASSWORD_CORRECT",
            "PASSWORD_INCORRECT"
          ]
        },
        "reasons": {
          "description": "Optional. Optional reasons for the annotation that will be assigned to the Event.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default unspecified reason.",
              "Indicates that the transaction had a chargeback issued with no other details. When possible, specify the type by using CHARGEBACK_FRAUD or CHARGEBACK_DISPUTE instead.",
              "Indicates that the transaction had a chargeback issued related to an alleged unauthorized transaction from the cardholder's perspective (for example, the card number was stolen).",
              "Indicates that the transaction had a chargeback issued related to the cardholder having provided their card details but allegedly not being satisfied with the purchase (for example, misrepresentation, attempted cancellation).",
              "Indicates that the completed payment transaction was refunded by the seller.",
              "Indicates that the completed payment transaction was determined to be fraudulent by the seller, and was cancelled and refunded as a result.",
              "Indicates that the payment transaction was accepted, and the user was charged.",
              "Indicates that the payment transaction was declined, for example due to invalid card details.",
              "Indicates the transaction associated with the assessment is suspected of being fraudulent based on the payment method, billing details, shipping address or other transaction information.",
              "Indicates that the user was served a 2FA challenge. An old assessment with `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been overwritten with `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow. This is equivalent to `FAILED_TWO_FACTOR`.",
              "Indicates that the user passed a 2FA challenge.",
              "Indicates that the user failed a 2FA challenge.",
              "Indicates the user provided the correct password.",
              "Indicates the user provided an incorrect password.",
              "Indicates that the user sent unwanted and abusive messages to other users of the platform, such as spam, scams, phishing, or social engineering."
            ],
            "enum": [
              "REASON_UNSPECIFIED",
              "CHARGEBACK",
              "CHARGEBACK_FRAUD",
              "CHARGEBACK_DISPUTE",
              "REFUND",
              "REFUND_FRAUD",
              "TRANSACTION_ACCEPTED",
              "TRANSACTION_DECLINED",
              "PAYMENT_HEURISTICS",
              "INITIATED_TWO_FACTOR",
              "PASSED_TWO_FACTOR",
              "FAILED_TWO_FACTOR",
              "CORRECT_PASSWORD",
              "INCORRECT_PASSWORD",
              "SOCIAL_SPAM"
            ]
          }
        },
        "hashedAccountId": {
          "description": "Optional. Unique stable hashed user identifier to apply to the assessment. This is an alternative to setting the hashed_account_id in CreateAssessment, for example when the account identifier is not yet known in the initial request. It is recommended that the identifier is hashed using hmac-sha256 with stable secret.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse",
      "description": "Empty response for AnnotateAssessment.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudRecaptchaenterpriseV1Key": {
      "id": "GoogleCloudRecaptchaenterpriseV1Key",
      "description": "A key used to identify and configure applications (web and\/or mobile) that use reCAPTCHA Enterprise.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name for the Key in the format \"projects\/{project}\/keys\/{key}\".",
          "type": "string"
        },
        "displayName": {
          "description": "Human-readable display name of this key. Modifiable by user.",
          "type": "string"
        },
        "webSettings": {
          "description": "Settings for keys that can be used by websites.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1WebKeySettings"
        },
        "androidSettings": {
          "description": "Settings for keys that can be used by Android apps.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings"
        },
        "iosSettings": {
          "description": "Settings for keys that can be used by iOS apps.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings"
        },
        "labels": {
          "description": "See Creating and managing labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "The timestamp corresponding to the creation of this Key.",
          "type": "string",
          "format": "google-datetime"
        },
        "testingOptions": {
          "description": "Options for user acceptance testing.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1TestingOptions"
        },
        "wafSettings": {
          "description": "Settings for WAF",
          "$ref": "GoogleCloudRecaptchaenterpriseV1WafSettings"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1WebKeySettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1WebKeySettings",
      "description": "Settings specific to keys that can be used by websites.",
      "type": "object",
      "properties": {
        "allowAllDomains": {
          "description": "If set to true, it means allowed_domains will not be enforced.",
          "type": "boolean"
        },
        "allowedDomains": {
          "description": "Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowAmpTraffic": {
          "description": "If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.",
          "type": "boolean"
        },
        "integrationType": {
          "description": "Required. Describes how this key is integrated with the website.",
          "type": "string",
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified. This is not a valid IntegrationType, one of the other types must be specified instead.",
            "Only used to produce scores. It doesn't display the \"I'm not a robot\" checkbox and never shows captcha challenges.",
            "Displays the \"I'm not a robot\" checkbox and may show captcha challenges after it is checked.",
            "Doesn't display the \"I'm not a robot\" checkbox, but may show captcha challenges after risk analysis."
          ],
          "enum": [
            "INTEGRATION_TYPE_UNSPECIFIED",
            "SCORE",
            "CHECKBOX",
            "INVISIBLE"
          ]
        },
        "challengeSecurityPreference": {
          "description": "Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.",
          "type": "string",
          "enumDescriptions": [
            "Default type that indicates this enum hasn't been specified.",
            "Key tends to show fewer and easier challenges.",
            "Key tends to show balanced (in amount and difficulty) challenges.",
            "Key tends to show more and harder challenges."
          ],
          "enum": [
            "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED",
            "USABILITY",
            "BALANCE",
            "SECURITY"
          ]
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1AndroidKeySettings",
      "description": "Settings specific to keys that can be used by Android apps.",
      "type": "object",
      "properties": {
        "allowAllPackageNames": {
          "description": "If set to true, allowed_package_names are not enforced.",
          "type": "boolean"
        },
        "allowedPackageNames": {
          "description": "Android package names of apps allowed to use the key. Example: 'com.companyname.appname'",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1IOSKeySettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1IOSKeySettings",
      "description": "Settings specific to keys that can be used by iOS apps.",
      "type": "object",
      "properties": {
        "allowAllBundleIds": {
          "description": "If set to true, allowed_bundle_ids are not enforced.",
          "type": "boolean"
        },
        "allowedBundleIds": {
          "description": "iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1TestingOptions": {
      "id": "GoogleCloudRecaptchaenterpriseV1TestingOptions",
      "description": "Options for user acceptance testing.",
      "type": "object",
      "properties": {
        "testingScore": {
          "description": "All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.",
          "type": "number",
          "format": "float"
        },
        "testingChallenge": {
          "description": "For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.",
          "type": "string",
          "enumDescriptions": [
            "Perform the normal risk analysis and return either nocaptcha or a challenge depending on risk and trust factors.",
            "Challenge requests for this key always return a nocaptcha, which does not require a solution.",
            "Challenge requests for this key always return an unsolvable challenge."
          ],
          "enum": [
            "TESTING_CHALLENGE_UNSPECIFIED",
            "NOCAPTCHA",
            "UNSOLVABLE_CHALLENGE"
          ]
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1WafSettings": {
      "id": "GoogleCloudRecaptchaenterpriseV1WafSettings",
      "description": "Settings specific to keys that can be used for WAF (Web Application Firewall).",
      "type": "object",
      "properties": {
        "wafService": {
          "description": "Required. The WAF service that uses this key.",
          "type": "string",
          "enumDescriptions": [
            "Undefined WAF",
            "Cloud Armor",
            "Fastly"
          ],
          "enum": [
            "WAF_SERVICE_UNSPECIFIED",
            "CA",
            "FASTLY"
          ]
        },
        "wafFeature": {
          "description": "Required. The WAF feature for which this key is enabled.",
          "type": "string",
          "enumDescriptions": [
            "Undefined feature.",
            "Redirects suspicious traffic to reCAPTCHA.",
            "Use reCAPTCHA session-tokens to protect the whole user session on the site's domain.",
            "Use reCAPTCHA action-tokens to protect user actions."
          ],
          "enum": [
            "WAF_FEATURE_UNSPECIFIED",
            "CHALLENGE_PAGE",
            "SESSION_TOKEN",
            "ACTION_TOKEN"
          ]
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ListKeysResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse",
      "description": "Response to request to list keys in a project.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "Key details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. It is set to empty if no keys remain in results.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse",
      "description": "Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party integration with legacy reCAPTCHA.",
      "type": "object",
      "properties": {
        "legacySecretKey": {
          "description": "The secret key (also known as shared secret) authorizes communication between your application backend and the reCAPTCHA Enterprise server to create an assessment. The secret key needs to be kept safe for security purposes.",
          "type": "string"
        }
      }
    },
    "GoogleProtobufEmpty": {
      "id": "GoogleProtobufEmpty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest": {
      "id": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest",
      "description": "The migrate key request message.",
      "type": "object",
      "properties": {
        "skipBillingCheck": {
          "description": "Optional. Whether or not to do billing check. A reCAPTCHA Enterprise or migrated key behaves differently than a reCAPTCHA (non-Enterprise version) key when you reach a quota limit (see https:\/\/cloud.google.com\/recaptcha-enterprise\/quotas#quota_limit). To avoid any disruption of your usage, we check that a billing account is present. If your usage of reCAPTCHA is under the free quota, you can safely skip the billing check and proceed with the migration. See https:\/\/cloud.google.com\/recaptcha-enterprise\/docs\/billing-information.",
          "type": "boolean"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1Metrics": {
      "id": "GoogleCloudRecaptchaenterpriseV1Metrics",
      "description": "Metrics for a single Key.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The name of the metrics, in the format \"projects\/{project}\/keys\/{key}\/metrics\".",
          "readOnly": true,
          "type": "string"
        },
        "startTime": {
          "description": "Inclusive start time aligned to a day (UTC).",
          "type": "string",
          "format": "google-datetime"
        },
        "scoreMetrics": {
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics"
          }
        },
        "challengeMetrics": {
          "description": "Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreMetrics": {
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreMetrics",
      "description": "Metrics related to scoring.",
      "type": "object",
      "properties": {
        "overallMetrics": {
          "description": "Aggregated score metrics for all traffic.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution"
        },
        "actionMetrics": {
          "description": "Action-based metrics. The map key is the action name which specified by the site owners at time of the \"execute\" client-side call.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ScoreDistribution": {
      "id": "GoogleCloudRecaptchaenterpriseV1ScoreDistribution",
      "description": "Score distribution.",
      "type": "object",
      "properties": {
        "scoreBuckets": {
          "description": "Map key is score value multiplied by 100. The scores are discrete values between [0, 1]. The maximum number of buckets is on order of a few dozen, but typically much lower (ie. 10).",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics": {
      "id": "GoogleCloudRecaptchaenterpriseV1ChallengeMetrics",
      "description": "Metrics related to challenges.",
      "type": "object",
      "properties": {
        "pageloadCount": {
          "description": "Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of pageloads for pages that include reCAPTCHA.",
          "type": "string",
          "format": "int64"
        },
        "nocaptchaCount": {
          "description": "Count of nocaptchas (successful verification without a challenge) issued.",
          "type": "string",
          "format": "int64"
        },
        "failedCount": {
          "description": "Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such that a subsequent challenge was triggered.",
          "type": "string",
          "format": "int64"
        },
        "passedCount": {
          "description": "Count of nocaptchas (successful verification without a challenge) plus submitted challenge solutions that were correct and resulted in verification.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallPolicy": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy",
      "description": "An FirewallPolicy represents a single matching pattern and resulting actions to take.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name for the FirewallPolicy in the format \"projects\/{project}\/firewallpolicies\/{firewallpolicy}\".",
          "type": "string"
        },
        "description": {
          "description": "A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.",
          "type": "string"
        },
        "path": {
          "description": "The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https:\/\/man7.org\/linux\/man-pages\/man7\/glob.7.html). A path has a max length of 200 characters.",
          "type": "string"
        },
        "condition": {
          "description": "A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https:\/\/github.com\/google\/cel-spec) and its [language definition](https:\/\/github.com\/google\/cel-spec\/blob\/master\/doc\/langdef.md). A condition has a max length of 500 characters.",
          "type": "string"
        },
        "actions": {
          "description": "The actions that the caller should take regarding the user. There should be at most 1 terminal action. A terminal action is any action that forces a response, such as Allow, Block or Substitute. If it makes sense for it to happen multple times, such as SetHeader, the action is non-terminal. A maximum of 16 actions can be in a single policy.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallAction"
          }
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallAction",
      "description": "An individual action. Each action represents what to do if a policy matches.",
      "type": "object",
      "properties": {
        "allow": {
          "description": "The user request did not match any policy and should be allowed access to the requested resource.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction"
        },
        "block": {
          "description": "This action will deny access to a given page. The user will get an HTTP error code.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction"
        },
        "redirect": {
          "description": "This action will redirect the request to a ReCaptcha interstitial to attach a token.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction"
        },
        "substitute": {
          "description": "This action will transparently serve a different page to an offending user.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction"
        },
        "setHeader": {
          "description": "This action will set a custom header but allow the request to continue to the customer backend.",
          "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction",
      "description": "An allow action continues processing a request unimpeded.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction",
      "description": "A block action serves an HTTP error code a prevents the request from hitting the backend.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction",
      "description": "A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction",
      "description": "A substitute action transparently serves a different page than the one requested.",
      "type": "object",
      "properties": {
        "path": {
          "description": "The address to redirect to. The target is a relative path in the current host. Example: \"\/blog\/404.html\".",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction": {
      "id": "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction",
      "description": "A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The header key to set in the request to the backend server.",
          "type": "string"
        },
        "value": {
          "description": "The header value to set in the request to the backend server.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse",
      "description": "Response to request to list firewall policies belonging to a key.",
      "type": "object",
      "properties": {
        "firewallPolicies": {
          "description": "Policy details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results. It is set to empty if no policies remain in results.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse",
      "description": "The response to a `ListRelatedAccountGroups` call.",
      "type": "object",
      "properties": {
        "relatedAccountGroups": {
          "description": "The groups of related accounts listed by the query.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup": {
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup",
      "description": "A group of related accounts.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The resource name for the related account group in the format `projects\/{project}\/relatedaccountgroups\/{related_account_group}`.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse",
      "description": "The response to a `ListRelatedAccountGroupMemberships` call.",
      "type": "object",
      "properties": {
        "relatedAccountGroupMemberships": {
          "description": "The memberships listed by the query.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership": {
      "id": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership",
      "description": "A membership in a group of related accounts.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The resource name for this membership in the format `projects\/{project}\/relatedaccountgroups\/{relatedaccountgroup}\/memberships\/{membership}`.",
          "type": "string"
        },
        "hashedAccountId": {
          "description": "The unique stable hashed user identifier of the member. The identifier corresponds to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest": {
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest",
      "description": "The request message to search related account group memberships.",
      "type": "object",
      "properties": {
        "hashedAccountId": {
          "description": "Optional. The unique stable hashed user identifier we should search connections to. The identifier should correspond to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call.",
          "type": "string",
          "format": "byte"
        },
        "pageSize": {
          "description": "Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. A page token, received from a previous `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchRelatedAccountGroupMemberships` must match the call that provided the page token.",
          "type": "string"
        }
      }
    },
    "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse": {
      "id": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse",
      "description": "The response to a `SearchRelatedAccountGroupMemberships` call.",
      "type": "object",
      "properties": {
        "relatedAccountGroupMemberships": {
          "description": "The queried memberships.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "assessments": {
          "methods": {
            "create": {
              "id": "recaptchaenterprise.projects.assessments.create",
              "path": "v1/{+parent}/assessments",
              "flatPath": "v1/projects/{projectsId}/assessments",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project in which the assessment will be created, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Assessment"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates an Assessment of the likelihood an event is legitimate."
            },
            "annotate": {
              "id": "recaptchaenterprise.projects.assessments.annotate",
              "path": "v1/{+name}:annotate",
              "flatPath": "v1/projects/{projectsId}/assessments/{assessmentsId}:annotate",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. The resource name of the Assessment, in the format \"projects\/{project}\/assessments\/{assessment}\".",
                  "pattern": "^projects\/[^\/]+\/assessments\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent."
            }
          }
        },
        "keys": {
          "methods": {
            "create": {
              "id": "recaptchaenterprise.projects.keys.create",
              "path": "v1/{+parent}/keys",
              "flatPath": "v1/projects/{projectsId}/keys",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project in which the key will be created, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new reCAPTCHA Enterprise key."
            },
            "list": {
              "id": "recaptchaenterprise.projects.keys.list",
              "path": "v1/{+parent}/keys",
              "flatPath": "v1/projects/{projectsId}/keys",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project that contains the keys that will be listed, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "Optional. The maximum number of keys to return. Default is 10. Max limit is 1000.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Optional. The next_page_token value returned from a previous. ListKeysRequest, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListKeysResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the list of all keys that belong to a project."
            },
            "retrieveLegacySecretKey": {
              "id": "recaptchaenterprise.projects.keys.retrieveLegacySecretKey",
              "path": "v1/{+key}:retrieveLegacySecretKey",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:retrieveLegacySecretKey",
              "httpMethod": "GET",
              "parameters": {
                "key": {
                  "description": "Required. The public key name linked to the requested secret key in the format \"projects\/{project}\/keys\/{key}\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "key"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA."
            },
            "get": {
              "id": "recaptchaenterprise.projects.keys.get",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the requested key, in the format \"projects\/{project}\/keys\/{key}\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the specified key."
            },
            "patch": {
              "id": "recaptchaenterprise.projects.keys.patch",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "The resource name for the Key in the format \"projects\/{project}\/keys\/{key}\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "updateMask": {
                  "description": "Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates the specified key."
            },
            "delete": {
              "id": "recaptchaenterprise.projects.keys.delete",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The name of the key to be deleted, in the format \"projects\/{project}\/keys\/{key}\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleProtobufEmpty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes the specified key."
            },
            "migrate": {
              "id": "recaptchaenterprise.projects.keys.migrate",
              "path": "v1/{+name}:migrate",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}:migrate",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. The name of the key to be migrated, in the format \"projects\/{project}\/keys\/{key}\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Key"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project."
            },
            "getMetrics": {
              "id": "recaptchaenterprise.projects.keys.getMetrics",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/keys/{keysId}/metrics",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the requested metrics, in the format \"projects\/{project}\/keys\/{key}\/metrics\".",
                  "pattern": "^projects\/[^\/]+\/keys\/[^\/]+\/metrics$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1Metrics"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Get some aggregated metrics for a Key. This data can be used to build dashboards."
            }
          }
        },
        "firewallpolicies": {
          "methods": {
            "create": {
              "id": "recaptchaenterprise.projects.firewallpolicies.create",
              "path": "v1/{+parent}/firewallpolicies",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project this policy will apply to, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA actions can be executed. A project may have a maximum of 1000 policies."
            },
            "list": {
              "id": "recaptchaenterprise.projects.firewallpolicies.list",
              "path": "v1/{+parent}/firewallpolicies",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project to list the policies for, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "Optional. The maximum number of policies to return. Default is 10. Max limit is 1000.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Optional. The next_page_token value returned from a previous. ListFirewallPoliciesRequest, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the list of all firewall policies that belong to a project."
            },
            "get": {
              "id": "recaptchaenterprise.projects.firewallpolicies.get",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the requested policy, in the format \"projects\/{project}\/firewallpolicies\/{firewallpolicy}\".",
                  "pattern": "^projects\/[^\/]+\/firewallpolicies\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns the specified firewall policy."
            },
            "patch": {
              "id": "recaptchaenterprise.projects.firewallpolicies.patch",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "The resource name for the FirewallPolicy in the format \"projects\/{project}\/firewallpolicies\/{firewallpolicy}\".",
                  "pattern": "^projects\/[^\/]+\/firewallpolicies\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "updateMask": {
                  "description": "Optional. The mask to control which fields of the policy get updated. If the mask is not present, all fields will be updated.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates the specified firewall policy."
            },
            "delete": {
              "id": "recaptchaenterprise.projects.firewallpolicies.delete",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/firewallpolicies/{firewallpoliciesId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The name of the policy to be deleted, in the format \"projects\/{project}\/firewallpolicies\/{firewallpolicy}\".",
                  "pattern": "^projects\/[^\/]+\/firewallpolicies\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleProtobufEmpty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes the specified firewall policy."
            }
          }
        },
        "relatedaccountgroups": {
          "methods": {
            "list": {
              "id": "recaptchaenterprise.projects.relatedaccountgroups.list",
              "path": "v1/{+parent}/relatedaccountgroups",
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroups",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project to list related account groups from, in the format \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Optional. A page token, received from a previous `ListRelatedAccountGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRelatedAccountGroups` must match the call that provided the page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List groups of related accounts."
            }
          }
          ,
          "resources": {
            "memberships": {
              "methods": {
                "list": {
                  "id": "recaptchaenterprise.projects.relatedaccountgroups.memberships.list",
                  "path": "v1/{+parent}/memberships",
                  "flatPath": "v1/projects/{projectsId}/relatedaccountgroups/{relatedaccountgroupsId}/memberships",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The resource name for the related account group in the format `projects\/{project}\/relatedaccountgroups\/{relatedaccountgroup}`.",
                      "pattern": "^projects\/[^\/]+\/relatedaccountgroups\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Optional. The maximum number of accounts to return. The service might return fewer than this value. If unspecified, at most 50 accounts are returned. The maximum value is 1000; values above 1000 are coerced to 1000.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Optional. A page token, received from a previous `ListRelatedAccountGroupMemberships` call. When paginating, all other parameters provided to `ListRelatedAccountGroupMemberships` must match the call that provided the page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Get memberships in a group of related accounts."
                }
              }
            }
          }
        },
        "relatedaccountgroupmemberships": {
          "methods": {
            "search": {
              "id": "recaptchaenterprise.projects.relatedaccountgroupmemberships.search",
              "path": "v1/{+project}/relatedaccountgroupmemberships:search",
              "flatPath": "v1/projects/{projectsId}/relatedaccountgroupmemberships:search",
              "httpMethod": "POST",
              "parameters": {
                "project": {
                  "description": "Required. The name of the project to search related account group memberships from. Specify the project name in the following format: \"projects\/{project}\".",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "project"
              ],
              "request": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest"
              },
              "response": {
                "$ref": "GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Search group memberships related to a given account."
            }
          }
        }
      }
    }
  },
  "basePath": ""
}