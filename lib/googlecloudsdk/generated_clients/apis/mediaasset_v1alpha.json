{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "mediaasset:v1alpha",
  "name": "mediaasset",
  "canonicalName": "Media Asset",
  "version": "v1alpha",
  "revision": "0",
  "title": "Media Asset API",
  "description": "",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "go/cloud-media-asset",
  "protocol": "rest",
  "rootUrl": "https://mediaasset.googleapis.com/",
  "mtlsRootUrl": "https://mediaasset.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://mediaasset.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "schemas": {
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {
      }
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "properties": {
      }
    },
    "Action": {
      "id": "Action",
      "description": "An action resource. Action is a read-only resource and is nested under an asset. It contains the status of the actions associated with an Asset.",
      "type": "object",
      "properties": {
        "assetTransformation": {
          "description": "Status of asset transformation, if this action is for asset transformation.",
          "$ref": "TransformationStatus"
        },
        "derivedAsset": {
          "description": "Status of derived asset action.",
          "$ref": "DerivedAssetStatus"
        },
        "notification": {
          "description": "Status of notification action.",
          "$ref": "NotificationStatus"
        },
        "name": {
          "description": "The resource name of the action, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}\/actions\/{action}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "rule": {
          "description": "Required. The resource name of the rule, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/rule\/{rule}`.",
          "type": "string"
        },
        "state": {
          "description": "Current state of the action.",
          "type": "string",
          "enumDescriptions": [
            "Transformation state is unspecified.",
            "Transformation is queued.",
            "Transformation is in running state.",
            "Transformation has been completed successfully.",
            "Transformation has been completed unsuccessfully.",
            "Transformation has been cancelled.",
            "Transformation is in cancelling state."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "CANCELLED",
            "CANCELLING"
          ]
        }
      }
    },
    "TransformationStatus": {
      "id": "TransformationStatus",
      "description": "Status of Asset transformation.",
      "type": "object",
      "properties": {
        "lastInvocationStatus": {
          "description": "Status of the last invocation of the asset transformation.",
          "$ref": "Status"
        },
        "lastInvocationTime": {
          "description": "Output only. Time at which the last invocation of the asset transformation occurred.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "invocationId": {
          "description": "A UUID of the asset transformation run.",
          "type": "string"
        },
        "progressReport": {
          "description": "Output only. A struct that was provided by the Transformer as progress report.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "DerivedAssetStatus": {
      "id": "DerivedAssetStatus",
      "description": "Status of derived asset action.",
      "type": "object",
      "properties": {
      }
    },
    "NotificationStatus": {
      "id": "NotificationStatus",
      "description": "Status of notification action",
      "type": "object",
      "properties": {
        "status": {
          "description": "Output only. Status of the last pub\/sub action.",
          "readOnly": true,
          "$ref": "Status"
        },
        "lastUpdateTime": {
          "description": "Output only. Time at which the last pub\/sub action occurred.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ListActionsResponse": {
      "id": "ListActionsResponse",
      "description": "Response message for ActionsService.ListActions.",
      "type": "object",
      "properties": {
        "actions": {
          "description": "The list of actions.",
          "type": "array",
          "items": {
            "$ref": "Action"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "CancelActionRequest": {
      "id": "CancelActionRequest",
      "description": "Request message for ActionsService.CancelAction.",
      "type": "object",
      "properties": {
      }
    },
    "CancelActionResponse": {
      "id": "CancelActionResponse",
      "description": "Response message of ActionsService.CancelAction.",
      "type": "object",
      "properties": {
      }
    },
    "TriggerActionRequest": {
      "id": "TriggerActionRequest",
      "description": "Request message for ActionsService.TriggerAction.",
      "type": "object",
      "properties": {
      }
    },
    "TriggerActionResponse": {
      "id": "TriggerActionResponse",
      "description": "Response message for ActionsService.TriggerAction.",
      "type": "object",
      "properties": {
      }
    },
    "AnnotationSet": {
      "id": "AnnotationSet",
      "description": "An annotationSet resource is associated with an Asset and is a collection of timed-metadata that can be modified and searched at a high throughput.",
      "type": "object",
      "properties": {
        "name": {
          "description": "A user-specified resource name of the annotationSet `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}`. Here {annotation_set} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time of the annotationSet.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The latest update time of the annotationSet.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "description": "Etag of the resource used in output and update requests.",
          "type": "string"
        }
      }
    },
    "ListAnnotationSetsResponse": {
      "id": "ListAnnotationSetsResponse",
      "description": "Response message for AnnotationSetsService.ListAnnotationSets.",
      "type": "object",
      "properties": {
        "annotationSets": {
          "description": "The annotationSets from the specified asset.",
          "type": "array",
          "items": {
            "$ref": "AnnotationSet"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "Annotation": {
      "id": "Annotation",
      "description": "An annotation resource is associated with an AnnotationSet and represents timed-metadata that can be modified and searched at a high throughput.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. An automatically-generated resource name of the annotation `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}\/annotations\/{annotation}`.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time of the annotation.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The latest update time of the annotation.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "description": "Etag of the resource used in output and update requests.",
          "type": "string"
        },
        "data": {
          "description": "Required. Data held by the annotation. Data must have \"start\" and \"end\" fields. For \"start\" and \"end\": If the type is datetime, it must be a string that follows RFC3339. If the type is number or duration, it must be a valid int64.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "state": {
          "description": "Output only. State of the annotation.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "STATE_UNSPECIFIED means state of the annotation is unclear.",
            "ACTIVE means the annotation is created and ready to be used.",
            "DELETING means the annotation is being deleted. This state only shows up in the annotation in pub sub notification when DeleteAnnotation method is called.",
            "PROCESSING means the annotation is being processed by the system. IMS Annotations under PROCESSING state will not show up as part of the search result."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "DELETING",
            "PROCESSING"
          ]
        }
      }
    },
    "ListAnnotationsResponse": {
      "id": "ListAnnotationsResponse",
      "description": "Response message for AnnotationsService.ListAnnotations.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "The annotations from the specified asset.",
          "type": "array",
          "items": {
            "$ref": "Annotation"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "AssetType": {
      "id": "AssetType",
      "description": "An asset type resource. An asset type defines the schema for the assets.It specifies configuration of all the fields present on the asset.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the asset type, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`. Here {type} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadataConfigs": {
          "description": "Mapping of field name to its configuration.",
          "type": "object",
          "additionalProperties": {
            "$ref": "MetadataConfig"
          }
        },
        "linkConfigs": {
          "description": "Mapping of a link field name to its configuration.",
          "type": "object",
          "additionalProperties": {
            "$ref": "LinkConfig"
          }
        },
        "linkSetConfigs": {
          "description": "Mapping of a collection of link sets to the set configuration.",
          "type": "object",
          "additionalProperties": {
            "$ref": "LinkSetConfig"
          }
        },
        "indexedFieldConfigs": {
          "description": "List of indexed fields (e.g. \"metadata.file.url\") to make available in searches with their corresponding properties.",
          "type": "object",
          "additionalProperties": {
            "$ref": "IndexedFieldConfig"
          }
        },
        "sortOrder": {
          "description": "Specifies sort order for all assets of the type. If not specified, assets are sorted in reverse create_time order (newest first).",
          "$ref": "SortOrderConfig"
        },
        "annotationSetConfigs": {
          "description": "Mapping of annotationSet ID to its configuration. The annotationSet ID will be used as the resource ID when GCMA creates the AnnotationSet internally. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "object",
          "additionalProperties": {
            "$ref": "AnnotationSetConfig"
          }
        },
        "mediaType": {
          "description": "Specifies the kind of media held by assets of this asset type.",
          "type": "string",
          "enumDescriptions": [
            "AssetTypes with unspecified media types hold generic assets.",
            "AssetTypes with video media types have the following properties: 1. Have a required and immutable metadata field called 'video_file' of type 'system:gcs-file', which is the path to a video file. 2. Support searching the content of the provided video asset."
          ],
          "enum": [
            "MEDIA_TYPE_UNSPECIFIED",
            "VIDEO"
          ]
        },
        "assetTypeStats": {
          "description": "asset_type_stats stores stats on this asset type.",
          "$ref": "AssetTypeStats"
        },
        "facetConfigs": {
          "description": "Mapping of facet name to its configuration. To update facets, use either \"*\" or \"facet_configs\" update mask.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FacetConfig"
          }
        },
        "featureConfigs": {
          "description": "Configuration for IMS features, including languages for speech transcription.",
          "$ref": "FeatureConfigs"
        }
      }
    },
    "MetadataConfig": {
      "id": "MetadataConfig",
      "type": "object",
      "properties": {
        "complexType": {
          "description": "Required. Reference to the complex type name, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{name}`.",
          "type": "string"
        },
        "moduleDefinition": {
          "description": "Reference to the module definition name, in the following form: `projects\/{project}\/locations\/{location}\/modules\/{name}#{definition}`.",
          "type": "string"
        },
        "required": {
          "description": "If true, this asset metadata is required to be specified during asset creation.",
          "type": "boolean"
        },
        "owner": {
          "description": "Output only. The owner of the metadata, set by the system.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "LinkConfig": {
      "id": "LinkConfig",
      "type": "object",
      "properties": {
        "assetType": {
          "description": "Required. Reference to the asset type name of the linked asset, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{name}`.",
          "type": "string"
        },
        "required": {
          "description": "If true, this asset link is required during asset creation.",
          "type": "boolean"
        },
        "owner": {
          "description": "Output only. The owner of the link, if it's updated by the system.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "LinkSetConfig": {
      "id": "LinkSetConfig",
      "type": "object",
      "properties": {
        "assetType": {
          "description": "Required. Reference to the asset type name for the type of the assets in this set, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{name}`.",
          "type": "string"
        }
      }
    },
    "IndexedFieldConfig": {
      "id": "IndexedFieldConfig",
      "type": "object",
      "properties": {
        "fullTextSearch": {
          "description": "Enable full text search - strings only. DEPRECATED, use tokenization",
          "type": "boolean"
        },
        "expression": {
          "description": "Expression to evaluate in the context of an indexed property defaults to the property name.",
          "type": "string"
        },
        "tokenization": {
          "description": "String tokenization mode.",
          "type": "string",
          "enumDescriptions": [
            "No tokenization - only exact string matches are supported.",
            "Use word tokens.",
            "Uses 3-ngram tokens supporting efficient substring searches."
          ],
          "enum": [
            "TOKENIZATION_UNSPECIFIED",
            "WORDS",
            "SUBSTRINGS_NGRAM_3"
          ]
        },
        "state": {
          "description": "Output only. State shows whether IndexedFieldConfig is ready to be used.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "STATE_UNSPECIFIED is not an expected state.",
            "UPDATING means the config is still being updated and not filterable.",
            "ACTIVE means the config is filterable."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "UPDATING",
            "ACTIVE"
          ]
        }
      }
    },
    "SortOrderConfig": {
      "id": "SortOrderConfig",
      "type": "object",
      "properties": {
        "field": {
          "description": "Required. Field to sort by. Must be: - required - numeric, datetime or duration field - within the asset itself and not in any linked assets.",
          "type": "string"
        },
        "descending": {
          "description": "Sort in descending order.",
          "type": "boolean"
        }
      }
    },
    "AnnotationSetConfig": {
      "id": "AnnotationSetConfig",
      "description": "Configuration of an annotationSet.",
      "type": "object",
      "properties": {
        "complexType": {
          "description": "Required. Reference to the complex type name, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{name}`. Complex type of the annotation set config has the following requirements: 1. Must have two required fields named start and end. 2. Allowed types for start and end: Video asset type: timecode. 3. Start and end should have the same type.",
          "type": "string"
        },
        "indexedFieldConfigs": {
          "description": "List of indexed fields (e.g. \"data.start\") to make available in searches with their corresponding properties.",
          "type": "object",
          "additionalProperties": {
            "$ref": "IndexedFieldConfig"
          }
        }
      }
    },
    "AssetTypeStats": {
      "id": "AssetTypeStats",
      "description": "AssetTypeStats stores stats on this asset type.",
      "type": "object",
      "properties": {
        "ruleStats": {
          "description": "A map from rule_id to RuleStats.",
          "type": "object",
          "additionalProperties": {
            "$ref": "RuleStats"
          }
        }
      }
    },
    "RuleStats": {
      "id": "RuleStats",
      "description": "RuleStats stores information on actions related to a certain rule.",
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of actions that already have the same version as the current rule.",
          "type": "string",
          "format": "int64"
        },
        "updating": {
          "description": "The number of actions with version < `version of the current rule`.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "FacetConfig": {
      "id": "FacetConfig",
      "description": "FacetConfig allows for configuration of faceted search.",
      "type": "object",
      "properties": {
        "operators": {
          "description": "The list of search operators to include in a facet.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxValues": {
          "description": "Maximum number of facet values to return in a facet. Default is 10.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "FeatureConfigs": {
      "id": "FeatureConfigs",
      "description": "FeatureConfigs configure different IMS properties.",
      "type": "object",
      "properties": {
        "speechTranscriptionConfig": {
          "description": "Configure transcription options for speech: keyword.",
          "$ref": "SpeechTranscriptionConfig"
        }
      }
    },
    "SpeechTranscriptionConfig": {
      "id": "SpeechTranscriptionConfig",
      "description": "Configure transcription options for speech: keyword.",
      "type": "object",
      "properties": {
        "languageCode": {
          "description": "Language code to use for configuring `speech:` search keyword. If unset, the default language will be English (en-US). This language code will be validated under [BCP-47](https:\/\/www.rfc-editor.org\/rfc\/bcp\/bcp47.txt). Example: \"en-US\". See [Language Support](https:\/\/cloud.google.com\/speech\/docs\/languages) for a list of the currently supported language codes.",
          "type": "string"
        }
      }
    },
    "ListAssetTypesResponse": {
      "id": "ListAssetTypesResponse",
      "description": "Response message for AssetTypesService.ListAssetTypes.",
      "type": "object",
      "properties": {
        "assetTypes": {
          "description": "The list of asset types.",
          "type": "array",
          "items": {
            "$ref": "AssetType"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchAssetTypeRequest": {
      "id": "SearchAssetTypeRequest",
      "description": "Request message for AssetTypesService.Search.",
      "type": "object",
      "properties": {
        "pageSize": {
          "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "The next_page_token value returned from a previous Search request, if any.",
          "type": "string"
        },
        "type": {
          "description": "By default, search at segment level.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified type.",
            "Video-level search. That is, search over videos and video-level metadata.",
            "Segment-level search. That is, search over segments within videos and annotations."
          ],
          "enum": [
            "SEARCH_REQUEST_TYPE_UNSPECIFIED",
            "SEARCH_REQUEST_TYPE_ASSET",
            "SEARCH_REQUEST_TYPE_SEGMENT"
          ]
        },
        "query": {
          "description": "Search query.",
          "type": "string"
        },
        "facetSelections": {
          "description": "Facets to be selected.",
          "type": "array",
          "items": {
            "$ref": "Facet"
          }
        }
      }
    },
    "Facet": {
      "id": "Facet",
      "description": "Facet represents an aggregated buckets of search result items.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Key of facet, equivalent to the key in FacetConfig in Video AssetType creation.",
          "type": "string"
        },
        "values": {
          "description": "List of facet values (buckets) representing the search results.",
          "type": "array",
          "items": {
            "$ref": "FacetValue"
          }
        }
      }
    },
    "FacetValue": {
      "id": "FacetValue",
      "description": "FacetValue represents a single value result in a facet.",
      "type": "object",
      "properties": {
        "stringValue": {
          "type": "string"
        },
        "count": {
          "description": "Output only. Number of videos or segments corresponding to the facet.",
          "readOnly": true,
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SearchAssetTypeResponse": {
      "id": "SearchAssetTypeResponse",
      "description": "Response message for AssetTypesService.Search.",
      "type": "object",
      "properties": {
        "items": {
          "description": "Returned search results.",
          "type": "array",
          "items": {
            "$ref": "SearchResultItem"
          }
        },
        "facets": {
          "description": "Returned facets from the search results, showing the aggregated buckets.",
          "type": "array",
          "items": {
            "$ref": "Facet"
          }
        },
        "nextPageToken": {
          "description": "The next-page continuation token.",
          "type": "string"
        }
      }
    },
    "SearchResultItem": {
      "id": "SearchResultItem",
      "description": "Encapsulates each piece of data that matches the search query.",
      "type": "object",
      "properties": {
        "asset": {
          "description": "The resource name of the asset in the form: 'projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}'",
          "type": "string"
        },
        "segments": {
          "description": "Matching segments within the above asset.",
          "type": "array",
          "items": {
            "$ref": "Segment"
          }
        }
      }
    },
    "Segment": {
      "id": "Segment",
      "description": "Represents a segment of a video asset that matches a search query.",
      "type": "object",
      "properties": {
        "startOffset": {
          "description": "Segment start offset timestamp.",
          "type": "string",
          "format": "google-duration"
        },
        "endOffset": {
          "description": "Segment end offet timestamp.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "Asset": {
      "id": "Asset",
      "description": "An asset resource. An asset is a core resource that represents a media entity. An Asset has an asset type associated with it which specifies the schema of the asset.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the asset, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}`. Here {asset} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "assetId": {
          "description": "Output only. The assetID of an asset.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Last update time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "List of metadata for this asset.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object."
            }
          }
        },
        "links": {
          "description": "Links to other assets.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Asset"
          }
        },
        "linkSets": {
          "description": "Named collections of Link Sets, each having qualified links.",
          "type": "object",
          "additionalProperties": {
            "$ref": "LinkSet"
          }
        },
        "metadataInfo": {
          "description": "Output only. System-generated information about the metadata fields. Includes update time and owner.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "MetadataInfo"
          }
        },
        "linkInfo": {
          "description": "Information about the links.",
          "type": "object",
          "additionalProperties": {
            "$ref": "LinkInfo"
          }
        },
        "etag": {
          "description": "Etag of the resource used in output and update requests.",
          "type": "string"
        },
        "state": {
          "description": "State of the asset",
          "type": "string",
          "enumDescriptions": [
            "STATE_UNSPECIFIED maps with UNKNOWN or CREATING in AssetStatus_State in status.proto",
            "ACTIVE maps with READY in AssetStatus_State in status.proto",
            "DELETING maps with DELETING in AssetStatus_State in status.proto"
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "DELETING"
          ]
        },
        "owner": {
          "description": "The owner of the asset, set by the system.",
          "$ref": "Owner"
        },
        "expirationTime": {
          "description": "The expiration time of the asset, asset will be deleted after this time.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "LinkSet": {
      "id": "LinkSet",
      "type": "object",
      "properties": {
        "links": {
          "description": "Mapping of a qualifier to an asset link. Asset Link Format: \"p\/p\/l\/l\/assets\/\"",
          "type": "object",
          "additionalProperties": {
            "$ref": "Asset"
          }
        }
      }
    },
    "MetadataInfo": {
      "id": "MetadataInfo",
      "type": "object",
      "properties": {
        "updateTime": {
          "description": "Output only. Time at which this field was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "owner": {
          "description": "Output only. The owner of the metadata, if it's updated by the system.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "LinkInfo": {
      "id": "LinkInfo",
      "description": "Additional link information.",
      "type": "object",
      "properties": {
        "owner": {
          "description": "Output only. The owner of the link, if it's updated by the system.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "Owner": {
      "id": "Owner",
      "description": "The owner of the asset, set by the system.",
      "type": "object",
      "properties": {
        "ownerAsset": {
          "description": "The name of the owner asset.",
          "type": "string"
        },
        "linkId": {
          "description": "The link ID in the owner asset.",
          "type": "string"
        }
      }
    },
    "ListAssetsResponse": {
      "id": "ListAssetsResponse",
      "description": "Response message for AssetsService.ListAssets.",
      "type": "object",
      "properties": {
        "assets": {
          "description": "The list of assets.",
          "type": "array",
          "items": {
            "$ref": "Asset"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Catalog": {
      "id": "Catalog",
      "description": "A catalog specifies a search index for a collection of assets.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the catalog, in the following form: `projects\/{project}\/locations\/{location}\/catalogs\/{catalog}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time of the catalog.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time of the catalog.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "assetTypeConfigs": {
          "description": "A map between asset type name and its configuration within this catalog.",
          "type": "object",
          "additionalProperties": {
            "$ref": "AssetTypeConfig"
          }
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "facetConfigs": {
          "description": "A map between facet name and its configuration within this catalog.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FacetConfig"
          }
        }
      }
    },
    "AssetTypeConfig": {
      "id": "AssetTypeConfig",
      "description": "Catalog search item that includes the asset type and it's configuration.",
      "type": "object",
      "properties": {
        "assetType": {
          "description": "The asset type name that this catalog item configured. Format: projects\/{project}\/locations\/{location}\/assetTypes\/{assetType}",
          "type": "string"
        },
        "indexedFieldConfigs": {
          "description": "A map between user-defined key and IndexedFieldConfig, where the key is indexed with the value configured by IndexedFieldConfig and customers can use the key as search operator if the expression is nonempty. If the expression in CatalogIndexedFieldConfig is empty, the key must be \"\".",
          "type": "object",
          "additionalProperties": {
            "$ref": "CatalogIndexedFieldConfig"
          }
        },
        "state": {
          "description": "Output only. Current state of the asset type config.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Unknown state.",
            "Asset type config is being created.",
            "Asset type config is active.",
            "Asset type config is being deleted and will be automatically removed from catalog when the background deletion is done."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "ACTIVE",
            "DELETING"
          ]
        }
      }
    },
    "CatalogIndexedFieldConfig": {
      "id": "CatalogIndexedFieldConfig",
      "description": "CatalogIndexedFieldConfig configures the asset type's metadata fields that need to be included in catalog's search result.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "The expression that points to the indexed field in the asset. If it's empty, the default is metadata.key, and the key will not be used as search operator.",
          "type": "string"
        }
      }
    },
    "ListCatalogsResponse": {
      "id": "ListCatalogsResponse",
      "description": "Response message for CatalogsService.ListCatalogs.",
      "type": "object",
      "properties": {
        "catalogs": {
          "description": "The list of catalogs.",
          "type": "array",
          "items": {
            "$ref": "Catalog"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CatalogSearchRequest": {
      "id": "CatalogSearchRequest",
      "description": "Request message for CatalogsService.SearchCatalog.",
      "type": "object",
      "properties": {
        "pageSize": {
          "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "The next_page_token value returned from a previous Search request, if any.",
          "type": "string"
        },
        "type": {
          "description": "By default, search at segment level.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified type.",
            "Video-level search. That is, search over videos and video-level metadata.",
            "Segment-level search. That is, search over segments within videos and annotations."
          ],
          "enum": [
            "SEARCH_REQUEST_TYPE_UNSPECIFIED",
            "SEARCH_REQUEST_TYPE_ASSET",
            "SEARCH_REQUEST_TYPE_SEGMENT"
          ]
        },
        "query": {
          "description": "Search query.",
          "type": "string"
        }
      }
    },
    "CatalogSearchResponse": {
      "id": "CatalogSearchResponse",
      "description": "Response message for CatalogsService.SearchCatalog.",
      "type": "object",
      "properties": {
        "items": {
          "description": "Returned search results.",
          "type": "array",
          "items": {
            "$ref": "SearchResultItem"
          }
        },
        "nextPageToken": {
          "description": "The next-page continuation token.",
          "type": "string"
        }
      }
    },
    "ComplexType": {
      "id": "ComplexType",
      "description": "A complex type resource. A complex type describes the schema for asset metadata.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the complex type, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{type}`. Here {type} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fields": {
          "description": "Mapping of a field name to its type.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ComplexFieldType"
          }
        },
        "allowUndefinedFields": {
          "description": "Allow fields that aren't in complex type schema as defined in complex type fields.",
          "type": "boolean"
        }
      }
    },
    "ComplexFieldType": {
      "id": "ComplexFieldType",
      "type": "object",
      "properties": {
        "required": {
          "description": "If true, a value of this complex type must contain this field.",
          "type": "boolean"
        },
        "type": {
          "description": "Required. Type for this field. The type can be one of: - Primitive types (\"string\", \"number\", \"bool\") - Custom complex type. Format: \"p\/p\/l\/l\/complexTypes\/*\" - Collections of the above - list(), dict()",
          "type": "string"
        },
        "allowedValues": {
          "description": "If present, metadata values of ComplexFieldType must be within the constraints of allowedValues.",
          "$ref": "ComplexFieldAllowedValues"
        }
      }
    },
    "ComplexFieldAllowedValues": {
      "id": "ComplexFieldAllowedValues",
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      }
    },
    "ListComplexTypesResponse": {
      "id": "ListComplexTypesResponse",
      "description": "Response message for ComplexTypesService.ListComplexTypes.",
      "type": "object",
      "properties": {
        "complexTypes": {
          "description": "The list of complex types.",
          "type": "array",
          "items": {
            "$ref": "ComplexType"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Module": {
      "id": "Module",
      "description": "A module specifies the data types used in assets.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the module, in the following form: `projects\/{project}\/locations\/{location}\/module\/{module}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time of the module.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time of the module.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "schema": {
          "description": "The Open API schema that defines this module.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListModulesResponse": {
      "id": "ListModulesResponse",
      "description": "Response message for ModulesService.ListModules.",
      "type": "object",
      "properties": {
        "modules": {
          "description": "The list of modules.",
          "type": "array",
          "items": {
            "$ref": "Module"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Rule": {
      "id": "Rule",
      "description": "A rule resource is associated with an AssetType and manages the workflow pipelines of a collection of Assets under that AssetType. NEXT_ID: 10",
      "type": "object",
      "properties": {
        "transformation": {
          "description": "Configures the associated AssetType to invoke transformers.",
          "$ref": "TransformationConfig"
        },
        "notification": {
          "description": "Configures notifications for changes to resources nested under the parent AssetType (e.g., assets, actions, and annotations).",
          "$ref": "NotificationConfig"
        },
        "derivedAsset": {
          "description": "Configures the associated AssetType to manage the derived assets for its Assets.",
          "$ref": "DerivedAssetConfig"
        },
        "catalog": {
          "description": "Configures how to catalog assets.",
          "$ref": "CatalogConfig"
        },
        "name": {
          "description": "A user-specified resource name of the rule `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/rules\/{rule}`. Here {rule} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time of the rule.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The latest update time of the rule.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TransformationConfig": {
      "id": "TransformationConfig",
      "description": "A TransformationConfig configures the associated AssetType to invoke transformers on its Assets.",
      "type": "object",
      "properties": {
        "transformer": {
          "description": "Required. Reference to a transformer to execute, in the following form: `projects\/{project}\/locations\/{location}\/transformers\/{name}`.",
          "type": "string"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "outputs": {
          "description": "Required. Key-value pairs representing output parameters from the transformers. The key maps to the transformer output parameter name. The value will be the path to the metadata in the asset to which this output should be assigned.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NotificationConfig": {
      "id": "NotificationConfig",
      "description": "Configures what, when and where notifications should be sent.",
      "type": "object",
      "properties": {
        "criteria": {
          "description": "Required. Specifies what and when notifications should be sent.",
          "$ref": "NotificationCriteria"
        },
        "destination": {
          "description": "Required. Specifies where notifications should be sent to.",
          "$ref": "NotificationDestination"
        }
      }
    },
    "NotificationCriteria": {
      "id": "NotificationCriteria",
      "description": "Specifies when a notification should be sent.",
      "type": "object",
      "properties": {
        "annotationChange": {
          "description": "Specifies the annotations nested under the parent AssetType that should trigger notifications.",
          "$ref": "AnnotationChange"
        },
        "derivedAssetChange": {
          "description": "Specifies the transformer invocations triggered by the derived asset rule that should publish Pub\/Sub messages on event changes.",
          "$ref": "DerivedAssetChange"
        },
        "transformationChange": {
          "description": "Specifies the transformer invocations triggered by the transformation rule that should publish Pub\/Sub messages on event changes.",
          "$ref": "TransformationChange"
        },
        "assetChange": {
          "description": "Specifies the asset changes that should trigger notifications.",
          "$ref": "AssetChange"
        }
      }
    },
    "AnnotationChange": {
      "id": "AnnotationChange",
      "description": "Specifies the annotation changes that should trigger notifications.",
      "type": "object",
      "properties": {
        "annotationSetId": {
          "description": "Required. Notifies for changes to any annotation nested under the given annotationSet of the parent AssetType.",
          "type": "string"
        }
      }
    },
    "DerivedAssetChange": {
      "id": "DerivedAssetChange",
      "description": "Specifies the derived asset changes that should trigger notifications.",
      "type": "object",
      "properties": {
        "ruleId": {
          "description": "Required. Notifies for changes to any transformer invocations triggered by the derived asset rule.",
          "type": "string"
        }
      }
    },
    "TransformationChange": {
      "id": "TransformationChange",
      "description": "Specifies the transformation changes that should trigger notifications.",
      "type": "object",
      "properties": {
        "ruleId": {
          "description": "Required. Notifies for changes to any transformer invocations triggered by the transformation rule.",
          "type": "string"
        }
      }
    },
    "AssetChange": {
      "id": "AssetChange",
      "description": "Specifies the asset changes that should trigger notifications.",
      "type": "object",
      "properties": {
      }
    },
    "NotificationDestination": {
      "id": "NotificationDestination",
      "description": "Specifies the destination to send the notifications to.",
      "type": "object",
      "properties": {
        "pubsub": {
          "description": "Specifies the pub\/sub destination notifications should be sent to.",
          "$ref": "PubSubDestination"
        }
      }
    },
    "PubSubDestination": {
      "id": "PubSubDestination",
      "description": "Specifies the pub\/sub destination to send the notifications to.",
      "type": "object",
      "properties": {
        "topic": {
          "description": "Required. A Pub\/Sub topic to which messages are sent by GCMA. https:\/\/cloud.google.com\/pubsub\/docs\/overview",
          "type": "string"
        }
      }
    },
    "DerivedAssetConfig": {
      "id": "DerivedAssetConfig",
      "description": "A DerivedAssetConfig configures the associated AssetType to manage the derived assets for its Assets. The assets under the associated AssetType are owners of the derived assets. The derived assets are linked to the owners via the links in the owner assets.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Required. Key-value pairs for how to set the metadata in the derived assets. The key maps to the metadata in the derived assets. The value is interpreted as a literal or a path within the owner asset if it's prefixed by \"$asset.\", e.g. \"$asset.file.url\".",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "owningLink": {
          "description": "Required. The link in the owner asset.",
          "type": "string"
        }
      }
    },
    "CatalogConfig": {
      "id": "CatalogConfig",
      "description": "Configures the catalog of assets.",
      "type": "object",
      "properties": {
        "catalog": {
          "description": "Required. Reference to a catalog to populate with assets: `projects\/{project}\/locations\/{location}\/catalogs\/{name}`.",
          "type": "string"
        }
      }
    },
    "ListRulesResponse": {
      "id": "ListRulesResponse",
      "description": "Response message for RulesService.ListRules.",
      "type": "object",
      "properties": {
        "rules": {
          "description": "The rules from the specified assetType.",
          "type": "array",
          "items": {
            "$ref": "Rule"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "Transformer": {
      "id": "Transformer",
      "description": "A transformer resource. Transformers are functions that process a set of input parameters and generate outputs. They provide the mechanism to enrich asset information by processing asset contents.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The resource name of the transformer, in the following form: `projects\/{project}\/locations\/{location}\/transformer\/{transformer}`. Here {transformer} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The creation time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The last-modified time.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "The labels associated with this resource. Each label is a key-value pair.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "input": {
          "description": "Mapping of the input parameter name to its input definition. Will be replacing inputs in future.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Input"
          }
        },
        "output": {
          "description": "Mapping of the output parameter name to its output definition. Will be replacing outputs in future.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Output"
          }
        },
        "endpoint": {
          "description": "Required. URI endpoint that the Transformer is listening for its invocation through the documented Transformer protocol.",
          "type": "string"
        }
      }
    },
    "Input": {
      "id": "Input",
      "description": "Input describes an input of a transformer.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "required": {
          "description": "A required field is for inputs which must be specified in the TransformationConfig rule.",
          "type": "boolean"
        }
      }
    },
    "Output": {
      "id": "Output",
      "description": "Output describes an output of a transformer.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required. The type could be one of: - Primitive types (\"string\", \"number\", \"bool\") - Custom complex type. Format: \"p\/p\/l\/l\/complexTypes\/*\" - Collections of the above - list(), dict()",
          "type": "string"
        }
      }
    },
    "ListTransformersResponse": {
      "id": "ListTransformersResponse",
      "description": "Response message for TransformersService.ListTransformers.",
      "type": "object",
      "properties": {
        "transformers": {
          "description": "The list of transformers.",
          "type": "array",
          "items": {
            "$ref": "Transformer"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects\/example-project\/locations\/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com\/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "GoogleIamV1SetIamPolicyRequest": {
      "id": "GoogleIamV1SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "GoogleIamV1Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "GoogleIamV1Policy": {
      "id": "GoogleIamV1Policy",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles\/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles\/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles\/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles\/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/docs\/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1AuditConfig"
          }
        },
        "rules": {
          "description": "If more than one rule is specified, the rules are applied in the following manner: - All matching LOG rules are always applied. - If any DENY\/DENY_WITH_LOG rule matches, permission is denied. Logging will be applied if one or more matching rule requires logging. - Otherwise, if any ALLOW\/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be applied if one or more matching rule requires logging. - Otherwise, if no rule applies, permission is denied.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1Rule"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "GoogleIamV1Binding": {
      "id": "GoogleIamV1Binding",
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}\/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https:\/\/cloud.google.com\/kubernetes-engine\/docs\/how-to\/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace\/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "$ref": "Expr"
        },
        "bindingId": {
          "type": "string"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https:\/\/github.com\/google\/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      }
    },
    "GoogleIamV1AuditConfig": {
      "id": "GoogleIamV1AuditConfig",
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1AuditLogConfig"
          }
        }
      }
    },
    "GoogleIamV1AuditLogConfig": {
      "id": "GoogleIamV1AuditLogConfig",
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoreChildExemptions": {
          "type": "boolean"
        }
      }
    },
    "GoogleIamV1Rule": {
      "id": "GoogleIamV1Rule",
      "description": "A rule to be applied in a Policy.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Human-readable description of the rule.",
          "type": "string"
        },
        "permissions": {
          "description": "A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "description": "Required",
          "type": "string",
          "enumDescriptions": [
            "Default no action.",
            "Matching 'Entries' grant access.",
            "Matching 'Entries' grant access and the caller promises to log the request per the returned log_configs.",
            "Matching 'Entries' deny access.",
            "Matching 'Entries' deny access and the caller promises to log the request per the returned log_configs.",
            "Matching 'Entries' tell IAM.Check callers to generate logs."
          ],
          "enum": [
            "NO_ACTION",
            "ALLOW",
            "ALLOW_WITH_LOG",
            "DENY",
            "DENY_WITH_LOG",
            "LOG"
          ]
        },
        "in": {
          "description": "If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL\/AUTHORITY_SELECTOR is in at least one of these entries.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notIn": {
          "description": "If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL\/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go\/local-iam#features).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "description": "Additional restrictions that must be met. All conditions must pass for the rule to match.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1Condition"
          }
        },
        "logConfig": {
          "description": "The config returned to callers of CheckPolicy for any entries that match the LOG action.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1LogConfig"
          }
        }
      }
    },
    "GoogleIamV1Condition": {
      "id": "GoogleIamV1Condition",
      "description": "A condition to be met.",
      "type": "object",
      "properties": {
        "iam": {
          "description": "Trusted attributes supplied by the IAM system.",
          "type": "string",
          "enumDescriptions": [
            "Default non-attribute.",
            "Either principal or (if present) authority selector.",
            "The principal (even if an authority selector is present), which must only be used for attribution, not authorization.",
            "Any of the security realms in the IAMContext (go\/security-realms). When used with IN, the condition indicates \"any of the request's realms match one of the given values; with NOT_IN, \"none of the realms match any of the given values\". Note that a value can be: - 'self:campus' (i.e., clients that are in the same campus) - 'self:metro' (i.e., clients that are in the same metro) - 'self:cloud-region' (i.e., allow connections from clients that are in the same cloud region) - 'self:prod-region' (i.e., allow connections from clients that are in the same prod region) - 'guardians' (i.e., allow connections from its guardian realms. See go\/security-realms-glossary#guardian for more information.) - 'self' [DEPRECATED] (i.e., allow connections from clients that are in the same security realm, which is currently but not guaranteed to be campus-sized) - a realm (e.g., 'campus-abc') - a realm group (e.g., 'realms-for-borg-cell-xx', see: go\/realm-groups) A match is determined by a realm group membership check performed by a RealmAclRep object (go\/realm-acl-howto). It is not permitted to grant access based on the *absence* of a realm, so realm conditions can only be used in a \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN).",
            "An approver (distinct from the requester) that has authorized this request. When used with IN, the condition indicates that one of the approvers associated with the request matches the specified principal, or is a member of the specified group. Approvers can only grant additional access, and are thus only used in a strictly positive context (e.g. ALLOW\/IN or DENY\/NOT_IN).",
            "What types of justifications have been supplied with this request. String values should match enum names from security.credentials.JustificationType, e.g. \"MANUAL_STRING\". It is not permitted to grant access based on the *absence* of a justification, so justification conditions can only be used in a \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN). Multiple justifications, e.g., a Buganizer ID and a manually-entered reason, are normal and supported.",
            "What type of credentials have been supplied with this request. String values should match enum names from security_loas_l2.CredentialsType - currently, only CREDS_TYPE_EMERGENCY is supported. It is not permitted to grant access based on the *absence* of a credentials type, so the conditions can only be used in a \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN).",
            "EXPERIMENTAL -- DO NOT USE. The conditions can only be used in a \"positive\" context (e.g., ALLOW\/IN or DENY\/NOT_IN)."
          ],
          "enum": [
            "NO_ATTR",
            "AUTHORITY",
            "ATTRIBUTION",
            "SECURITY_REALM",
            "APPROVER",
            "JUSTIFICATION_TYPE",
            "CREDENTIALS_TYPE",
            "CREDS_ASSERTION"
          ]
        },
        "sys": {
          "description": "Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.",
          "type": "string",
          "enumDescriptions": [
            "Default non-attribute type",
            "Region of the resource",
            "Service name",
            "Resource name",
            "IP address of the caller"
          ],
          "enum": [
            "NO_ATTR",
            "REGION",
            "SERVICE",
            "NAME",
            "IP"
          ]
        },
        "svc": {
          "description": "Trusted attributes discharged by the service.",
          "type": "string"
        },
        "op": {
          "description": "An operator to apply the subject with.",
          "type": "string",
          "enumDescriptions": [
            "Default no-op.",
            "DEPRECATED. Use IN instead.",
            "DEPRECATED. Use NOT_IN instead.",
            "The condition is true if the subject (or any element of it if it is a set) matches any of the supplied values.",
            "The condition is true if the subject (or every element of it if it is a set) matches none of the supplied values.",
            "Subject is discharged"
          ],
          "enum": [
            "NO_OP",
            "EQUALS",
            "NOT_EQUALS",
            "IN",
            "NOT_IN",
            "DISCHARGED"
          ]
        },
        "values": {
          "description": "The objects of the condition.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleIamV1LogConfig": {
      "id": "GoogleIamV1LogConfig",
      "description": "Specifies what kind of log the caller must write",
      "type": "object",
      "properties": {
        "counter": {
          "description": "Counter options.",
          "$ref": "GoogleIamV1LogConfigCounterOptions"
        },
        "dataAccess": {
          "description": "Data access options.",
          "$ref": "GoogleIamV1LogConfigDataAccessOptions"
        },
        "cloudAudit": {
          "description": "Cloud audit options.",
          "$ref": "GoogleIamV1LogConfigCloudAuditOptions"
        }
      }
    },
    "GoogleIamV1LogConfigCounterOptions": {
      "id": "GoogleIamV1LogConfigCounterOptions",
      "description": "Increment a streamz counter with the specified metric and field names. Metric names should start with a '\/', generally be lowercase-only, and end in \"_count\". Field names should not contain an initial slash. The actual exported metric names will have \"\/iam\/policy\" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - \"authority\", which is \"[token]\" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - \"iam_principal\", a representation of IAMContext.principal even if a token or authority selector is present; or - \"\" (empty string), resulting in a counter with no fields. Examples: counter { metric: \"\/debug_access_count\" field: \"iam_principal\" } ==> increment counter \/iam\/policy\/debug_access_count {iam_principal=[value of IAMContext.principal]}",
      "type": "object",
      "properties": {
        "metric": {
          "description": "The metric to update.",
          "type": "string"
        },
        "field": {
          "description": "The field value to attribute.",
          "type": "string"
        },
        "customFields": {
          "description": "Custom fields.",
          "type": "array",
          "items": {
            "$ref": "GoogleIamV1LogConfigCounterOptionsCustomField"
          }
        }
      }
    },
    "GoogleIamV1LogConfigCounterOptionsCustomField": {
      "id": "GoogleIamV1LogConfigCounterOptionsCustomField",
      "description": "Custom fields. These can be used to create a counter with arbitrary field\/value pairs. See: go\/rpcsp-custom-fields.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the field name.",
          "type": "string"
        },
        "value": {
          "description": "Value is the field value. It is important that in contrast to the CounterOptions.field, the value here is a constant that is not derived from the IAMContext.",
          "type": "string"
        }
      }
    },
    "GoogleIamV1LogConfigDataAccessOptions": {
      "id": "GoogleIamV1LogConfigDataAccessOptions",
      "description": "Write a Data Access (Gin) log",
      "type": "object",
      "properties": {
        "logMode": {
          "type": "string",
          "enumDescriptions": [
            "Client is not required to write a partial Gin log immediately after the authorization check. If client chooses to write one and it fails, client may either fail open (allow the operation to continue) or fail closed (handle as a DENY outcome).",
            "The application's operation in the context of which this authorization check is being made may only be performed if it is successfully logged to Gin. For instance, the authorization library may satisfy this obligation by emitting a partial log entry at authorization check time and only returning ALLOW to the application if it succeeds. If a matching Rule has this directive, but the client has not indicated that it will honor such requirements, then the IAM check will result in authorization failure by setting CheckPolicyResponse.success=false."
          ],
          "enum": [
            "LOG_MODE_UNSPECIFIED",
            "LOG_FAIL_CLOSED"
          ]
        }
      }
    },
    "GoogleIamV1LogConfigCloudAuditOptions": {
      "id": "GoogleIamV1LogConfigCloudAuditOptions",
      "description": "Write a Cloud Audit log",
      "type": "object",
      "properties": {
        "logName": {
          "description": "The log_name to populate in the Cloud Audit Record.",
          "type": "string",
          "enumDescriptions": [
            "Default. Should not be used.",
            "Corresponds to \"cloudaudit.googleapis.com\/activity\"",
            "Corresponds to \"cloudaudit.googleapis.com\/data_access\""
          ],
          "enum": [
            "UNSPECIFIED_LOG_NAME",
            "ADMIN_ACTIVITY",
            "DATA_ACCESS"
          ]
        },
        "authorizationLoggingOptions": {
          "description": "Information used by the Cloud Audit Logging pipeline.",
          "$ref": "AuthorizationLoggingOptions"
        }
      }
    },
    "AuthorizationLoggingOptions": {
      "id": "AuthorizationLoggingOptions",
      "description": "Authorization-related information used by Cloud Audit Logging.",
      "type": "object",
      "properties": {
        "permissionType": {
          "description": "The type of the permission that was checked.",
          "type": "string",
          "enumDescriptions": [
            "Default. Should not be used.",
            "A read of admin (meta) data.",
            "A write of admin (meta) data.",
            "A read of standard data.",
            "A write of standard data."
          ],
          "enum": [
            "PERMISSION_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "ADMIN_WRITE",
            "DATA_READ",
            "DATA_WRITE"
          ]
        }
      }
    },
    "GoogleIamV1TestIamPermissionsRequest": {
      "id": "GoogleIamV1TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleIamV1TestIamPermissionsResponse": {
      "id": "GoogleIamV1TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "statusMessage": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "list": {
              "id": "mediaasset.projects.locations.list",
              "path": "v1alpha/{+name}/locations",
              "flatPath": "v1alpha/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "pattern": "^projects\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https:\/\/google.aip.dev\/160).",
                  "location": "query",
                  "type": "string"
                },
                "includeUnrevealedLocations": {
                  "description": "If true, the returned list will include locations which are not yet revealed.",
                  "location": "query",
                  "type": "boolean"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists information about the supported locations for this service."
            },
            "get": {
              "id": "mediaasset.projects.locations.get",
              "path": "v1alpha/{+name}",
              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets information about a location."
            }
          }
          ,
          "resources": {
            "operations": {
              "methods": {
                "list": {
                  "id": "mediaasset.projects.locations.operations.list",
                  "path": "v1alpha/{+name}/operations",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users\/*\/operations`. To override the binding, API services can add a binding such as `\"\/v1\/{name=users\/*}\/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."
                },
                "get": {
                  "id": "mediaasset.projects.locations.operations.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.operations.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."
                },
                "cancel": {
                  "id": "mediaasset.projects.locations.operations.cancel",
                  "path": "v1alpha/{+name}:cancel",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                }
              }
            },
            "assetTypes": {
              "methods": {
                "create": {
                  "id": "mediaasset.projects.locations.assetTypes.create",
                  "path": "v1alpha/{+parent}/assetTypes",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "assetTypeId": {
                      "description": "Required. The ID of the asset type resource to be created.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "AssetType"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new AssetType in a given project and location."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.assetTypes.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the asset type to delete, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single AssetType."
                },
                "get": {
                  "id": "mediaasset.projects.locations.assetTypes.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the asset type to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "AssetType"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single AssetType."
                },
                "list": {
                  "id": "mediaasset.projects.locations.assetTypes.list",
                  "path": "v1alpha/{+parent}/assetTypes",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter to apply to list results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListAssetTypesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists AssetTypes in a given project and location."
                },
                "patch": {
                  "id": "mediaasset.projects.locations.assetTypes.patch",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the asset type, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`. Here {type} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Comma-separated list of fields is used to specify the fields to be overwritten in the AssetType resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "AssetType"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single AssetType."
                },
                "search": {
                  "id": "mediaasset.projects.locations.assetTypes.search",
                  "path": "v1alpha/{+name}:search",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}:search",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. The asset type resource name, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "SearchAssetTypeRequest"
                  },
                  "response": {
                    "$ref": "SearchAssetTypeResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Search returns the resources (e.g., assets and annotations) under a Video Asset Type that match the given query. Search covers both media content and metadata."
                },
                "setIamPolicy": {
                  "id": "mediaasset.projects.locations.assetTypes.setIamPolicy",
                  "path": "v1alpha/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "getIamPolicy": {
                  "id": "mediaasset.projects.locations.assetTypes.getIamPolicy",
                  "path": "v1alpha/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                },
                "testIamPermissions": {
                  "id": "mediaasset.projects.locations.assetTypes.testIamPermissions",
                  "path": "v1alpha/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                }
              }
              ,
              "resources": {
                "assets": {
                  "methods": {
                    "create": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.create",
                      "path": "v1alpha/{+parent}/assets",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "assetId": {
                          "description": "Required. The ID of the asset resource to be created.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "Asset"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new asset in a given project and location."
                    },
                    "get": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.get",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the asset to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "readMask": {
                          "description": "Extra fields to be poplulated as part of the asset resource in the response. Currently, this only supports populating asset metadata (no wildcards and no contents of the entire asset).",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Asset"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets details of a single asset."
                    },
                    "delete": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.delete",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the asset to delete, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "requestId": {
                          "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                          "location": "query",
                          "type": "string"
                        },
                        "etag": {
                          "description": "The current etag of the asset. If an etag is provided and does not match the current etag of the asset, deletion will be blocked and a FAILED_PRECONDITION error will be returned.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single asset."
                    },
                    "list": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.list",
                      "path": "v1alpha/{+parent}/assets",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from a previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "The filter to apply to list results. Valid field expressions are defined in assetType.indexedFieldConfig. Format: https:\/\/cloud.google.com\/logging\/docs\/view\/advanced-queries",
                          "location": "query",
                          "type": "string"
                        },
                        "readMask": {
                          "description": "Extra fields to be poplulated as part of the asset resource in the response. Currently, this only supports populating asset metadata (no wildcards and no contents of the entire asset).",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListAssetsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists assets in a given project and location."
                    },
                    "patch": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.patch",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the asset, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}`. Here {asset} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "Required. Comma-separated list of fields is used to specify the fields to be overwritten in the Asset resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                          "location": "query",
                          "type": "string"
                        },
                        "requestId": {
                          "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "Asset"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the parameters of a single asset."
                    },
                    "setIamPolicy": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.setIamPolicy",
                      "path": "v1alpha/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "GoogleIamV1SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "GoogleIamV1Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.getIamPolicy",
                      "path": "v1alpha/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "GoogleIamV1Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "mediaasset.projects.locations.assetTypes.assets.testIamPermissions",
                      "path": "v1alpha/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "GoogleIamV1TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "GoogleIamV1TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    }
                  }
                  ,
                  "resources": {
                    "actions": {
                      "methods": {
                        "get": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.actions.get",
                          "path": "v1alpha/{+name}",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/actions/{actionsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The name of the action to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}\/actions\/{action}`.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/actions\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Action"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets details of a single action."
                        },
                        "list": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.actions.list",
                          "path": "v1alpha/{+parent}/actions",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/actions",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}`.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "The next_page_token value returned from a previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "The filter to apply to list results.",
                              "location": "query",
                              "type": "string"
                            },
                            "orderBy": {
                              "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListActionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists actions in a given project and location."
                        },
                        "cancel": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.actions.cancel",
                          "path": "v1alpha/{+name}:cancel",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/actions/{actionsId}:cancel",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "Required. The name of the action to cancel. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}\/actions\/{action}`",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/actions\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "CancelActionRequest"
                          },
                          "response": {
                            "$ref": "CancelActionResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Cancel any pending invocations under this action."
                        },
                        "trigger": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.actions.trigger",
                          "path": "v1alpha/{+name}:trigger",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/actions/{actionsId}:trigger",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "Required. The name of the action to Trigger. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/assets\/{asset}\/actions\/{action}`",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/actions\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "TriggerActionRequest"
                          },
                          "response": {
                            "$ref": "TriggerActionResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Trigger an invocation with the latest input state."
                        }
                      }
                    },
                    "annotationSets": {
                      "methods": {
                        "get": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.get",
                          "path": "v1alpha/{+name}",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The name of the AnnotationSet to retrieve. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}`",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "AnnotationSet"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets details of a single annotationSet."
                        },
                        "list": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.list",
                          "path": "v1alpha/{+parent}/annotationSets",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. The name of the asset that owns this collection of annotationSets. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}`",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "The maximum number of annotationSets to return. The service may return fewer than this value. If unspecified, at most 50 annotationSets will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "A page token, received from a previous `ListAnnotationSets` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAnnotationSets` must match the call that provided the page token.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "The filter to apply to list results.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListAnnotationSetsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists annotationSets in a given project and location."
                        },
                        "setIamPolicy": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.setIamPolicy",
                          "path": "v1alpha/{+resource}:setIamPolicy",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}:setIamPolicy",
                          "httpMethod": "POST",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "request": {
                            "$ref": "GoogleIamV1SetIamPolicyRequest"
                          },
                          "response": {
                            "$ref": "GoogleIamV1Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                        },
                        "getIamPolicy": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.getIamPolicy",
                          "path": "v1alpha/{+resource}:getIamPolicy",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}:getIamPolicy",
                          "httpMethod": "GET",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "options.requestedPolicyVersion": {
                              "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "response": {
                            "$ref": "GoogleIamV1Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                        },
                        "testIamPermissions": {
                          "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.testIamPermissions",
                          "path": "v1alpha/{+resource}:testIamPermissions",
                          "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}:testIamPermissions",
                          "httpMethod": "POST",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "request": {
                            "$ref": "GoogleIamV1TestIamPermissionsRequest"
                          },
                          "response": {
                            "$ref": "GoogleIamV1TestIamPermissionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                        }
                      }
                      ,
                      "resources": {
                        "annotations": {
                          "methods": {
                            "create": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.create",
                              "path": "v1alpha/{+parent}/annotations",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations",
                              "httpMethod": "POST",
                              "parameters": {
                                "parent": {
                                  "description": "Required. The parent resource where this Annotation will be created. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}`",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                },
                                "annotationId": {
                                  "description": "Required. The ID of the annotation resource to be created.",
                                  "location": "query",
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "parent"
                              ],
                              "request": {
                                "$ref": "Annotation"
                              },
                              "response": {
                                "$ref": "Annotation"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Creates a new annotation in a given project and location."
                            },
                            "get": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.get",
                              "path": "v1alpha/{+name}",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}",
                              "httpMethod": "GET",
                              "parameters": {
                                "name": {
                                  "description": "Required. The name of the Annotation to retrieve. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}\/annotations\/{annotation}`",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "name"
                              ],
                              "response": {
                                "$ref": "Annotation"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Gets details of a single annotation."
                            },
                            "list": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.list",
                              "path": "v1alpha/{+parent}/annotations",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations",
                              "httpMethod": "GET",
                              "parameters": {
                                "parent": {
                                  "description": "Required. The parent, which owns this collection of annotations. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}`",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                },
                                "pageSize": {
                                  "description": "The maximum number of annotations to return. The service may return fewer than this value. If unspecified, at most 50 annotations will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
                                  "location": "query",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "pageToken": {
                                  "description": "A page token, received from a previous `ListAnnotations` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAnnotations` must match the call that provided the page token.",
                                  "location": "query",
                                  "type": "string"
                                },
                                "filter": {
                                  "description": "The filter to apply to list results. Valid field expressions are defined in assetType.annotationSetConfig.indexedFieldConfig. Format: https:\/\/cloud.google.com\/logging\/docs\/view\/advanced-queries",
                                  "location": "query",
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "parent"
                              ],
                              "response": {
                                "$ref": "ListAnnotationsResponse"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Lists annotations in a given project and location."
                            },
                            "delete": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.delete",
                              "path": "v1alpha/{+name}",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}",
                              "httpMethod": "DELETE",
                              "parameters": {
                                "name": {
                                  "description": "Required. The name of the annotation to delete. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}\/annotations\/{annotation}`",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                },
                                "etag": {
                                  "description": "The current etag of the annotation. If an etag is provided and does not match the current etag of the annotation, deletion will be blocked and a FAILED_PRECONDITION error will be returned.",
                                  "location": "query",
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "name"
                              ],
                              "response": {
                                "$ref": "Empty"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Deletes a single annotation."
                            },
                            "patch": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.patch",
                              "path": "v1alpha/{+name}",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}",
                              "httpMethod": "PATCH",
                              "parameters": {
                                "name": {
                                  "description": "Output only. An automatically-generated resource name of the annotation `projects\/{project}\/locations\/{location}\/assetTypes\/{asset_type}\/assets\/{asset}\/annotationSets\/{annotation_set}\/annotations\/{annotation}`.",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                },
                                "updateMask": {
                                  "description": "Required. Comma-separated list of fields to be updated.",
                                  "location": "query",
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "name"
                              ],
                              "request": {
                                "$ref": "Annotation"
                              },
                              "response": {
                                "$ref": "Annotation"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Updates the parameters of a single annotation."
                            },
                            "setIamPolicy": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.setIamPolicy",
                              "path": "v1alpha/{+resource}:setIamPolicy",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}:setIamPolicy",
                              "httpMethod": "POST",
                              "parameters": {
                                "resource": {
                                  "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "resource"
                              ],
                              "request": {
                                "$ref": "GoogleIamV1SetIamPolicyRequest"
                              },
                              "response": {
                                "$ref": "GoogleIamV1Policy"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                            },
                            "getIamPolicy": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.getIamPolicy",
                              "path": "v1alpha/{+resource}:getIamPolicy",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}:getIamPolicy",
                              "httpMethod": "GET",
                              "parameters": {
                                "resource": {
                                  "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                },
                                "options.requestedPolicyVersion": {
                                  "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                                  "location": "query",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              },
                              "parameterOrder": [
                                "resource"
                              ],
                              "response": {
                                "$ref": "GoogleIamV1Policy"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                            },
                            "testIamPermissions": {
                              "id": "mediaasset.projects.locations.assetTypes.assets.annotationSets.annotations.testIamPermissions",
                              "path": "v1alpha/{+resource}:testIamPermissions",
                              "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/assets/{assetsId}/annotationSets/{annotationSetsId}/annotations/{annotationsId}:testIamPermissions",
                              "httpMethod": "POST",
                              "parameters": {
                                "resource": {
                                  "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/assets\/[^\/]+\/annotationSets\/[^\/]+\/annotations\/[^\/]+$",
                                  "location": "path",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "parameterOrder": [
                                "resource"
                              ],
                              "request": {
                                "$ref": "GoogleIamV1TestIamPermissionsRequest"
                              },
                              "response": {
                                "$ref": "GoogleIamV1TestIamPermissionsResponse"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "rules": {
                  "methods": {
                    "create": {
                      "id": "mediaasset.projects.locations.assetTypes.rules.create",
                      "path": "v1alpha/{+parent}/rules",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/rules",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent resource where this Rule will be created. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "ruleId": {
                          "description": "Required. The ID to use for the Rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are \/a-z-\/.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "Rule"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new rule in a given project and location."
                    },
                    "get": {
                      "id": "mediaasset.projects.locations.assetTypes.rules.get",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/rules/{rulesId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the Rule to retrieve. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/rules\/{rule}`",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/rules\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Rule"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets details of a single rule."
                    },
                    "list": {
                      "id": "mediaasset.projects.locations.assetTypes.rules.list",
                      "path": "v1alpha/{+parent}/rules",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/rules",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent, which owns this collection of rules. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}`",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The maximum number of rules to return. The service may return fewer than this value. If unspecified, at most 50 books will be returned. The maximum value is 100; values above 100 will be coerced to 100.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "A page token, received from a previous `ListRules` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRules` must match the call that provided the page token.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListRulesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists rules in a given project and location."
                    },
                    "patch": {
                      "id": "mediaasset.projects.locations.assetTypes.rules.patch",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/rules/{rulesId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "A user-specified resource name of the rule `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/rules\/{rule}`. Here {rule} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/rules\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "Required. Comma-separated list of fields to be updated.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "Rule"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the parameters of a single rule."
                    },
                    "delete": {
                      "id": "mediaasset.projects.locations.assetTypes.rules.delete",
                      "path": "v1alpha/{+name}",
                      "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/assetTypes/{assetTypesId}/rules/{rulesId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the rule to delete. Format: `projects\/{project}\/locations\/{location}\/assetTypes\/{type}\/rules\/{rule}`",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/assetTypes\/[^\/]+\/rules\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "etag": {
                          "description": "The current etag of the rule. If an etag is provided and does not match the current etag of the rule, deletion will be blocked and a FAILED_PRECONDITION error will be returned.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single rule."
                    }
                  }
                }
              }
            },
            "catalogs": {
              "methods": {
                "create": {
                  "id": "mediaasset.projects.locations.catalogs.create",
                  "path": "v1alpha/{+parent}/catalogs",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "catalogId": {
                      "description": "The ID of the catalog resource to be created.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Catalog"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new catalog in a given project and location."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.catalogs.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the catalog to delete, in the following form: `projects\/{project}\/locations\/{location}\/catalogs\/{catalog}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/catalogs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single catalog."
                },
                "get": {
                  "id": "mediaasset.projects.locations.catalogs.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the catalog to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/catalogs\/{catalog}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/catalogs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Catalog"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single catalog."
                },
                "list": {
                  "id": "mediaasset.projects.locations.catalogs.list",
                  "path": "v1alpha/{+parent}/catalogs",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter to apply to list results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListCatalogsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists catalogs in a given project and location."
                },
                "patch": {
                  "id": "mediaasset.projects.locations.catalogs.patch",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the catalog, in the following form: `projects\/{project}\/locations\/{location}\/catalogs\/{catalog}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/catalogs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "update_mask is a comma separated fields used to specify changes in catalog. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Catalog"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single catalog."
                },
                "search": {
                  "id": "mediaasset.projects.locations.catalogs.search",
                  "path": "v1alpha/{+name}:search",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}:search",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. The catalog resource name, in the following form: `projects\/{project}\/locations\/{location}\/catalogs\/{catalog}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/catalogs\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CatalogSearchRequest"
                  },
                  "response": {
                    "$ref": "CatalogSearchResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Search returns the resources (e.g., assets and annotations) under a Catalog that match the given query. Search covers both media content and metadata."
                }
              }
            },
            "complexTypes": {
              "methods": {
                "create": {
                  "id": "mediaasset.projects.locations.complexTypes.create",
                  "path": "v1alpha/{+parent}/complexTypes",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "complexTypeId": {
                      "description": "Required. The ID of the complex type resource to be created.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "ComplexType"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new complex type in a given project and location."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.complexTypes.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the complex type to delete, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single complex type."
                },
                "get": {
                  "id": "mediaasset.projects.locations.complexTypes.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the complex type to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ComplexType"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single complex type."
                },
                "list": {
                  "id": "mediaasset.projects.locations.complexTypes.list",
                  "path": "v1alpha/{+parent}/complexTypes",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter to apply to list results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListComplexTypesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists complex types in a given project and location."
                },
                "patch": {
                  "id": "mediaasset.projects.locations.complexTypes.patch",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the complex type, in the following form: `projects\/{project}\/locations\/{location}\/complexTypes\/{type}`. Here {type} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Comma-separated list of fields is used to specify the fields to be overwritten in the ComplexType resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ComplexType"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single complex type."
                },
                "setIamPolicy": {
                  "id": "mediaasset.projects.locations.complexTypes.setIamPolicy",
                  "path": "v1alpha/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "getIamPolicy": {
                  "id": "mediaasset.projects.locations.complexTypes.getIamPolicy",
                  "path": "v1alpha/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                },
                "testIamPermissions": {
                  "id": "mediaasset.projects.locations.complexTypes.testIamPermissions",
                  "path": "v1alpha/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/complexTypes/{complexTypesId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/complexTypes\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                }
              }
            },
            "modules": {
              "methods": {
                "create": {
                  "id": "mediaasset.projects.locations.modules.create",
                  "path": "v1alpha/{+parent}/modules",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/modules",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "moduleId": {
                      "description": "The ID of the module resource to be created.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Module"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new module in a given project and location."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.modules.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/modules/{modulesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the module to delete, in the following form: `projects\/{project}\/locations\/{location}\/modules\/{module}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/modules\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single module."
                },
                "get": {
                  "id": "mediaasset.projects.locations.modules.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/modules/{modulesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the module to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/modules\/{module}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/modules\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Module"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single module."
                },
                "list": {
                  "id": "mediaasset.projects.locations.modules.list",
                  "path": "v1alpha/{+parent}/modules",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/modules",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter to apply to list results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListModulesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists modules in a given project and location."
                },
                "patch": {
                  "id": "mediaasset.projects.locations.modules.patch",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/modules/{modulesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the module, in the following form: `projects\/{project}\/locations\/{location}\/module\/{module}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/modules\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Field mask is used to specify the fields to be overwritten in the Module resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Module"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single module."
                }
              }
            },
            "transformers": {
              "methods": {
                "create": {
                  "id": "mediaasset.projects.locations.transformers.create",
                  "path": "v1alpha/{+parent}/transformers",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "transformerId": {
                      "description": "Required. The ID of the transformer resource to be created.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Transformer"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new transformer in a given project and location."
                },
                "delete": {
                  "id": "mediaasset.projects.locations.transformers.delete",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the transformer to delete, in the following form: `projects\/{project}\/locations\/{location}\/transformer\/{type}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single transformer."
                },
                "get": {
                  "id": "mediaasset.projects.locations.transformers.get",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the transformer to retrieve, in the following form: `projects\/{project}\/locations\/{location}\/transformers\/{transformer}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Transformer"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single transformer."
                },
                "list": {
                  "id": "mediaasset.projects.locations.transformers.list",
                  "path": "v1alpha/{+parent}/transformers",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent resource name, in the following form: `projects\/{project}\/locations\/{location}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If unspecified, server will pick an appropriate default. Server may return fewer items than requested. A caller should only rely on response's next_page_token to determine if there are more realms left to be queried",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter to apply to list results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "Specifies the ordering of results following syntax at https:\/\/cloud.google.com\/apis\/design\/design_patterns#sorting_order.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListTransformersResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists transformers in a given project and location."
                },
                "patch": {
                  "id": "mediaasset.projects.locations.transformers.patch",
                  "path": "v1alpha/{+name}",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "The resource name of the transformer, in the following form: `projects\/{project}\/locations\/{location}\/transformer\/{transformer}`. Here {transformer} is a resource id. Detailed rules for a resource id are: 1. 1 character minimum, 63 characters maximum 2. only contains letters, digits, underscore and hyphen 3. starts with a letter if length == 1, starts with a letter or underscore if length > 1",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Comma-separated list of fields is used to specify the fields to be overwritten in the Transformer resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.",
                      "location": "query",
                      "type": "string"
                    },
                    "requestId": {
                      "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Transformer"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single transformer."
                },
                "setIamPolicy": {
                  "id": "mediaasset.projects.locations.transformers.setIamPolicy",
                  "path": "v1alpha/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "getIamPolicy": {
                  "id": "mediaasset.projects.locations.transformers.getIamPolicy",
                  "path": "v1alpha/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "GoogleIamV1Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                },
                "testIamPermissions": {
                  "id": "mediaasset.projects.locations.transformers.testIamPermissions",
                  "path": "v1alpha/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/transformers/{transformersId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/transformers\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GoogleIamV1TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "GoogleIamV1TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}