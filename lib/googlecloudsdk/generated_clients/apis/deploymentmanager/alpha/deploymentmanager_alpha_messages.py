"""Generated message classes for deploymentmanager version alpha.

The Deployment Manager API allows users to declaratively configure, deploy and
run complex solutions on the Google Cloud Platform.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from __future__ import absolute_import

from apitools.base.protorpclite import messages as _messages


package = 'deploymentmanager'


class Any(_messages.Message):
  r"""`Any` contains an arbitrary serialized protocol buffer message along
  with a URL that describes the type of the serialized message.  Protobuf
  library provides support to pack/unpack Any values in the form of utility
  functions or additional generated methods of the Any type.  Example 1: Pack
  and unpack a message in C++.  Foo foo = ...; Any any; any.PackFrom(foo); ...
  if (any.UnpackTo(&foo)) { ... }  Example 2: Pack and unpack a message in
  Java.  Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) {
  foo = any.unpack(Foo.class); }  Example 3: Pack and unpack a message in
  Python.  foo = Foo(...) any = Any() any.Pack(foo) ... if
  any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ...  Example 4: Pack and unpack a
  message in Go  foo := &pb.Foo{...} any, err := anypb.New(foo) if err != nil
  { ... } ... foo := &pb.Foo{} if err := any.UnmarshalTo(foo); err != nil {
  ... }  The pack methods provided by protobuf library will by default use
  'type.googleapis.com/full.type.name' as the type URL and the unpack methods
  only use the fully qualified type name after the last '/' in the type URL,
  for example "foo.bar.com/x/y.z" will yield type name "y.z".    JSON  The
  JSON representation of an `Any` value uses the regular representation of the
  deserialized, embedded message, with an additional field `@type` which
  contains the type URL. Example:  package google.profile; message Person {
  string first_name = 1; string last_name = 2; }  { "@type":
  "type.googleapis.com/google.profile.Person", "firstName": , "lastName":  }
  If the embedded message type is well-known and has a custom JSON
  representation, that representation will be embedded adding a field `value`
  which holds the custom JSON in addition to the `@type` field. Example (for
  message [google.protobuf.Duration][]):  { "@type":
  "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }

  Fields:
    typeUrl: A URL/resource name that uniquely identifies the type of the
      serialized protocol buffer message. This string must contain at least
      one "/" character. The last segment of the URL's path must represent the
      fully qualified name of the type (as in
      `path/google.protobuf.Duration`). The name should be in a canonical form
      (e.g., leading "." is not accepted).  In practice, teams usually
      precompile into the binary all types that they expect it to use in the
      context of Any. However, for URLs which use the scheme `http`, `https`,
      or no scheme, one can optionally set up a type server that maps type
      URLs to message definitions as follows:  * If no scheme is provided,
      `https` is assumed. * An HTTP GET on the URL must yield a
      [google.protobuf.Type][] value in binary format, or produce an error. *
      Applications are allowed to cache lookup results based on the URL, or
      have them precompiled into a binary to avoid any lookup. Therefore,
      binary compatibility needs to be preserved on changes to types. (Use
      versioned type names to manage breaking changes.)  Note: this
      functionality is not currently available in the official protobuf
      release, and it is not used for type URLs beginning with
      type.googleapis.com.  Schemes other than `http`, `https` (or the empty
      scheme) might be used with implementation specific semantics.
    value: Must be a valid serialized protocol buffer of the above specified
      type.
  """

  typeUrl = _messages.StringField(1)
  value = _messages.BytesField(2)


class AsyncOptions(_messages.Message):
  r"""Async options that determine when a resource should finish.

  Fields:
    methodMatch: Method regex where this policy will apply.
    pollingOptions: Deployment manager will poll instances for this API
      resource setting a RUNNING state, and blocking until polling conditions
      tell whether the resource is completed or failed.
  """

  methodMatch = _messages.StringField(1)
  pollingOptions = _messages.MessageField('PollingOptions', 2)


class AuditConfig(_messages.Message):
  r"""Specifies the audit configuration for a service. The configuration
  determines which permission types are logged, and what identities, if any,
  are exempted from logging. An AuditConfig must have one or more
  AuditLogConfigs.  If there are AuditConfigs for both `allServices` and a
  specific service, the union of the two AuditConfigs is used for that
  service: the log_types specified in each AuditConfig are enabled, and the
  exempted_members in each AuditLogConfig are exempted.  Example Policy with
  multiple AuditConfigs:  { "audit_configs": [ { "service": "allServices",
  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
  "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
  "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] }
  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
  logging. It also exempts `jose@example.com` from DATA_READ logging, and
  `aliya@example.com` from DATA_WRITE logging.

  Fields:
    auditLogConfigs: The configuration for logging of each type of permission.
    service: Specifies a service that will be enabled for audit logging. For
      example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
      `allServices` is a special value that covers all services.
  """

  auditLogConfigs = _messages.MessageField('AuditLogConfig', 1, repeated=True)
  service = _messages.StringField(2)


class AuditLogConfig(_messages.Message):
  r"""Provides the configuration for logging a type of permissions. Example:
  { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
  "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] }  This enables
  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from
  DATA_READ logging.

  Fields:
    exemptedMembers: Specifies the identities that do not cause logging for
      this type of permission. Follows the same format of [Binding.members][].
    ignoreChildExemptions:
    logType: The log type that this config enables.
  """

  exemptedMembers = _messages.StringField(1, repeated=True)
  ignoreChildExemptions = _messages.BooleanField(2)
  logType = _messages.StringField(3)


class AuthorizationLoggingOptions(_messages.Message):
  r"""Authorization-related information used by Cloud Audit Logging.

  Fields:
    permissionType: The type of the permission that was checked.
  """

  permissionType = _messages.StringField(1)


class BasicAuth(_messages.Message):
  r"""Basic Auth used as a credential.

  Fields:
    password: A string attribute.
    user: A string attribute.
  """

  password = _messages.StringField(1)
  user = _messages.StringField(2)


class Binding(_messages.Message):
  r"""Associates `members`, or principals, with a `role`.

  Fields:
    bindingId:
    condition: The condition that is associated with this binding.  If the
      condition evaluates to `true`, then this binding applies to the current
      request.  If the condition evaluates to `false`, then this binding does
      not apply to the current request. However, a different role binding
      might grant the same role to one or more of the principals in this
      binding.  To learn which resources support conditions in their IAM
      policies, see the [IAM
      documentation](https://cloud.google.com/iam/help/conditions/resource-
      policies).
    members: Specifies the principals requesting access for a Google Cloud
      resource. `members` can have the following values:  * `allUsers`: A
      special identifier that represents anyone who is on the internet; with
      or without a Google account.  * `allAuthenticatedUsers`: A special
      identifier that represents anyone who is authenticated with a Google
      account or a service account. Does not include identities that come from
      external identity providers (IdPs) through identity federation.  *
      `user:{emailid}`: An email address that represents a specific Google
      account. For example, `alice@example.com` .    *
      `serviceAccount:{emailid}`: An email address that represents a Google
      service account. For example, `my-other-
      app@appspot.gserviceaccount.com`.  *
      `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
      An identifier for a [Kubernetes service
      account](https://cloud.google.com/kubernetes-engine/docs/how-
      to/kubernetes-service-accounts). For example, `my-
      project.svc.id.goog[my-namespace/my-kubernetes-sa]`.  *
      `group:{emailid}`: An email address that represents a Google group. For
      example, `admins@example.com`.  *
      `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
      identifier) representing a user that has been recently deleted. For
      example, `alice@example.com?uid=123456789012345678901`. If the user is
      recovered, this value reverts to `user:{emailid}` and the recovered user
      retains the role in the binding.  *
      `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
      (plus unique identifier) representing a service account that has been
      recently deleted. For example, `my-other-
      app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the
      service account is undeleted, this value reverts to
      `serviceAccount:{emailid}` and the undeleted service account retains the
      role in the binding.  * `deleted:group:{emailid}?uid={uniqueid}`: An
      email address (plus unique identifier) representing a Google group that
      has been recently deleted. For example,
      `admins@example.com?uid=123456789012345678901`. If the group is
      recovered, this value reverts to `group:{emailid}` and the recovered
      group retains the role in the binding.    * `domain:{domain}`: The G
      Suite domain (primary) that represents all the users of that domain. For
      example, `google.com` or `example.com`.
    role: Role that is assigned to the list of `members`, or principals. For
      example, `roles/viewer`, `roles/editor`, or `roles/owner`.
  """

  bindingId = _messages.StringField(1)
  condition = _messages.MessageField('Expr', 2)
  members = _messages.StringField(3, repeated=True)
  role = _messages.StringField(4)


class CollectionOverride(_messages.Message):
  r"""CollectionOverride allows resource handling overrides for specific
  resources within a BaseType

  Fields:
    collection: The collection that identifies this resource within its
      service.
    methodMap: Custom verb method mappings to support unordered list API
      mappings.
    options: The options to apply to this resource-level override
  """

  collection = _messages.StringField(1)
  methodMap = _messages.MessageField('MethodMap', 2)
  options = _messages.MessageField('Options', 3)


class CompositeType(_messages.Message):
  r"""Holds the composite type.

  Fields:
    description: An optional textual description of the resource; provided by
      the client when the resource is created.
    id: A string attribute.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    labels: Map of labels; provided by the client when the resource is created
      or updated. Specifically: Label keys must be between 1 and 63 characters
      long and must conform to the following regular expression:
      `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63
      characters long and must conform to the regular expression
      `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
    name: Name of the composite type, must follow the expression:
      `[a-z]([-a-z0-9_.]{0,61}[a-z0-9])?`.
    operation: Output only. The Operation that most recently ran, or is
      currently running, on this composite type.
    selfLink: Output only. Server defined URL for the resource.
    status: A string attribute.
    templateContents: Files for the template type.
  """

  description = _messages.StringField(1)
  id = _messages.IntegerField(2, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(3)
  labels = _messages.MessageField('CompositeTypeLabelEntry', 4, repeated=True)
  name = _messages.StringField(5)
  operation = _messages.MessageField('Operation', 6)
  selfLink = _messages.StringField(7)
  status = _messages.StringField(8)
  templateContents = _messages.MessageField('TemplateContents', 9)


class CompositeTypeLabelEntry(_messages.Message):
  r"""A CompositeTypeLabelEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class CompositeTypesListResponse(_messages.Message):
  r"""A response that returns all Composite Types supported by Deployment
  Manager

  Fields:
    compositeTypes: Output only. A list of resource composite types supported
      by Deployment Manager.
    nextPageToken: A token used to continue a truncated list request.
  """

  compositeTypes = _messages.MessageField('CompositeType', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class Condition(_messages.Message):
  r"""A condition to be met.

  Fields:
    iam: Trusted attributes supplied by the IAM system.
    op: An operator to apply the subject with.
    svc: Trusted attributes discharged by the service.
    sys: Trusted attributes supplied by any service that owns resources and
      uses the IAM system for access control.
    values: The objects of the condition.
  """

  iam = _messages.StringField(1)
  op = _messages.StringField(2)
  svc = _messages.StringField(3)
  sys = _messages.StringField(4)
  values = _messages.StringField(5, repeated=True)


class ConfigFile(_messages.Message):
  r"""ConfigFile message type.

  Fields:
    content: The contents of the file.
  """

  content = _messages.StringField(1)


class ConfigurableService(_messages.Message):
  r"""BaseType that describes a service-backed Type.

  Fields:
    collectionOverrides: Allows resource handling overrides for specific
      collections
    credential: Credential used when interacting with this type.
    descriptorUrl: Descriptor Url for the this type.
    options: Options to apply when handling any resources in this service.
  """

  collectionOverrides = _messages.MessageField('CollectionOverride', 1, repeated=True)
  credential = _messages.MessageField('Credential', 2)
  descriptorUrl = _messages.StringField(3)
  options = _messages.MessageField('Options', 4)


class Credential(_messages.Message):
  r"""The credential used by Deployment Manager and TypeProvider. Only one of
  the options is permitted.

  Fields:
    basicAuth: Basic Auth Credential, only used by TypeProvider.
    serviceAccount: Service Account Credential, only used by Deployment.
    useProjectDefault: Specify to use the project default credential, only
      supported by Deployment.
  """

  basicAuth = _messages.MessageField('BasicAuth', 1)
  serviceAccount = _messages.MessageField('ServiceAccount', 2)
  useProjectDefault = _messages.BooleanField(3)


class Deployment(_messages.Message):
  r"""Deployment message type.

  Fields:
    credential: User provided default credential for the deployment.
    description: An optional user-provided description of the deployment.
    fingerprint: Provides a fingerprint to use in requests to modify a
      deployment, such as `update()`, `stop()`, and `cancelPreview()`
      requests. A fingerprint is a randomly generated value that must be
      provided with `update()`, `stop()`, and `cancelPreview()` requests to
      perform optimistic locking. This ensures optimistic concurrency so that
      only one request happens at a time.  The fingerprint is initially
      generated by Deployment Manager and changes after every request to
      modify data. To get the latest fingerprint value, perform a `get()`
      request to a deployment.
    id: A string attribute.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    labels: Map of labels; provided by the client when the resource is created
      or updated. Specifically: Label keys must be between 1 and 63 characters
      long and must conform to the following regular expression:
      `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63
      characters long and must conform to the regular expression
      `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
    manifest: Output only. URL of the manifest representing the last manifest
      that was successfully deployed. If no manifest has been successfully
      deployed, this field will be absent.
    name: Name of the resource; provided by the client when the resource is
      created. The name must be 1-63 characters long, and comply with RFC1035.
      Specifically, the name must be 1-63 characters long and match the
      regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
      character must be a lowercase letter, and all following characters must
      be a dash, lowercase letter, or digit, except the last character, which
      cannot be a dash.
    operation: Output only. The Operation that most recently ran, or is
      currently running, on this deployment.
    outputs: Output only. List of outputs from the last manifest that deployed
      successfully.
    selfLink: Output only. Server defined URL for the resource.
    target: [Input Only] The parameters that define your deployment, including
      the deployment configuration and relevant templates.
    update: Output only. If Deployment Manager is currently updating or
      previewing an update to this deployment, the updated configuration
      appears here.
    updateTime: Output only. Update timestamp in RFC3339 text format.
  """

  credential = _messages.MessageField('Credential', 1)
  description = _messages.StringField(2)
  fingerprint = _messages.BytesField(3)
  id = _messages.IntegerField(4, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(5)
  labels = _messages.MessageField('DeploymentLabelEntry', 6, repeated=True)
  manifest = _messages.StringField(7)
  name = _messages.StringField(8)
  operation = _messages.MessageField('Operation', 9)
  outputs = _messages.MessageField('DeploymentOutputEntry', 10, repeated=True)
  selfLink = _messages.StringField(11)
  target = _messages.MessageField('TargetConfiguration', 12)
  update = _messages.MessageField('DeploymentUpdate', 13)
  updateTime = _messages.StringField(14)


class DeploymentLabelEntry(_messages.Message):
  r"""A DeploymentLabelEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class DeploymentOutputEntry(_messages.Message):
  r"""Output object for Deployments

  Fields:
    key: Key of the output
    value: Value of the label
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class DeploymentUpdate(_messages.Message):
  r"""DeploymentUpdate message type.

  Fields:
    credential: Output only. The user-provided default credential to use when
      deploying this preview.
    description: Output only. An optional user-provided description of the
      deployment after the current update has been applied.
    labels: Output only. Map of labels; provided by the client when the
      resource is created or updated. Specifically: Label keys must be between
      1 and 63 characters long and must conform to the following regular
      expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0
      and 63 characters long and must conform to the regular expression
      `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
    manifest: Output only. URL of the manifest representing the update
      configuration of this deployment.
  """

  credential = _messages.MessageField('Credential', 1)
  description = _messages.StringField(2)
  labels = _messages.MessageField('DeploymentUpdateLabelEntry', 3, repeated=True)
  manifest = _messages.StringField(4)


class DeploymentUpdateLabelEntry(_messages.Message):
  r"""A DeploymentUpdateLabelEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class DeploymentmanagerCompositeTypesDeleteRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesDeleteRequest object.

  Fields:
    compositeType: The name of the type for this request.
    project: The project ID for this request.
  """

  compositeType = _messages.StringField(1, required=True)
  project = _messages.StringField(2, required=True)


class DeploymentmanagerCompositeTypesGetRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesGetRequest object.

  Fields:
    compositeType: The name of the composite type for this request.
    project: The project ID for this request.
  """

  compositeType = _messages.StringField(1, required=True)
  project = _messages.StringField(2, required=True)


class DeploymentmanagerCompositeTypesInsertRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesInsertRequest object.

  Fields:
    compositeType: A CompositeType resource to be passed as the request body.
    project: The project ID for this request.
  """

  compositeType = _messages.MessageField('CompositeType', 1)
  project = _messages.StringField(2, required=True)


class DeploymentmanagerCompositeTypesListRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesListRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)


class DeploymentmanagerCompositeTypesPatchRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesPatchRequest object.

  Fields:
    compositeType: The name of the composite type for this request.
    compositeTypeResource: A CompositeType resource to be passed as the
      request body.
    project: The project ID for this request.
  """

  compositeType = _messages.StringField(1, required=True)
  compositeTypeResource = _messages.MessageField('CompositeType', 2)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerCompositeTypesUpdateRequest(_messages.Message):
  r"""A DeploymentmanagerCompositeTypesUpdateRequest object.

  Fields:
    compositeType: The name of the composite type for this request.
    compositeTypeResource: A CompositeType resource to be passed as the
      request body.
    project: The project ID for this request.
  """

  compositeType = _messages.StringField(1, required=True)
  compositeTypeResource = _messages.MessageField('CompositeType', 2)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsCancelPreviewRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsCancelPreviewRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    deploymentsCancelPreviewRequest: A DeploymentsCancelPreviewRequest
      resource to be passed as the request body.
    project: The project ID for this request.
  """

  deployment = _messages.StringField(1, required=True)
  deploymentsCancelPreviewRequest = _messages.MessageField('DeploymentsCancelPreviewRequest', 2)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsDeleteRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsDeleteRequest object.

  Enums:
    DeletePolicyValueValuesEnum: Sets the policy to use for deleting
      resources.

  Fields:
    deletePolicy: Sets the policy to use for deleting resources.
    deployment: The name of the deployment for this request.
    project: The project ID for this request.
  """

  class DeletePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for deleting resources.

    Values:
      ABANDON: <no description>
      DELETE: <no description>
    """
    ABANDON = 0
    DELETE = 1

  deletePolicy = _messages.EnumField('DeletePolicyValueValuesEnum', 1, default='DELETE')
  deployment = _messages.StringField(2, required=True)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsGetIamPolicyRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsGetIamPolicyRequest object.

  Fields:
    optionsRequestedPolicyVersion: Requested IAM Policy version.
    project: Project ID for this request.
    resource: Name or id of the resource for this request.
  """

  optionsRequestedPolicyVersion = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  project = _messages.StringField(2, required=True)
  resource = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsGetRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsGetRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    project: The project ID for this request.
  """

  deployment = _messages.StringField(1, required=True)
  project = _messages.StringField(2, required=True)


class DeploymentmanagerDeploymentsInsertRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsInsertRequest object.

  Enums:
    CreatePolicyValueValuesEnum: Sets the policy to use for creating new
      resources.

  Fields:
    createPolicy: Sets the policy to use for creating new resources.
    deployment: A Deployment resource to be passed as the request body.
    preview: If set to true, creates a deployment and creates "shell"
      resources but does not actually instantiate these resources. This allows
      you to preview what your deployment looks like. After previewing a
      deployment, you can deploy your resources by making a request with the
      `update()` method or you can use the `cancelPreview()` method to cancel
      the preview altogether. Note that the deployment will still exist after
      you cancel the preview and you must separately delete this deployment if
      you want to remove it.
    project: The project ID for this request.
  """

  class CreatePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for creating new resources.

    Values:
      ACQUIRE: <no description>
      CREATE: <no description>
      CREATE_OR_ACQUIRE: <no description>
    """
    ACQUIRE = 0
    CREATE = 1
    CREATE_OR_ACQUIRE = 2

  createPolicy = _messages.EnumField('CreatePolicyValueValuesEnum', 1, default='CREATE_OR_ACQUIRE')
  deployment = _messages.MessageField('Deployment', 2)
  preview = _messages.BooleanField(3)
  project = _messages.StringField(4, required=True)


class DeploymentmanagerDeploymentsListRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsListRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)


class DeploymentmanagerDeploymentsPatchRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsPatchRequest object.

  Enums:
    CreatePolicyValueValuesEnum: Sets the policy to use for creating new
      resources.
    DeletePolicyValueValuesEnum: Sets the policy to use for deleting
      resources.

  Fields:
    createPolicy: Sets the policy to use for creating new resources.
    deletePolicy: Sets the policy to use for deleting resources.
    deployment: The name of the deployment for this request.
    deploymentResource: A Deployment resource to be passed as the request
      body.
    preview: If set to true, updates the deployment and creates and updates
      the "shell" resources but does not actually alter or instantiate these
      resources. This allows you to preview what your deployment will look
      like. You can use this intent to preview how an update would affect your
      deployment. You must provide a `target.config` with a configuration if
      this is set to true. After previewing a deployment, you can deploy your
      resources by making a request with the `update()` or you can
      `cancelPreview()` to remove the preview altogether. Note that the
      deployment will still exist after you cancel the preview and you must
      separately delete this deployment if you want to remove it.
    project: The project ID for this request.
  """

  class CreatePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for creating new resources.

    Values:
      ACQUIRE: <no description>
      CREATE: <no description>
      CREATE_OR_ACQUIRE: <no description>
    """
    ACQUIRE = 0
    CREATE = 1
    CREATE_OR_ACQUIRE = 2

  class DeletePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for deleting resources.

    Values:
      ABANDON: <no description>
      DELETE: <no description>
    """
    ABANDON = 0
    DELETE = 1

  createPolicy = _messages.EnumField('CreatePolicyValueValuesEnum', 1, default='CREATE_OR_ACQUIRE')
  deletePolicy = _messages.EnumField('DeletePolicyValueValuesEnum', 2, default='DELETE')
  deployment = _messages.StringField(3, required=True)
  deploymentResource = _messages.MessageField('Deployment', 4)
  preview = _messages.BooleanField(5, default=False)
  project = _messages.StringField(6, required=True)


class DeploymentmanagerDeploymentsSetIamPolicyRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsSetIamPolicyRequest object.

  Fields:
    globalSetPolicyRequest: A GlobalSetPolicyRequest resource to be passed as
      the request body.
    project: Project ID for this request.
    resource: Name or id of the resource for this request.
  """

  globalSetPolicyRequest = _messages.MessageField('GlobalSetPolicyRequest', 1)
  project = _messages.StringField(2, required=True)
  resource = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsStopRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsStopRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    deploymentsStopRequest: A DeploymentsStopRequest resource to be passed as
      the request body.
    project: The project ID for this request.
  """

  deployment = _messages.StringField(1, required=True)
  deploymentsStopRequest = _messages.MessageField('DeploymentsStopRequest', 2)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerDeploymentsTestIamPermissionsRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsTestIamPermissionsRequest object.

  Fields:
    project: Project ID for this request.
    resource: Name or id of the resource for this request.
    testPermissionsRequest: A TestPermissionsRequest resource to be passed as
      the request body.
  """

  project = _messages.StringField(1, required=True)
  resource = _messages.StringField(2, required=True)
  testPermissionsRequest = _messages.MessageField('TestPermissionsRequest', 3)


class DeploymentmanagerDeploymentsUpdateRequest(_messages.Message):
  r"""A DeploymentmanagerDeploymentsUpdateRequest object.

  Enums:
    CreatePolicyValueValuesEnum: Sets the policy to use for creating new
      resources.
    DeletePolicyValueValuesEnum: Sets the policy to use for deleting
      resources.

  Fields:
    createPolicy: Sets the policy to use for creating new resources.
    deletePolicy: Sets the policy to use for deleting resources.
    deployment: The name of the deployment for this request.
    deploymentResource: A Deployment resource to be passed as the request
      body.
    preview: If set to true, updates the deployment and creates and updates
      the "shell" resources but does not actually alter or instantiate these
      resources. This allows you to preview what your deployment will look
      like. You can use this intent to preview how an update would affect your
      deployment. You must provide a `target.config` with a configuration if
      this is set to true. After previewing a deployment, you can deploy your
      resources by making a request with the `update()` or you can
      `cancelPreview()` to remove the preview altogether. Note that the
      deployment will still exist after you cancel the preview and you must
      separately delete this deployment if you want to remove it.
    project: The project ID for this request.
  """

  class CreatePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for creating new resources.

    Values:
      ACQUIRE: <no description>
      CREATE: <no description>
      CREATE_OR_ACQUIRE: <no description>
    """
    ACQUIRE = 0
    CREATE = 1
    CREATE_OR_ACQUIRE = 2

  class DeletePolicyValueValuesEnum(_messages.Enum):
    r"""Sets the policy to use for deleting resources.

    Values:
      ABANDON: <no description>
      DELETE: <no description>
    """
    ABANDON = 0
    DELETE = 1

  createPolicy = _messages.EnumField('CreatePolicyValueValuesEnum', 1, default='CREATE_OR_ACQUIRE')
  deletePolicy = _messages.EnumField('DeletePolicyValueValuesEnum', 2, default='DELETE')
  deployment = _messages.StringField(3, required=True)
  deploymentResource = _messages.MessageField('Deployment', 4)
  preview = _messages.BooleanField(5, default=False)
  project = _messages.StringField(6, required=True)


class DeploymentmanagerManifestsGetRequest(_messages.Message):
  r"""A DeploymentmanagerManifestsGetRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    manifest: The name of the manifest for this request.
    project: The project ID for this request.
  """

  deployment = _messages.StringField(1, required=True)
  manifest = _messages.StringField(2, required=True)
  project = _messages.StringField(3, required=True)


class DeploymentmanagerManifestsListRequest(_messages.Message):
  r"""A DeploymentmanagerManifestsListRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  deployment = _messages.StringField(1, required=True)
  filter = _messages.StringField(2)
  maxResults = _messages.IntegerField(3, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(4)
  pageToken = _messages.StringField(5)
  project = _messages.StringField(6, required=True)
  returnPartialSuccess = _messages.BooleanField(7)


class DeploymentmanagerOperationsGetRequest(_messages.Message):
  r"""A DeploymentmanagerOperationsGetRequest object.

  Fields:
    operation: The name of the operation for this request.
    project: The project ID for this request.
  """

  operation = _messages.StringField(1, required=True)
  project = _messages.StringField(2, required=True)


class DeploymentmanagerOperationsListRequest(_messages.Message):
  r"""A DeploymentmanagerOperationsListRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)


class DeploymentmanagerResourcesGetRequest(_messages.Message):
  r"""A DeploymentmanagerResourcesGetRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    project: The project ID for this request.
    resource: The name of the resource for this request.
  """

  deployment = _messages.StringField(1, required=True)
  project = _messages.StringField(2, required=True)
  resource = _messages.StringField(3, required=True)


class DeploymentmanagerResourcesListRequest(_messages.Message):
  r"""A DeploymentmanagerResourcesListRequest object.

  Fields:
    deployment: The name of the deployment for this request.
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  deployment = _messages.StringField(1, required=True)
  filter = _messages.StringField(2)
  maxResults = _messages.IntegerField(3, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(4)
  pageToken = _messages.StringField(5)
  project = _messages.StringField(6, required=True)
  returnPartialSuccess = _messages.BooleanField(7)


class DeploymentmanagerTypeProvidersDeleteRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersDeleteRequest object.

  Fields:
    project: The project ID for this request.
    typeProvider: The name of the type provider for this request.
  """

  project = _messages.StringField(1, required=True)
  typeProvider = _messages.StringField(2, required=True)


class DeploymentmanagerTypeProvidersGetRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersGetRequest object.

  Fields:
    project: The project ID for this request.
    typeProvider: The name of the type provider for this request.
  """

  project = _messages.StringField(1, required=True)
  typeProvider = _messages.StringField(2, required=True)


class DeploymentmanagerTypeProvidersGetTypeRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersGetTypeRequest object.

  Fields:
    project: The project ID for this request.
    type: The name of the type provider type for this request.
    typeProvider: The name of the type provider for this request.
  """

  project = _messages.StringField(1, required=True)
  type = _messages.StringField(2, required=True)
  typeProvider = _messages.StringField(3, required=True)


class DeploymentmanagerTypeProvidersInsertRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersInsertRequest object.

  Fields:
    project: The project ID for this request.
    typeProvider: A TypeProvider resource to be passed as the request body.
  """

  project = _messages.StringField(1, required=True)
  typeProvider = _messages.MessageField('TypeProvider', 2)


class DeploymentmanagerTypeProvidersListRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersListRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)


class DeploymentmanagerTypeProvidersListTypesRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersListTypesRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
    typeProvider: The name of the type provider for this request.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)
  typeProvider = _messages.StringField(7, required=True)


class DeploymentmanagerTypeProvidersPatchRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersPatchRequest object.

  Fields:
    project: The project ID for this request.
    typeProvider: The name of the type provider for this request.
    typeProviderResource: A TypeProvider resource to be passed as the request
      body.
  """

  project = _messages.StringField(1, required=True)
  typeProvider = _messages.StringField(2, required=True)
  typeProviderResource = _messages.MessageField('TypeProvider', 3)


class DeploymentmanagerTypeProvidersUpdateRequest(_messages.Message):
  r"""A DeploymentmanagerTypeProvidersUpdateRequest object.

  Fields:
    project: The project ID for this request.
    typeProvider: The name of the type provider for this request.
    typeProviderResource: A TypeProvider resource to be passed as the request
      body.
  """

  project = _messages.StringField(1, required=True)
  typeProvider = _messages.StringField(2, required=True)
  typeProviderResource = _messages.MessageField('TypeProvider', 3)


class DeploymentmanagerTypesGetRequest(_messages.Message):
  r"""A DeploymentmanagerTypesGetRequest object.

  Fields:
    project: The project ID for this request.
    type: The name of the type for this request.
  """

  project = _messages.StringField(1, required=True)
  type = _messages.StringField(2, required=True)


class DeploymentmanagerTypesListRequest(_messages.Message):
  r"""A DeploymentmanagerTypesListRequest object.

  Fields:
    filter: A filter expression that filters resources listed in the response.
      Most Compute resources support two types of filter expressions:
      expressions that support regular expressions and expressions that follow
      API improvement proposal AIP-160.  If you want to use AIP-160, your
      expression must specify the field name, an operator, and the value that
      you want to use for filtering. The value must be a string, a number, or
      a boolean. The operator must be either `=`, `!=`, `>`, `<`, `=` or `:`.
      For example, if you are filtering Compute Engine instances, you can
      exclude instances named `example-instance` by specifying `name !=
      example-instance`.  The `:` operator can be used with string fields to
      match substrings. For non-string fields it is equivalent to the `=`
      operator. The `:*` comparison can be used to test whether a key has been
      defined.  For example, to find all objects with `owner` label use: ```
      labels.owner:* ```  You can also filter nested fields. For example, you
      could specify `scheduling.automaticRestart = false` to include instances
      only if they are not scheduled for automatic restarts. You can use
      filtering on nested fields to filter based on resource labels.  To
      filter on multiple expressions, provide each separate expression within
      parentheses. For example: ``` (scheduling.automaticRestart = true)
      (cpuPlatform = "Intel Skylake") ``` By default, each expression is an
      `AND` expression. However, you can include `AND` and `OR` expressions
      explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR
      (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart =
      true) ```  If you want to use a regular expression, use the `eq` (equal)
      or `ne` (not equal) operator against a single un-parenthesized
      expression with or without quotes or against multiple parenthesized
      expressions. Examples:  `fieldname eq unquoted literal` `fieldname eq
      'single quoted literal'` `fieldname eq "double quoted literal"`
      `(fieldname1 eq literal) (fieldname2 ne "literal")`  The literal value
      is interpreted as a regular expression using Google RE2 library syntax.
      The literal value must match the entire field.  For example, to filter
      for instances that do not end with name "instance", you would use `name
      ne .*instance`.
    maxResults: The maximum number of results per page that should be
      returned. If the number of available results is larger than
      `maxResults`, Compute Engine returns a `nextPageToken` that can be used
      to get the next page of results in subsequent list requests. Acceptable
      values are `0` to `500`, inclusive. (Default: `500`)
    orderBy: Sorts list results by a certain order. By default, results are
      returned in alphanumerical order based on the resource name.  You can
      also sort results in descending order based on the creation timestamp
      using `orderBy="creationTimestamp desc"`. This sorts results based on
      the `creationTimestamp` field in reverse chronological order (newest
      result first). Use this to sort resources like operations so that the
      newest operation is returned first.  Currently, only sorting by `name`
      or `creationTimestamp desc` is supported.
    pageToken: Specifies a page token to use. Set `pageToken` to the
      `nextPageToken` returned by a previous list request to get the next page
      of results.
    project: The project ID for this request.
    returnPartialSuccess: Opt-in for partial success behavior which provides
      partial results in case of failure. The default value is false.
  """

  filter = _messages.StringField(1)
  maxResults = _messages.IntegerField(2, variant=_messages.Variant.UINT32, default=500)
  orderBy = _messages.StringField(3)
  pageToken = _messages.StringField(4)
  project = _messages.StringField(5, required=True)
  returnPartialSuccess = _messages.BooleanField(6)


class DeploymentsCancelPreviewRequest(_messages.Message):
  r"""DeploymentsCancelPreviewRequest message type.

  Fields:
    fingerprint: Specifies a fingerprint for `cancelPreview()` requests. A
      fingerprint is a randomly generated value that must be provided in
      `cancelPreview()` requests to perform optimistic locking. This ensures
      optimistic concurrency so that the deployment does not have conflicting
      requests (e.g. if someone attempts to make a new update request while
      another user attempts to cancel a preview, this would prevent one of the
      requests).  The fingerprint is initially generated by Deployment Manager
      and changes after every request to modify a deployment. To get the
      latest fingerprint value, perform a `get()` request on the deployment.
  """

  fingerprint = _messages.BytesField(1)


class DeploymentsListResponse(_messages.Message):
  r"""A response containing a partial list of deployments and a page token
  used to build the next request if the request has been truncated.

  Fields:
    deployments: Output only. The deployments contained in this response.
    nextPageToken: Output only. A token used to continue a truncated list
      request.
  """

  deployments = _messages.MessageField('Deployment', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class DeploymentsStopRequest(_messages.Message):
  r"""DeploymentsStopRequest message type.

  Fields:
    fingerprint: Specifies a fingerprint for `stop()` requests. A fingerprint
      is a randomly generated value that must be provided in `stop()` requests
      to perform optimistic locking. This ensures optimistic concurrency so
      that the deployment does not have conflicting requests (e.g. if someone
      attempts to make a new update request while another user attempts to
      stop an ongoing update request, this would prevent a collision).  The
      fingerprint is initially generated by Deployment Manager and changes
      after every request to modify a deployment. To get the latest
      fingerprint value, perform a `get()` request on the deployment.
  """

  fingerprint = _messages.BytesField(1)


class Diagnostic(_messages.Message):
  r"""Diagnostic message type.

  Fields:
    field: JsonPath expression on the resource that if non empty, indicates
      that this field needs to be extracted as a diagnostic.
    level: Level to record this diagnostic.
  """

  field = _messages.StringField(1)
  level = _messages.StringField(2)


class ErrorInfo(_messages.Message):
  r"""Describes the cause of the error with structured details.  Example of an
  error when contacting the "pubsub.googleapis.com" API when it is not
  enabled:  { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata":
  { "resource": "projects/123", "service": "pubsub.googleapis.com" } }  This
  response indicates that the pubsub.googleapis.com API is not enabled.
  Example of an error that is returned when attempting to create a Spanner
  instance in a region that is out of stock:  { "reason": "STOCKOUT" "domain":
  "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-
  east2" } }

  Fields:
    domain: The logical grouping to which the "reason" belongs. The error
      domain is typically the registered service name of the tool or product
      that generates the error. Example: "pubsub.googleapis.com". If the error
      is generated by some common infrastructure, the error domain must be a
      globally unique value that identifies the infrastructure. For Google API
      infrastructure, the error domain is "googleapis.com".
    metadatas: Additional structured details about this error.  Keys should
      match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When
      identifying the current value of an exceeded limit, the units should be
      contained in the key, not the value. For example, rather than
      {"instanceLimit": "100/request"}, should be returned as,
      {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
      instances that can be created in a single (batch) request.
    reason: The reason of the error. This is a constant value that identifies
      the proximate cause of the error. Error reasons are unique within a
      particular domain of errors. This should be at most 63 characters and
      match /[A-Z0-9_]+/.
  """

  domain = _messages.StringField(1)
  metadatas = _messages.MessageField('ErrorInfoMetadataEntry', 2, repeated=True)
  reason = _messages.StringField(3)


class ErrorInfoMetadataEntry(_messages.Message):
  r"""A ErrorInfoMetadataEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class Expr(_messages.Message):
  r"""Represents a textual expression in the Common Expression Language (CEL)
  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
  are documented at https://github.com/google/cel-spec.  Example (Comparison):
  title: "Summary size limit" description: "Determines if a summary is less
  than 100 chars" expression: "document.summary.size() < 100"  Example
  (Equality):  title: "Requestor is owner" description: "Determines if
  requestor is the document owner" expression: "document.owner ==
  request.auth.claims.email"  Example (Logic):  title: "Public documents"
  description: "Determine whether the document should be publicly visible"
  expression: "document.type != 'private' && document.type != 'internal'"
  Example (Data Manipulation):  title: "Notification string" description:
  "Create a notification string with a timestamp." expression: "'New message
  received at ' + string(document.create_time)"  The exact variables and
  functions that may be referenced within an expression are determined by the
  service that evaluates it. See the service documentation for additional
  information.

  Fields:
    description: Optional. Description of the expression. This is a longer
      text which describes the expression, e.g. when hovered over it in a UI.
    expression: Textual representation of an expression in Common Expression
      Language syntax.
    location: Optional. String indicating the location of the expression for
      error reporting, e.g. a file name and a position in the file.
    title: Optional. Title for the expression, i.e. a short string describing
      its purpose. This can be used e.g. in UIs which allow to enter the
      expression.
  """

  description = _messages.StringField(1)
  expression = _messages.StringField(2)
  location = _messages.StringField(3)
  title = _messages.StringField(4)


class GlobalSetPolicyRequest(_messages.Message):
  r"""A GlobalSetPolicyRequest object.

  Fields:
    bindings: Flatten Policy to create a backward compatible wire-format.
      Deprecated. Use 'policy' to specify bindings.
    etag: Flatten Policy to create a backward compatible wire-format.
      Deprecated. Use 'policy' to specify the etag.
    policy: REQUIRED: The complete policy to be applied to the 'resource'. The
      size of the policy is limited to a few 10s of KB. An empty policy is in
      general a valid policy but certain services (like Projects) might reject
      them.
  """

  bindings = _messages.MessageField('Binding', 1, repeated=True)
  etag = _messages.BytesField(2)
  policy = _messages.MessageField('Policy', 3)


class Help(_messages.Message):
  r"""Provides links to documentation or for performing an out of band action.
  For example, if a quota check failed with an error indicating the calling
  project hasn't enabled the accessed service, this can contain a URL pointing
  directly to the right place in the developer console to flip the bit.

  Fields:
    links: URL(s) pointing to additional information on handling the current
      error.
  """

  links = _messages.MessageField('HelpLink', 1, repeated=True)


class HelpLink(_messages.Message):
  r"""Describes a URL link.

  Fields:
    description: Describes what the link offers.
    url: The URL of the link.
  """

  description = _messages.StringField(1)
  url = _messages.StringField(2)


class ImportFile(_messages.Message):
  r"""ImportFile message type.

  Fields:
    content: The contents of the file.
    name: The name of the file.
  """

  content = _messages.StringField(1)
  name = _messages.StringField(2)


class InputMapping(_messages.Message):
  r"""InputMapping creates a 'virtual' property that will be injected into the
  properties before sending the request to the underlying API.

  Fields:
    fieldName: The name of the field that is going to be injected.
    location: The location where this mapping applies.
    methodMatch: Regex to evaluate on method to decide if input applies.
    value: A jsonPath expression to select an element.
  """

  fieldName = _messages.StringField(1)
  location = _messages.StringField(2)
  methodMatch = _messages.StringField(3)
  value = _messages.StringField(4)


class LocalizedMessage(_messages.Message):
  r"""Provides a localized error message that is safe to return to the user
  which can be attached to an RPC error.

  Fields:
    locale: The locale used following the specification defined at
      https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US",
      "fr-CH", "es-MX"
    message: The localized error message in the above locale.
  """

  locale = _messages.StringField(1)
  message = _messages.StringField(2)


class LogConfig(_messages.Message):
  r"""Specifies what kind of log the caller must write

  Fields:
    cloudAudit: Cloud audit options.
    counter: Counter options.
    dataAccess: Data access options.
  """

  cloudAudit = _messages.MessageField('LogConfigCloudAuditOptions', 1)
  counter = _messages.MessageField('LogConfigCounterOptions', 2)
  dataAccess = _messages.MessageField('LogConfigDataAccessOptions', 3)


class LogConfigCloudAuditOptions(_messages.Message):
  r"""Write a Cloud Audit log

  Fields:
    authorizationLoggingOptions: Information used by the Cloud Audit Logging
      pipeline.
    logName: The log_name to populate in the Cloud Audit Record.
  """

  authorizationLoggingOptions = _messages.MessageField('AuthorizationLoggingOptions', 1)
  logName = _messages.StringField(2)


class LogConfigCounterOptions(_messages.Message):
  r"""Increment a streamz counter with the specified metric and field names.
  Metric names should start with a '/', generally be lowercase-only, and end
  in "_count". Field names should not contain an initial slash. The actual
  exported metric names will have "/iam/policy" prepended.  Field names
  correspond to IAM request parameters and field values are their respective
  values.  Supported field names: - "authority", which is "[token]" if
  IAMContext.token is present, otherwise the value of
  IAMContext.authority_selector if present, and otherwise a representation of
  IAMContext.principal; or - "iam_principal", a representation of
  IAMContext.principal even if a token or authority selector is present; or -
  "" (empty string), resulting in a counter with no fields.  Examples: counter
  { metric: "/debug_access_count" field: "iam_principal" } ==> increment
  counter /iam/policy/debug_access_count {iam_principal=[value of
  IAMContext.principal]}

  Fields:
    customFields: Custom fields.
    field: The field value to attribute.
    metric: The metric to update.
  """

  customFields = _messages.MessageField('LogConfigCounterOptionsCustomField', 1, repeated=True)
  field = _messages.StringField(2)
  metric = _messages.StringField(3)


class LogConfigCounterOptionsCustomField(_messages.Message):
  r"""Custom fields. These can be used to create a counter with arbitrary
  field/value pairs. See: go/rpcsp-custom-fields.

  Fields:
    name: Name is the field name.
    value: Value is the field value. It is important that in contrast to the
      CounterOptions.field, the value here is a constant that is not derived
      from the IAMContext.
  """

  name = _messages.StringField(1)
  value = _messages.StringField(2)


class LogConfigDataAccessOptions(_messages.Message):
  r"""Write a Data Access (Gin) log

  Fields:
    logMode:
  """

  logMode = _messages.StringField(1)


class Manifest(_messages.Message):
  r"""Manifest message type.

  Fields:
    config: Output only. The YAML configuration for this manifest.
    expandedConfig: Output only. The fully-expanded configuration file,
      including any templates and references.
    id: A string attribute.
    imports: Output only. The imported files for this manifest.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    layout: Output only. The YAML layout for this manifest.
    manifestSizeBytes: Output only. The computed size of the fully expanded
      manifest.
    manifestSizeLimitBytes: Output only. The size limit for expanded manifests
      in the project.
    name: Output only.  The name of the manifest.
    selfLink: Output only. Self link for the manifest.
  """

  config = _messages.MessageField('ConfigFile', 1)
  expandedConfig = _messages.StringField(2)
  id = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  imports = _messages.MessageField('ImportFile', 4, repeated=True)
  insertTime = _messages.StringField(5)
  layout = _messages.StringField(6)
  manifestSizeBytes = _messages.IntegerField(7)
  manifestSizeLimitBytes = _messages.IntegerField(8)
  name = _messages.StringField(9)
  selfLink = _messages.StringField(10)


class ManifestsListResponse(_messages.Message):
  r"""A response containing a partial list of manifests and a page token used
  to build the next request if the request has been truncated.

  Fields:
    manifests: Output only. Manifests contained in this list response.
    nextPageToken: Output only. A token used to continue a truncated list
      request.
  """

  manifests = _messages.MessageField('Manifest', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class MethodMap(_messages.Message):
  r"""Deployment Manager will call these methods during the events of
  creation/deletion/update/get/setIamPolicy

  Fields:
    create: The action identifier for the create method to be used for this
      collection
    delete: The action identifier for the delete method to be used for this
      collection
    get: The action identifier for the get method to be used for this
      collection
    setIamPolicy: The action identifier for the setIamPolicy method to be used
      for this collection
    update: The action identifier for the update method to be used for this
      collection
  """

  create = _messages.StringField(1)
  delete = _messages.StringField(2)
  get = _messages.StringField(3)
  setIamPolicy = _messages.StringField(4)
  update = _messages.StringField(5)


class Operation(_messages.Message):
  r"""Represents an Operation resource.  Google Compute Engine has three
  Operation resources:  *
  [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) *
  [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) *
  [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations)  You can
  use an operation resource to manage asynchronous API requests. For more
  information, read Handling API responses.  Operations can be global,
  regional or zonal.   - For global operations, use the `globalOperations`
  resource.  - For regional operations, use the `regionOperations` resource.
  - For zonal operations, use the `zonalOperations` resource.    For more
  information, read  Global, Regional, and Zonal Resources. (== resource_for
  {$api_version}.globalOperations ==) (== resource_for
  {$api_version}.regionOperations ==) (== resource_for
  {$api_version}.zoneOperations ==)

  Messages:
    ErrorValue: [Output Only] If errors are generated during processing of the
      operation, this field will be populated.
    WarningsValueListEntry: A WarningsValueListEntry object.

  Fields:
    clientOperationId: [Output Only] The value of `requestId` if you provided
      it in the request. Not present otherwise.
    creationTimestamp: [Deprecated] This field is deprecated.
    description: [Output Only] A textual description of the operation, which
      is set when the operation is created.
    endTime: [Output Only] The time that this operation was completed. This
      value is in RFC3339 text format.
    error: [Output Only] If errors are generated during processing of the
      operation, this field will be populated.
    httpErrorMessage: [Output Only] If the operation fails, this field
      contains the HTTP error message that was returned, such as `NOT FOUND`.
    httpErrorStatusCode: [Output Only] If the operation fails, this field
      contains the HTTP error status code that was returned. For example, a
      `404` means the resource was not found.
    id: [Output Only] The unique identifier for the operation. This identifier
      is defined by the server.
    insertTime: [Output Only] The time that this operation was requested. This
      value is in RFC3339 text format.
    kind: [Output Only] Type of the resource. Always `compute#operation` for
      Operation resources.
    metadata: [Output Only] Service-specific metadata attached to this
      operation.
    name: [Output Only] Name of the operation.
    operationGroupId: [Output Only] An ID that represents a group of
      operations, such as when a group of operations results from a
      `bulkInsert` API request.
    operationType: [Output Only] The type of operation, such as `insert`,
      `update`, or `delete`, and so on.
    progress: [Output Only] An optional progress indicator that ranges from 0
      to 100. There is no requirement that this be linear or support any
      granularity of operations. This should not be used to guess when the
      operation will be complete. This number should monotonically increase as
      the operation progresses.
    region: [Output Only] The URL of the region where the operation resides.
      Only applicable when performing regional operations.
    selfLink: [Output Only] Server-defined URL for the resource.
    selfLinkWithId: [Output Only] Server-defined URL for this resource with
      the resource id.
    startTime: [Output Only] The time that this operation was started by the
      server. This value is in RFC3339 text format.
    status: [Output Only] The status of the operation, which can be one of the
      following: `PENDING`, `RUNNING`, or `DONE`.
    statusMessage: [Output Only] An optional textual description of the
      current status of the operation.
    targetId: [Output Only] The unique target ID, which identifies a specific
      incarnation of the target resource.
    targetLink: [Output Only] The URL of the resource that the operation
      modifies. For operations related to creating a snapshot, this points to
      the persistent disk that the snapshot was created from.
    user: [Output Only] User who requested the operation, for example:
      `user@example.com`.
    warnings: [Output Only] If warning messages are generated during
      processing of the operation, this field will be populated.
    zone: [Output Only] The URL of the zone where the operation resides. Only
      applicable when performing per-zone operations.
  """

  class ErrorValue(_messages.Message):
    r"""[Output Only] If errors are generated during processing of the
    operation, this field will be populated.

    Messages:
      ErrorsValueListEntry: A ErrorsValueListEntry object.

    Fields:
      errors: [Output Only] The array of errors encountered while processing
        this operation.
    """

    class ErrorsValueListEntry(_messages.Message):
      r"""A ErrorsValueListEntry object.

      Messages:
        ErrorDetailsValueListEntry: A ErrorDetailsValueListEntry object.

      Fields:
        code: [Output Only] The error type identifier for this error.
        errorDetails: [Output Only] An optional list of messages that contain
          the error details. There is a set of defined message types to use
          for providing details.The syntax depends on the error code. For
          example, QuotaExceededInfo will have details when the error code is
          QUOTA_EXCEEDED.
        location: [Output Only] Indicates the field in the request that caused
          the error. This property is optional.
        message: [Output Only] An optional, human-readable error message.
      """

      class ErrorDetailsValueListEntry(_messages.Message):
        r"""A ErrorDetailsValueListEntry object.

        Fields:
          errorInfo: A ErrorInfo attribute.
          help: A Help attribute.
          localizedMessage: A LocalizedMessage attribute.
          quotaInfo: A QuotaExceededInfo attribute.
        """

        errorInfo = _messages.MessageField('ErrorInfo', 1)
        help = _messages.MessageField('Help', 2)
        localizedMessage = _messages.MessageField('LocalizedMessage', 3)
        quotaInfo = _messages.MessageField('QuotaExceededInfo', 4)

      code = _messages.StringField(1)
      errorDetails = _messages.MessageField('ErrorDetailsValueListEntry', 2, repeated=True)
      location = _messages.StringField(3)
      message = _messages.StringField(4)

    errors = _messages.MessageField('ErrorsValueListEntry', 1, repeated=True)

  class WarningsValueListEntry(_messages.Message):
    r"""A WarningsValueListEntry object.

    Messages:
      DataValueListEntry: A DataValueListEntry object.

    Fields:
      code: [Output Only] A warning code, if applicable. For example, Compute
        Engine returns NO_RESULTS_ON_PAGE if there are no results in the
        response.
      data: [Output Only] Metadata about this warning in key: value format.
        For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
      message: [Output Only] A human-readable description of the warning code.
    """

    class DataValueListEntry(_messages.Message):
      r"""A DataValueListEntry object.

      Fields:
        key: [Output Only] A key that provides more detail on the warning
          being returned. For example, for warnings where there are no results
          in a list request for a particular zone, this key might be scope and
          the key value might be the zone name. Other examples might be a key
          indicating a deprecated resource and a suggested replacement, or a
          warning about invalid network settings (for example, if an instance
          attempts to perform IP forwarding but is not enabled for IP
          forwarding).
        value: [Output Only] A warning data value corresponding to the key.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    code = _messages.StringField(1)
    data = _messages.MessageField('DataValueListEntry', 2, repeated=True)
    message = _messages.StringField(3)

  clientOperationId = _messages.StringField(1)
  creationTimestamp = _messages.StringField(2)
  description = _messages.StringField(3)
  endTime = _messages.StringField(4)
  error = _messages.MessageField('ErrorValue', 5)
  httpErrorMessage = _messages.StringField(6)
  httpErrorStatusCode = _messages.IntegerField(7, variant=_messages.Variant.INT32)
  id = _messages.IntegerField(8, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(9)
  kind = _messages.StringField(10)
  metadata = _messages.MessageField('Any', 11)
  name = _messages.StringField(12)
  operationGroupId = _messages.StringField(13)
  operationType = _messages.StringField(14)
  progress = _messages.IntegerField(15, variant=_messages.Variant.INT32)
  region = _messages.StringField(16)
  selfLink = _messages.StringField(17)
  selfLinkWithId = _messages.StringField(18)
  startTime = _messages.StringField(19)
  status = _messages.StringField(20)
  statusMessage = _messages.StringField(21)
  targetId = _messages.IntegerField(22, variant=_messages.Variant.UINT64)
  targetLink = _messages.StringField(23)
  user = _messages.StringField(24)
  warnings = _messages.MessageField('WarningsValueListEntry', 25, repeated=True)
  zone = _messages.StringField(26)


class OperationsListResponse(_messages.Message):
  r"""A response containing a partial list of operations and a page token used
  to build the next request if the request has been truncated.

  Fields:
    nextPageToken: Output only. A token used to continue a truncated list
      request.
    operations: Output only. Operations contained in this list response.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('Operation', 2, repeated=True)


class Options(_messages.Message):
  r"""Options allows customized resource handling by Deployment Manager.

  Fields:
    asyncOptions: Options regarding how to thread async requests.
    inputMappings: The mappings that apply for requests.
    nameProperty: The json path to the field in the resource JSON body into
      which the resource name should be mapped. Leaving this empty indicates
      that there should be no mapping performed.
    validationOptions: Options for how to validate and process properties on a
      resource.
  """

  asyncOptions = _messages.MessageField('AsyncOptions', 1, repeated=True)
  inputMappings = _messages.MessageField('InputMapping', 2, repeated=True)
  nameProperty = _messages.StringField(3)
  validationOptions = _messages.MessageField('ValidationOptions', 4)


class Policy(_messages.Message):
  r"""An Identity and Access Management (IAM) policy, which specifies access
  controls for Google Cloud resources.    A `Policy` is a collection of
  `bindings`. A `binding` binds one or more `members`, or principals, to a
  single `role`. Principals can be user accounts, service accounts, Google
  groups, and domains (such as G Suite). A `role` is a named list of
  permissions; each `role` can be an IAM predefined role or a user-created
  custom role.  For some types of Google Cloud resources, a `binding` can also
  specify a `condition`, which is a logical expression that allows access to a
  resource only if the expression evaluates to `true`. A condition can add
  constraints based on attributes of the request, the resource, or both. To
  learn which resources support conditions in their IAM policies, see the [IAM
  documentation](https://cloud.google.com/iam/help/conditions/resource-
  policies).  **JSON example:**  { "bindings": [ { "role":
  "roles/resourcemanager.organizationAdmin", "members": [
  "user:mike@example.com", "group:admins@example.com", "domain:google.com",
  "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role":
  "roles/resourcemanager.organizationViewer", "members": [
  "user:eve@example.com" ], "condition": { "title": "expirable access",
  "description": "Does not grant access after Sep 2020", "expression":
  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
  "BwWWja0YfJA=", "version": 3 }  **YAML example:**  bindings: - members: -
  user:mike@example.com - group:admins@example.com - domain:google.com -
  serviceAccount:my-project-id@appspot.gserviceaccount.com role:
  roles/resourcemanager.organizationAdmin - members: - user:eve@example.com
  role: roles/resourcemanager.organizationViewer condition: title: expirable
  access description: Does not grant access after Sep 2020 expression:
  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
  version: 3  For a description of IAM and its features, see the [IAM
  documentation](https://cloud.google.com/iam/docs/).

  Fields:
    auditConfigs: Specifies cloud audit logging configuration for this policy.
    bindings: Associates a list of `members`, or principals, with a `role`.
      Optionally, may specify a `condition` that determines how and when the
      `bindings` are applied. Each of the `bindings` must contain at least one
      principal.  The `bindings` in a `Policy` can refer to up to 1,500
      principals; up to 250 of these principals can be Google groups. Each
      occurrence of a principal counts towards these limits. For example, if
      the `bindings` grant 50 different roles to `user:alice@example.com`, and
      not to any other principal, then you can add another 1,450 principals to
      the `bindings` in the `Policy`.
    etag: `etag` is used for optimistic concurrency control as a way to help
      prevent simultaneous updates of a policy from overwriting each other. It
      is strongly suggested that systems make use of the `etag` in the read-
      modify-write cycle to perform policy updates in order to avoid race
      conditions: An `etag` is returned in the response to `getIamPolicy`, and
      systems are expected to put that etag in the request to `setIamPolicy`
      to ensure that their change will be applied to the same version of the
      policy.  **Important:** If you use IAM Conditions, you must include the
      `etag` field whenever you call `setIamPolicy`. If you omit this field,
      then IAM allows you to overwrite a version `3` policy with a version `1`
      policy, and all of the conditions in the version `3` policy are lost.
    rules: If more than one rule is specified, the rules are applied in the
      following manner: - All matching LOG rules are always applied. - If any
      DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be
      applied if one or more matching rule requires logging. - Otherwise, if
      any ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging
      will be applied if one or more matching rule requires logging. -
      Otherwise, if no rule applies, permission is denied.
    version: Specifies the format of the policy.  Valid values are `0`, `1`,
      and `3`. Requests that specify an invalid value are rejected.  Any
      operation that affects conditional role bindings must specify version
      `3`. This requirement applies to the following operations:  * Getting a
      policy that includes a conditional role binding * Adding a conditional
      role binding to a policy * Changing a conditional role binding in a
      policy * Removing any role binding, with or without a condition, from a
      policy that includes conditions  **Important:** If you use IAM
      Conditions, you must include the `etag` field whenever you call
      `setIamPolicy`. If you omit this field, then IAM allows you to overwrite
      a version `3` policy with a version `1` policy, and all of the
      conditions in the version `3` policy are lost.  If a policy does not
      include any conditions, operations on that policy may specify any valid
      version or leave the field unset.  To learn which resources support
      conditions in their IAM policies, see the [IAM
      documentation](https://cloud.google.com/iam/help/conditions/resource-
      policies).
  """

  auditConfigs = _messages.MessageField('AuditConfig', 1, repeated=True)
  bindings = _messages.MessageField('Binding', 2, repeated=True)
  etag = _messages.BytesField(3)
  rules = _messages.MessageField('Rule', 4, repeated=True)
  version = _messages.IntegerField(5, variant=_messages.Variant.INT32)


class PollingOptions(_messages.Message):
  r"""PollingOptions message type.

  Fields:
    diagnostics: An array of diagnostics to be collected by Deployment
      Manager, these diagnostics will be displayed to the user.
    failCondition: JsonPath expression that determines if the request failed.
    finishCondition: JsonPath expression that determines if the request is
      completed.
    pollingLink: JsonPath expression that evaluates to string, it indicates
      where to poll.
    targetLink: JsonPath expression, after polling is completed, indicates
      where to fetch the resource.
  """

  diagnostics = _messages.MessageField('Diagnostic', 1, repeated=True)
  failCondition = _messages.StringField(2)
  finishCondition = _messages.StringField(3)
  pollingLink = _messages.StringField(4)
  targetLink = _messages.StringField(5)


class QuotaExceededInfo(_messages.Message):
  r"""Additional details for quota exceeded error for resource quota.

  Fields:
    dimensions: The map holding related quota dimensions.
    limit: Current effective quota limit. The limit's unit depends on the
      quota type or metric.
    limitName: The name of the quota limit.
    metricName: The Compute Engine quota metric name.
  """

  dimensions = _messages.MessageField('QuotaExceededInfoDimensionsEntry', 1, repeated=True)
  limit = _messages.FloatField(2)
  limitName = _messages.StringField(3)
  metricName = _messages.StringField(4)


class QuotaExceededInfoDimensionsEntry(_messages.Message):
  r"""A QuotaExceededInfoDimensionsEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class Resource(_messages.Message):
  r"""Resource message type.

  Messages:
    WarningsValueListEntry: A WarningsValueListEntry object.

  Fields:
    accessControl: The Access Control Policy set on this resource.
    finalProperties: Output only. The evaluated properties of the resource
      with references expanded. Returned as serialized YAML.
    id: A string attribute.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    lastUsedCredential: Output only. The last used credential that
      successfully created/updated the resource.
    manifest: Output only. URL of the manifest representing the current
      configuration of this resource.
    name: Output only. The name of the resource as it appears in the YAML
      config.
    properties: Output only. The current properties of the resource before any
      references have been filled in. Returned as serialized YAML.
    runtimePolicies: Output only. In case this is an action, it will show the
      runtimePolicies on which this action will run in the deployment
    type: Output only. The type of the resource, for example
      `compute.v1.instance`, or `cloudfunctions.v1beta1.function`.
    update: Output only. If Deployment Manager is currently updating or
      previewing an update to this resource, the updated configuration appears
      here.
    updateTime: Output only. Update timestamp in RFC3339 text format.
    url: Output only. The URL of the actual resource.
    warnings: Output only. If warning messages are generated during processing
      of this resource, this field will be populated.
  """

  class WarningsValueListEntry(_messages.Message):
    r"""A WarningsValueListEntry object.

    Messages:
      DataValueListEntry: A DataValueListEntry object.

    Fields:
      code: [Output Only] A warning code, if applicable. For example, Compute
        Engine returns NO_RESULTS_ON_PAGE if there are no results in the
        response.
      data: [Output Only] Metadata about this warning in key: value format.
        For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
      message: [Output Only] A human-readable description of the warning code.
    """

    class DataValueListEntry(_messages.Message):
      r"""A DataValueListEntry object.

      Fields:
        key: [Output Only] A key that provides more detail on the warning
          being returned. For example, for warnings where there are no results
          in a list request for a particular zone, this key might be scope and
          the key value might be the zone name. Other examples might be a key
          indicating a deprecated resource and a suggested replacement, or a
          warning about invalid network settings (for example, if an instance
          attempts to perform IP forwarding but is not enabled for IP
          forwarding).
        value: [Output Only] A warning data value corresponding to the key.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    code = _messages.StringField(1)
    data = _messages.MessageField('DataValueListEntry', 2, repeated=True)
    message = _messages.StringField(3)

  accessControl = _messages.MessageField('ResourceAccessControl', 1)
  finalProperties = _messages.StringField(2)
  id = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(4)
  lastUsedCredential = _messages.MessageField('Credential', 5)
  manifest = _messages.StringField(6)
  name = _messages.StringField(7)
  properties = _messages.StringField(8)
  runtimePolicies = _messages.StringField(9, repeated=True)
  type = _messages.StringField(10)
  update = _messages.MessageField('ResourceUpdate', 11)
  updateTime = _messages.StringField(12)
  url = _messages.StringField(13)
  warnings = _messages.MessageField('WarningsValueListEntry', 14, repeated=True)


class ResourceAccessControl(_messages.Message):
  r"""The access controls set on the resource.

  Fields:
    gcpIamPolicy: The GCP IAM Policy to set on the resource.
  """

  gcpIamPolicy = _messages.StringField(1)


class ResourceUpdate(_messages.Message):
  r"""ResourceUpdate message type.

  Messages:
    ErrorValue: Output only. If errors are generated during update of the
      resource, this field will be populated.
    WarningsValueListEntry: A WarningsValueListEntry object.

  Fields:
    accessControl: The Access Control Policy to set on this resource after
      updating the resource itself.
    credential: Output only. The credential that will be used
      creating/updating this resource.
    error: Output only. If errors are generated during update of the resource,
      this field will be populated.
    finalProperties: Output only. The expanded properties of the resource with
      reference values expanded. Returned as serialized YAML.
    intent: Output only. The intent of the resource: `PREVIEW`, `UPDATE`, or
      `CANCEL`.
    manifest: Output only. URL of the manifest representing the update
      configuration of this resource.
    properties: Output only. The set of updated properties for this resource,
      before references are expanded. Returned as serialized YAML.
    runtimePolicies: Output only. In case this is an action, it will show the
      runtimePolicies that this action will have after updating the
      deployment.
    state: Output only. The state of the resource.
    warnings: Output only. If warning messages are generated during processing
      of this resource, this field will be populated.
  """

  class ErrorValue(_messages.Message):
    r"""Output only. If errors are generated during update of the resource,
    this field will be populated.

    Messages:
      ErrorsValueListEntry: A ErrorsValueListEntry object.

    Fields:
      errors: [Output Only] The array of errors encountered while processing
        this operation.
    """

    class ErrorsValueListEntry(_messages.Message):
      r"""A ErrorsValueListEntry object.

      Messages:
        ErrorDetailsValueListEntry: A ErrorDetailsValueListEntry object.

      Fields:
        code: [Output Only] The error type identifier for this error.
        errorDetails: [Output Only] An optional list of messages that contain
          the error details. There is a set of defined message types to use
          for providing details.The syntax depends on the error code. For
          example, QuotaExceededInfo will have details when the error code is
          QUOTA_EXCEEDED.
        location: [Output Only] Indicates the field in the request that caused
          the error. This property is optional.
        message: [Output Only] An optional, human-readable error message.
      """

      class ErrorDetailsValueListEntry(_messages.Message):
        r"""A ErrorDetailsValueListEntry object.

        Fields:
          errorInfo: A ErrorInfo attribute.
          help: A Help attribute.
          localizedMessage: A LocalizedMessage attribute.
          quotaInfo: A QuotaExceededInfo attribute.
        """

        errorInfo = _messages.MessageField('ErrorInfo', 1)
        help = _messages.MessageField('Help', 2)
        localizedMessage = _messages.MessageField('LocalizedMessage', 3)
        quotaInfo = _messages.MessageField('QuotaExceededInfo', 4)

      code = _messages.StringField(1)
      errorDetails = _messages.MessageField('ErrorDetailsValueListEntry', 2, repeated=True)
      location = _messages.StringField(3)
      message = _messages.StringField(4)

    errors = _messages.MessageField('ErrorsValueListEntry', 1, repeated=True)

  class WarningsValueListEntry(_messages.Message):
    r"""A WarningsValueListEntry object.

    Messages:
      DataValueListEntry: A DataValueListEntry object.

    Fields:
      code: [Output Only] A warning code, if applicable. For example, Compute
        Engine returns NO_RESULTS_ON_PAGE if there are no results in the
        response.
      data: [Output Only] Metadata about this warning in key: value format.
        For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
      message: [Output Only] A human-readable description of the warning code.
    """

    class DataValueListEntry(_messages.Message):
      r"""A DataValueListEntry object.

      Fields:
        key: [Output Only] A key that provides more detail on the warning
          being returned. For example, for warnings where there are no results
          in a list request for a particular zone, this key might be scope and
          the key value might be the zone name. Other examples might be a key
          indicating a deprecated resource and a suggested replacement, or a
          warning about invalid network settings (for example, if an instance
          attempts to perform IP forwarding but is not enabled for IP
          forwarding).
        value: [Output Only] A warning data value corresponding to the key.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    code = _messages.StringField(1)
    data = _messages.MessageField('DataValueListEntry', 2, repeated=True)
    message = _messages.StringField(3)

  accessControl = _messages.MessageField('ResourceAccessControl', 1)
  credential = _messages.MessageField('Credential', 2)
  error = _messages.MessageField('ErrorValue', 3)
  finalProperties = _messages.StringField(4)
  intent = _messages.StringField(5)
  manifest = _messages.StringField(6)
  properties = _messages.StringField(7)
  runtimePolicies = _messages.StringField(8, repeated=True)
  state = _messages.StringField(9)
  warnings = _messages.MessageField('WarningsValueListEntry', 10, repeated=True)


class ResourcesListResponse(_messages.Message):
  r"""A response containing a partial list of resources and a page token used
  to build the next request if the request has been truncated.

  Fields:
    nextPageToken: A token used to continue a truncated list request.
    resources: Resources contained in this list response.
  """

  nextPageToken = _messages.StringField(1)
  resources = _messages.MessageField('Resource', 2, repeated=True)


class Rule(_messages.Message):
  r"""A rule to be applied in a Policy.

  Fields:
    action: Required
    conditions: Additional restrictions that must be met. All conditions must
      pass for the rule to match.
    description: Human-readable description of the rule.
    ins: If one or more 'in' clauses are specified, the rule matches if the
      PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
    logConfigs: The config returned to callers of CheckPolicy for any entries
      that match the LOG action.
    notIns: If one or more 'not_in' clauses are specified, the rule matches if
      the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
    permissions: A permission is a string of form '..' (e.g.,
      'storage.buckets.list'). A value of '*' matches all permissions, and a
      verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
  """

  action = _messages.StringField(1)
  conditions = _messages.MessageField('Condition', 2, repeated=True)
  description = _messages.StringField(3)
  ins = _messages.StringField(4, repeated=True)
  logConfigs = _messages.MessageField('LogConfig', 5, repeated=True)
  notIns = _messages.StringField(6, repeated=True)
  permissions = _messages.StringField(7, repeated=True)


class ServiceAccount(_messages.Message):
  r"""Service Account used as a credential.

  Fields:
    email: The IAM service account email address like
      test@myproject.iam.gserviceaccount.com
  """

  email = _messages.StringField(1)


class StandardQueryParameters(_messages.Message):
  r"""Query parameters accepted by all methods.

  Enums:
    AltValueValuesEnum: Data format for the response.

  Fields:
    alt: Data format for the response.
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: An opaque string that represents a user for quota purposes.
      Must not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    userIp: Deprecated. Please use quotaUser instead.
  """

  class AltValueValuesEnum(_messages.Enum):
    r"""Data format for the response.

    Values:
      json: Responses with Content-Type of application/json
    """
    json = 0

  alt = _messages.EnumField('AltValueValuesEnum', 1, default='json')
  fields = _messages.StringField(2)
  key = _messages.StringField(3)
  oauth_token = _messages.StringField(4)
  prettyPrint = _messages.BooleanField(5, default=True)
  quotaUser = _messages.StringField(6)
  trace = _messages.StringField(7)
  userIp = _messages.StringField(8)


class TargetConfiguration(_messages.Message):
  r"""TargetConfiguration message type.

  Fields:
    config: The configuration to use for this deployment.
    imports: Specifies any files to import for this configuration. This can be
      used to import templates or other files. For example, you might import a
      text file in order to use the file in a template.
  """

  config = _messages.MessageField('ConfigFile', 1)
  imports = _messages.MessageField('ImportFile', 2, repeated=True)


class TemplateContents(_messages.Message):
  r"""Files that make up the template contents of a template type.

  Fields:
    imports: Import files referenced by the main template.
    interpreter: Which interpreter (python or jinja) should be used during
      expansion.
    mainTemplate: The filename of the mainTemplate
    schema: The contents of the template schema.
    template: The contents of the main template file.
  """

  imports = _messages.MessageField('ImportFile', 1, repeated=True)
  interpreter = _messages.StringField(2)
  mainTemplate = _messages.StringField(3)
  schema = _messages.StringField(4)
  template = _messages.StringField(5)


class TestPermissionsRequest(_messages.Message):
  r"""A TestPermissionsRequest object.

  Fields:
    permissions: The set of permissions to check for the 'resource'.
      Permissions with wildcards (such as '*' or 'storage.*') are not allowed.
  """

  permissions = _messages.StringField(1, repeated=True)


class TestPermissionsResponse(_messages.Message):
  r"""A TestPermissionsResponse object.

  Fields:
    permissions: A subset of `TestPermissionsRequest.permissions` that the
      caller is allowed.
  """

  permissions = _messages.StringField(1, repeated=True)


class Type(_messages.Message):
  r"""A resource type supported by Deployment Manager.

  Fields:
    configurableService: Base Type (configurable service) that backs this
      Type.
    description: An optional textual description of the resource; provided by
      the client when the resource is created.
    id: A string attribute.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    labels: Map of labels; provided by the client when the resource is created
      or updated. Specifically: Label keys must be between 1 and 63 characters
      long and must conform to the following regular expression:
      `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63
      characters long and must conform to the regular expression
      `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
    name: Name of the type.
    operation: Output only. The Operation that most recently ran, or is
      currently running, on this type.
    selfLink: Output only. Server defined URL for the resource.
  """

  configurableService = _messages.MessageField('ConfigurableService', 1)
  description = _messages.StringField(2)
  id = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(4)
  labels = _messages.MessageField('TypeLabelEntry', 5, repeated=True)
  name = _messages.StringField(6)
  operation = _messages.MessageField('Operation', 7)
  selfLink = _messages.StringField(8)


class TypeInfo(_messages.Message):
  r"""Type Information. Contains detailed information about a composite type,
  base type, or base type with specific collection.

  Fields:
    description: The description of the type.
    documentationLink: For swagger 2.0 externalDocs field will be used. For
      swagger 1.2 this field will be empty.
    kind: Output only. Type of the output. Always `deploymentManager#TypeInfo`
      for TypeInfo.
    name: The base type or composite type name.
    schema: For base types with a collection, we return a schema and
      documentation link For template types, we return only a schema
    selfLink: Output only. Self link for the type provider.
    title: The title on the API descriptor URL provided.
  """

  description = _messages.StringField(1)
  documentationLink = _messages.StringField(2)
  kind = _messages.StringField(3)
  name = _messages.StringField(4)
  schema = _messages.MessageField('TypeInfoSchemaInfo', 5)
  selfLink = _messages.StringField(6)
  title = _messages.StringField(7)


class TypeInfoSchemaInfo(_messages.Message):
  r"""TypeInfoSchemaInfo message type.

  Fields:
    input: The properties that this composite type or base type collection
      accept as input, represented as a json blob, format is: JSON Schema
      Draft V4
    output: The properties that this composite type or base type collection
      exposes as output, these properties can be used for references,
      represented as json blob, format is: JSON Schema Draft V4
  """

  input = _messages.StringField(1)
  output = _messages.StringField(2)


class TypeLabelEntry(_messages.Message):
  r"""A TypeLabelEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class TypeProvider(_messages.Message):
  r"""A type provider that describes a service-backed Type.

  Fields:
    collectionOverrides: Allows resource handling overrides for specific
      collections
    credential: Credential used when interacting with this type.
    customCertificateAuthorityRoots: List of up to 2 custom certificate
      authority roots to use for TLS authentication when making calls on
      behalf of this type provider. If set, TLS authentication will
      exclusively use these roots instead of relying on publicly trusted
      certificate authorities when validating TLS certificate authenticity.
      The certificates must be in base64-encoded PEM format. The maximum size
      of each certificate must not exceed 10KB.
    description: An optional textual description of the resource; provided by
      the client when the resource is created.
    descriptorUrl: Descriptor Url for the this type provider.
    id: Output only. Unique identifier for the resource defined by the server.
    insertTime: Output only. Creation timestamp in RFC3339 text format.
    labels: Map of labels; provided by the client when the resource is created
      or updated. Specifically: Label keys must be between 1 and 63 characters
      long and must conform to the following regular expression:
      `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63
      characters long and must conform to the regular expression
      `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
    name: Name of the resource; provided by the client when the resource is
      created. The name must be 1-63 characters long, and comply with RFC1035.
      Specifically, the name must be 1-63 characters long and match the
      regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
      character must be a lowercase letter, and all following characters must
      be a dash, lowercase letter, or digit, except the last character, which
      cannot be a dash.
    operation: Output only. The Operation that most recently ran, or is
      currently running, on this type provider.
    options: Options to apply when handling any resources in this service.
    selfLink: Output only. Self link for the type provider.
  """

  collectionOverrides = _messages.MessageField('CollectionOverride', 1, repeated=True)
  credential = _messages.MessageField('Credential', 2)
  customCertificateAuthorityRoots = _messages.StringField(3, repeated=True)
  description = _messages.StringField(4)
  descriptorUrl = _messages.StringField(5)
  id = _messages.IntegerField(6, variant=_messages.Variant.UINT64)
  insertTime = _messages.StringField(7)
  labels = _messages.MessageField('TypeProviderLabelEntry', 8, repeated=True)
  name = _messages.StringField(9)
  operation = _messages.MessageField('Operation', 10)
  options = _messages.MessageField('Options', 11)
  selfLink = _messages.StringField(12)


class TypeProviderLabelEntry(_messages.Message):
  r"""A TypeProviderLabelEntry object.

  Fields:
    key: A string attribute.
    value: A string attribute.
  """

  key = _messages.StringField(1)
  value = _messages.StringField(2)


class TypeProvidersListResponse(_messages.Message):
  r"""A response that returns all Type Providers supported by Deployment
  Manager

  Fields:
    nextPageToken: A token used to continue a truncated list request.
    typeProviders: Output only. A list of resource type providers supported by
      Deployment Manager.
  """

  nextPageToken = _messages.StringField(1)
  typeProviders = _messages.MessageField('TypeProvider', 2, repeated=True)


class TypeProvidersListTypesResponse(_messages.Message):
  r"""TypeProvidersListTypesResponse message type.

  Fields:
    nextPageToken: A token used to continue a truncated list request.
    types: Output only. A list of resource type info.
  """

  nextPageToken = _messages.StringField(1)
  types = _messages.MessageField('TypeInfo', 2, repeated=True)


class TypesListResponse(_messages.Message):
  r"""A response that returns all Types supported by Deployment Manager

  Fields:
    nextPageToken: A token used to continue a truncated list request.
    types: Output only. A list of resource types supported by Deployment
      Manager.
  """

  nextPageToken = _messages.StringField(1)
  types = _messages.MessageField('Type', 2, repeated=True)


class ValidationOptions(_messages.Message):
  r"""Options for how to validate and process properties on a resource.

  Fields:
    schemaValidation: Customize how deployment manager will validate the
      resource against schema errors.
    undeclaredProperties: Specify what to do with extra properties when
      executing a request.
  """

  schemaValidation = _messages.StringField(1)
  undeclaredProperties = _messages.StringField(2)


