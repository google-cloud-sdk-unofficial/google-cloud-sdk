{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "cloudbuild:v2",
  "name": "cloudbuild",
  "canonicalName": "Cloud Build",
  "version": "v2",
  "revision": "0",
  "title": "Cloud Build API",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "protocol": "rest",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "schemas": {
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "properties": {
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "type": "object",
      "properties": {
      }
    },
    "Connection": {
      "id": "Connection",
      "description": "A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Server or GitLab.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Immutable. The resource name of the connection, in the format `projects\/{project}\/locations\/{location}\/connections\/{connection_id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Server assigned timestamp for when the connection was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Server assigned timestamp for when the connection was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "githubConfig": {
          "description": "Configuration for connections to github.com.",
          "$ref": "GitHubConfig"
        },
        "githubEnterpriseConfig": {
          "description": "Configuration for connections to an instance of GitHub Enterprise.",
          "$ref": "GitHubEnterpriseConfig"
        },
        "installationState": {
          "description": "Output only. Installation state of the Connection.",
          "readOnly": true,
          "$ref": "InstallationState"
        },
        "disabled": {
          "description": "If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.",
          "type": "boolean"
        },
        "reconciling": {
          "description": "Output only. Set to true when the connection is being set up or updated in the background.",
          "readOnly": true,
          "type": "boolean"
        },
        "annotations": {
          "description": "Allows clients to store small amounts of arbitrary data.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
          "type": "string"
        }
      }
    },
    "GitHubConfig": {
      "id": "GitHubConfig",
      "description": "Configuration for connections to github.com.",
      "type": "object",
      "properties": {
        "authorizerCredential": {
          "description": "OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.",
          "$ref": "OAuthCredential"
        },
        "appInstallationId": {
          "description": "GitHub App installation id.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "OAuthCredential": {
      "id": "OAuthCredential",
      "description": "Represents an OAuth token of the account that authorized the Connection, and associated metadata.",
      "type": "object",
      "properties": {
        "oauthTokenSecretVersion": {
          "description": "A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects\/*\/secrets\/*\/versions\/*`.",
          "type": "string"
        },
        "username": {
          "description": "The username associated to this token.",
          "type": "string"
        }
      }
    },
    "GitHubEnterpriseConfig": {
      "id": "GitHubEnterpriseConfig",
      "description": "Configuration for connections to an instance of GitHub Enterprise.",
      "type": "object",
      "properties": {
        "hostUri": {
          "description": "Required. The URI of the GitHub Enterprise host this connection is for.",
          "type": "string"
        },
        "apiKey": {
          "description": "Required. API Key used for authentication of webhook events.",
          "type": "string"
        },
        "appId": {
          "description": "Id of the GitHub App created from the manifest.",
          "type": "string",
          "format": "int64"
        },
        "appSlug": {
          "description": "The URL-friendly name of the GitHub App.",
          "type": "string"
        },
        "privateKeySecretVersion": {
          "description": "SecretManager resource containing the private key of the GitHub App, formatted as `projects\/*\/secrets\/*\/versions\/*`.",
          "type": "string"
        },
        "webhookSecretSecretVersion": {
          "description": "SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects\/*\/secrets\/*\/versions\/*`.",
          "type": "string"
        },
        "oauthSecretSecretVersion": {
          "description": "SecretManager resource containing the OAuth secret of the GitHub App, formatted as `projects\/*\/secrets\/*\/versions\/*`.",
          "type": "string"
        },
        "oauthClientIdSecretVersion": {
          "description": "SecretManager resource containing the OAuth client_id of the GitHub App, formatted as `projects\/*\/secrets\/*\/versions\/*`.",
          "type": "string"
        },
        "authorizerCredential": {
          "description": "OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account The OAuth token must be tied to the Cloud Build GitHub App.",
          "$ref": "OAuthCredential"
        },
        "appInstallationId": {
          "description": "ID of the installation of the GitHub App.",
          "type": "string",
          "format": "int64"
        },
        "serviceDirectoryConfig": {
          "description": "Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.",
          "$ref": "ServiceDirectoryConfig"
        },
        "sslCa": {
          "description": "SSL certificate to use for requests to GitHub Enterprise.",
          "type": "string"
        },
        "serverVersion": {
          "description": "Output only. GitHub Enterprise version installed at the host_uri.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ServiceDirectoryConfig": {
      "id": "ServiceDirectoryConfig",
      "description": "ServiceDirectoryConfig represents Service Directory configuration for a connection.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Required. The Service Directory service name. Format: projects\/{project}\/locations\/{location}\/namespaces\/{namespace}\/services\/{service}.",
          "type": "string"
        }
      }
    },
    "InstallationState": {
      "id": "InstallationState",
      "description": "Describes stage and necessary actions to be taken by the user to complete the installation. Used for GitHub and GitHub Enterprise based connections.",
      "type": "object",
      "properties": {
        "stage": {
          "description": "Output only. Current step of the installation process.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "No stage specified.",
            "Only for GitHub Enterprise. An App creation has been requested. The user needs to confirm the creation in their GitHub enterprise host.",
            "User needs to authorize the GitHub (or Enterprise) App via OAuth.",
            "User needs to follow the link to install the GitHub (or Enterprise) App.",
            "Installation process has been completed."
          ],
          "enum": [
            "STAGE_UNSPECIFIED",
            "PENDING_CREATE_APP",
            "PENDING_USER_OAUTH",
            "PENDING_INSTALL_APP",
            "COMPLETE"
          ]
        },
        "message": {
          "description": "Output only. Message of what the user should do next to continue the installation. Empty string if the installation is already complete.",
          "readOnly": true,
          "type": "string"
        },
        "actionUri": {
          "description": "Output only. Link to follow for next action. Empty string if the installation is already complete.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "ListConnectionsResponse": {
      "id": "ListConnectionsResponse",
      "description": "Message for response to listing Connections.",
      "type": "object",
      "properties": {
        "connections": {
          "description": "The list of Connections.",
          "type": "array",
          "items": {
            "$ref": "Connection"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "Repository": {
      "id": "Repository",
      "description": "A repository associated to a parent connection.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Immutable. Resource name of the repository, in the format `projects\/*\/locations\/*\/connections\/*\/repositories\/*`.",
          "type": "string"
        },
        "remoteUri": {
          "description": "Required. Git Clone HTTPS URI.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Server assigned timestamp for when the connection was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Server assigned timestamp for when the connection was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "annotations": {
          "description": "Allows clients to store small amounts of arbitrary data.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
          "type": "string"
        }
      }
    },
    "ListRepositoriesResponse": {
      "id": "ListRepositoriesResponse",
      "description": "Message for response to listing Repositories.",
      "type": "object",
      "properties": {
        "repositories": {
          "description": "The list of Repositories.",
          "type": "array",
          "items": {
            "$ref": "Repository"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "AccessReadWriteTokenRequest": {
      "id": "AccessReadWriteTokenRequest",
      "description": "Message for fetching SCM read\/write token.",
      "type": "object",
      "properties": {
      }
    },
    "AccessReadWriteTokenResponse": {
      "id": "AccessReadWriteTokenResponse",
      "description": "Message for responding to get read\/write token.",
      "type": "object",
      "properties": {
        "token": {
          "description": "The token content.",
          "type": "string"
        },
        "expirationTime": {
          "description": "Expiration timestamp. Can be empty if unknown.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "FetchReadWriteTokenRequest": {
      "id": "FetchReadWriteTokenRequest",
      "description": "Message for fetching SCM read\/write token.",
      "type": "object",
      "properties": {
      }
    },
    "FetchReadWriteTokenResponse": {
      "id": "FetchReadWriteTokenResponse",
      "description": "Message for responding to get read\/write token.",
      "type": "object",
      "properties": {
        "token": {
          "description": "The token content.",
          "type": "string"
        },
        "expirationTime": {
          "description": "Expiration timestamp. Can be empty if unknown or non-expiring.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "FetchReadTokenRequest": {
      "id": "FetchReadTokenRequest",
      "description": "Message for fetching SCM read token.",
      "type": "object",
      "properties": {
      }
    },
    "FetchReadTokenResponse": {
      "id": "FetchReadTokenResponse",
      "description": "Message for responding to get read token.",
      "type": "object",
      "properties": {
        "token": {
          "description": "The token content.",
          "type": "string"
        },
        "expirationTime": {
          "description": "Expiration timestamp. Can be empty if unknown or non-expiring.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "AccessReadTokenRequest": {
      "id": "AccessReadTokenRequest",
      "description": "Message for getting SCM read token.",
      "type": "object",
      "properties": {
      }
    },
    "AccessReadTokenResponse": {
      "id": "AccessReadTokenResponse",
      "description": "Message for responding to get read token.",
      "type": "object",
      "properties": {
        "token": {
          "description": "The token content.",
          "type": "string"
        },
        "expirationTime": {
          "description": "Expiration timestamp. Can be empty if unknown.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "HttpBody": {
      "id": "HttpBody",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { \/\/ A unique request id. string request_id = 1; \/\/ The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request\/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "FetchLinkableRepositoriesResponse": {
      "id": "FetchLinkableRepositoriesResponse",
      "description": "Response message for FetchLinkableRepositories.",
      "type": "object",
      "properties": {
        "repositories": {
          "description": "repositories ready to be created.",
          "type": "array",
          "items": {
            "$ref": "Repository"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "Workflow": {
      "id": "Workflow",
      "description": "Message describing Workflow object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Format: `projects\/{project}\/locations\/{location}\/workflows\/{workflow}`",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. A unique identifier for the `Workflow`.",
          "readOnly": true,
          "type": "string"
        },
        "secrets": {
          "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsCloudbuildV2SecretManagerSecret"
          }
        },
        "resources": {
          "description": "Resources referenceable within a workflow.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Resource"
          }
        },
        "pipelineSpec": {
          "description": "Fields from both the Workflow and the PipelineSpec will be used to form the full PipelineRun.",
          "$ref": "PipelineSpec"
        },
        "bundle": {
          "description": "A Tekton Bundle is an OCI Image that Tekton understands. OCI is the spec for container images that docker and others (such as Tekton Bundles) follow. This field deprecated; please use `ref` instead.",
          "type": "string"
        },
        "ref": {
          "description": "PipelineRef refer to a specific instance of a Pipeline.",
          "$ref": "PipelineRef"
        },
        "params": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "ParamSpec"
          }
        },
        "serviceAccount": {
          "description": "If omitted, the default Cloud Build Service Account is used instead. Format: `projects\/{project}\/locations\/{location}\/serviceAccounts\/{serviceAccount}`",
          "type": "string"
        },
        "options": {
          "description": "Workflow runs can be modified through several Workflow options.",
          "$ref": "WorkflowOptions"
        },
        "workspaces": {
          "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.",
          "type": "array",
          "items": {
            "$ref": "WorkspaceBinding"
          }
        },
        "labels": {
          "description": "Map of key-value pairs of user-defined labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createTime": {
          "description": "Output only. Server assigned timestamp for when the workflow was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Server assigned timestamp for when the workflow was last updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "deleteTime": {
          "description": "Output only. Server assigned timestamp for when the workflow was deleted.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "annotations": {
          "description": "User annotations. See https:\/\/google.aip.dev\/128#annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "description": "Needed for declarative-friendly resources.",
          "type": "string"
        },
        "workflowTriggers": {
          "description": "The Workflow triggers that can fire the workflow.",
          "type": "array",
          "items": {
            "$ref": "WorkflowTrigger"
          }
        }
      }
    },
    "GoogleDevtoolsCloudbuildV2SecretManagerSecret": {
      "id": "GoogleDevtoolsCloudbuildV2SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object",
      "properties": {
        "secretVersion": {
          "description": "Resource name of the SecretVersion. In format: projects\/*\/secrets\/*\/versions\/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret.",
          "type": "string"
        }
      }
    },
    "Resource": {
      "id": "Resource",
      "description": "Resource referenceable within a workflow.",
      "type": "object",
      "properties": {
        "secret": {
          "description": "Secret Manager Secret.",
          "$ref": "GoogleDevtoolsCloudbuildV2SecretManagerSecret"
        },
        "url": {
          "description": "SCM Repo URL.",
          "type": "string"
        },
        "repo": {
          "description": "Resource name of v2 GCB repo.",
          "type": "string"
        },
        "topic": {
          "description": "Resource name of PubSub topic.",
          "type": "string"
        }
      }
    },
    "PipelineSpec": {
      "id": "PipelineSpec",
      "description": "PipelineSpec defines the desired state of Pipeline.",
      "type": "object",
      "properties": {
        "tasks": {
          "description": "List of Tasks that execute when this Pipeline is run.",
          "type": "array",
          "items": {
            "$ref": "PipelineTask"
          }
        },
        "params": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "ParamSpec"
          }
        },
        "workspaces": {
          "description": "Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.",
          "type": "array",
          "items": {
            "$ref": "PipelineWorkspaceDeclaration"
          }
        },
        "finallyTasks": {
          "description": "List of Tasks that execute just before leaving the Pipeline i.e. either after all Tasks are finished executing successfully or after a failure which would result in ending the Pipeline.",
          "type": "array",
          "items": {
            "$ref": "PipelineTask"
          }
        }
      }
    },
    "PipelineTask": {
      "id": "PipelineTask",
      "description": "PipelineTask defines a task in a Pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the task.",
          "type": "string"
        },
        "taskSpec": {
          "description": "Spec to instantiate this TaskRun.",
          "$ref": "EmbeddedTask"
        },
        "taskRef": {
          "description": "Reference to a specific instance of a task.",
          "$ref": "TaskRef"
        },
        "whenExpressions": {
          "description": "Conditions that need to be true for the task to run.",
          "type": "array",
          "items": {
            "$ref": "WhenExpression"
          }
        },
        "params": {
          "description": "Params is a list of parameter names and values.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "workspaces": {
          "description": "Workspaces maps workspaces from the pipeline spec to the workspaces declared in the Task.",
          "type": "array",
          "items": {
            "$ref": "WorkspacePipelineTaskBinding"
          }
        },
        "runAfter": {
          "description": "RunAfter is the list of PipelineTask names that should be executed before this Task executes. (Used to force a specific ordering in graph execution.)",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmbeddedTask": {
      "id": "EmbeddedTask",
      "description": "EmbeddedTask defines a Task that is embedded in a Pipeline.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Map of key-value pairs of user-defined labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "User annotations. See https:\/\/google.aip.dev\/128#annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "taskSpec": {
          "description": "Spec to instantiate this TaskRun.",
          "$ref": "TaskSpec"
        }
      }
    },
    "TaskSpec": {
      "id": "TaskSpec",
      "description": "TaskSpec contains the Spec to instantiate a TaskRun.",
      "type": "object",
      "properties": {
        "params": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "ParamSpec"
          }
        },
        "steps": {
          "description": "Steps of the task.",
          "type": "array",
          "items": {
            "$ref": "Step"
          }
        },
        "results": {
          "description": "Values that this Task can output.",
          "type": "array",
          "items": {
            "$ref": "TaskResult"
          }
        },
        "workspaces": {
          "description": "The volumes that this Task requires.",
          "type": "array",
          "items": {
            "$ref": "WorkspaceDeclaration"
          }
        },
        "description": {
          "description": "Description of the task.",
          "type": "string"
        },
        "sidecars": {
          "description": "Sidecars that run alongside the Task's step containers.",
          "type": "array",
          "items": {
            "$ref": "Sidecar"
          }
        },
        "volumes": {
          "description": "A collection of volumes that are available to mount into steps.",
          "type": "array",
          "items": {
            "$ref": "VolumeSource"
          }
        },
        "managedSidecars": {
          "description": "Sidecars that run alongside the Task\u2019s step containers that should be added to this Task.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default enum type; should not be used.",
              "Sidecar for a privileged docker daemon."
            ],
            "enum": [
              "MANAGED_SIDECAR_UNSPECIFIED",
              "PRIVILEGED_DOCKER_DAEMON"
            ]
          }
        }
      }
    },
    "ParamSpec": {
      "id": "ParamSpec",
      "description": "ParamSpec defines parameters needed beyond typed inputs (such as resources). Parameter values are provided by users as inputs on a TaskRun or PipelineRun.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the ParamSpec",
          "type": "string"
        },
        "description": {
          "description": "Description of the ParamSpec",
          "type": "string"
        },
        "type": {
          "description": "Type of ParamSpec",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Default",
            "Arrary type."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "STRING",
            "ARRAY"
          ]
        },
        "default": {
          "description": "The default value a parameter takes if no input value is supplied",
          "$ref": "ParamValue"
        }
      }
    },
    "ParamValue": {
      "id": "ParamValue",
      "description": "Parameter value.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of parameter.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Default",
            "Array type"
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "STRING",
            "ARRAY"
          ]
        },
        "stringVal": {
          "description": "Value of the parameter if type is string.",
          "type": "string"
        },
        "arrayVal": {
          "description": "Value of the parameter if type is array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Step": {
      "id": "Step",
      "description": "Step embeds the Container type, which allows it to include fields not provided by Container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the container specified as a DNS_LABEL.",
          "type": "string"
        },
        "image": {
          "description": "Docker image name.",
          "type": "string"
        },
        "args": {
          "description": "Arguments to the entrypoint.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workingDir": {
          "description": "Container's working directory.",
          "type": "string"
        },
        "env": {
          "description": "List of environment variables to set in the container.",
          "type": "array",
          "items": {
            "$ref": "EnvVar"
          }
        },
        "script": {
          "description": "The contents of an executable file to execute.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem.",
          "type": "array",
          "items": {
            "$ref": "VolumeMount"
          }
        }
      }
    },
    "EnvVar": {
      "id": "EnvVar",
      "description": "Environment variable.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the environment variable.",
          "type": "string"
        },
        "value": {
          "description": "Value of the environment variable.",
          "type": "string"
        }
      }
    },
    "VolumeMount": {
      "id": "VolumeMount",
      "description": "Pod volumes to mount into the container's filesystem.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified).",
          "type": "boolean"
        },
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted. Must not contain ':'.",
          "type": "string"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root).",
          "type": "string"
        }
      }
    },
    "TaskResult": {
      "id": "TaskResult",
      "description": "TaskResult used to describe the results of a task.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the result.",
          "type": "string"
        },
        "description": {
          "description": "Description of the result.",
          "type": "string"
        }
      }
    },
    "WorkspaceDeclaration": {
      "id": "WorkspaceDeclaration",
      "description": "WorkspaceDeclaration is a declaration of a volume that a Task requires.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name by which you can bind the volume at runtime.",
          "type": "string"
        },
        "description": {
          "description": "Description is a human readable description of this volume.",
          "type": "string"
        },
        "mountPath": {
          "description": "MountPath overrides the directory that the volume will be made available at.",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly dictates whether a mounted volume is writable.",
          "type": "boolean"
        }
      }
    },
    "Sidecar": {
      "id": "Sidecar",
      "description": "Sidecars run alongside the Task's step containers.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Sidecar.",
          "type": "string"
        },
        "image": {
          "description": "Docker image name.",
          "type": "string"
        },
        "args": {
          "description": "Arguments to the entrypoint.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workingDir": {
          "description": "Container's working directory.",
          "type": "string"
        },
        "env": {
          "description": "List of environment variables to set in the container.",
          "type": "array",
          "items": {
            "$ref": "EnvVar"
          }
        },
        "script": {
          "description": "The contents of an executable file to execute.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem.",
          "type": "array",
          "items": {
            "$ref": "VolumeMount"
          }
        },
        "securityContext": {
          "description": "Security options the container should be run with.",
          "$ref": "SecurityContext"
        }
      }
    },
    "SecurityContext": {
      "id": "SecurityContext",
      "description": "Security options the container should be run with.",
      "type": "object",
      "properties": {
        "privileged": {
          "description": "Run container in privileged mode.",
          "type": "boolean"
        }
      }
    },
    "VolumeSource": {
      "id": "VolumeSource",
      "description": "Volumes available to mount.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Volume. Must be a DNS_LABEL and unique within the pod. More info: https:\/\/kubernetes.io\/docs\/concepts\/overview\/working-with-objects\/names\/#names",
          "type": "string"
        },
        "emptyDir": {
          "description": "A temporary directory that shares a pod's lifetime.",
          "$ref": "EmptyDirVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "a Compute Engine Disk resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "GCEPersistentDiskVolumeSource"
        }
      }
    },
    "EmptyDirVolumeSource": {
      "id": "EmptyDirVolumeSource",
      "description": "Represents an empty Volume source.",
      "type": "object",
      "properties": {
      }
    },
    "GCEPersistentDiskVolumeSource": {
      "id": "GCEPersistentDiskVolumeSource",
      "description": "Represents a Compute Engine Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https:\/\/kubernetes.io\/docs\/concepts\/storage\/volumes#gcepersistentdisk",
      "type": "object",
      "properties": {
        "pdName": {
          "description": "Unique name of the PD resource in Compute Engine. Used to identify the disk.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount.",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name.",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "TaskRef": {
      "id": "TaskRef",
      "description": "TaskRef can be used to refer to a specific instance of a task. PipelineRef can be used to refer to a specific instance of a Pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the task.",
          "type": "string"
        },
        "bundle": {
          "description": "Bundle url reference to a Tekton Bundle.",
          "type": "string"
        }
      }
    },
    "WhenExpression": {
      "id": "WhenExpression",
      "description": "Conditions that need to be true for the task to run.",
      "type": "object",
      "properties": {
        "input": {
          "description": "Input is the string for guard checking which can be a static input or an output from a parent Task.",
          "type": "string"
        },
        "expressionOperator": {
          "description": "Operator that represents an Input's relationship to the values",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Input does not exist.",
            "Input equals values.",
            "Input double equals values.",
            "Input is in values.",
            "Input does not equal values.",
            "Input is not in values.",
            "Input exists.",
            "Input is greater than values.",
            "Input is less than values."
          ],
          "enum": [
            "EXPRESSION_OPERATOR_UNSPECIFIED",
            "DOES_NOT_EXIST",
            "EQUALS",
            "DOUBLE_EQUALS",
            "IN",
            "NOT_EQUALS",
            "NOT_IN",
            "EXISTS",
            "GREATER_THAN",
            "LESS_THAN"
          ]
        },
        "values": {
          "description": "Values is an array of strings, which is compared against the input, for guard checking.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Param": {
      "id": "Param",
      "description": "Param defined with name and value. PipelineRef can be used to refer to a specific instance of a Pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the parameter.",
          "type": "string"
        },
        "value": {
          "description": "Value of the parameter.",
          "$ref": "ParamValue"
        }
      }
    },
    "WorkspacePipelineTaskBinding": {
      "id": "WorkspacePipelineTaskBinding",
      "description": "WorkspacePipelineTaskBinding maps workspaces from the PipelineSpec to the workspaces declared in the Task.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the workspace as declared by the task.",
          "type": "string"
        },
        "workspace": {
          "description": "Name of the workspace declared by the pipeline.",
          "type": "string"
        }
      }
    },
    "PipelineWorkspaceDeclaration": {
      "id": "PipelineWorkspaceDeclaration",
      "description": "Workspaces declares a set of named workspaces that are expected to be provided by a PipelineRun.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of a workspace to be provided by a PipelineRun.",
          "type": "string"
        },
        "description": {
          "description": "Description is a human readable string describing how the workspace will be used in the Pipeline.",
          "type": "string"
        },
        "optional": {
          "description": "Optional marks a Workspace as not being required in PipelineRuns. By default this field is false and so declared workspaces are required.",
          "type": "boolean"
        }
      }
    },
    "PipelineRef": {
      "id": "PipelineRef",
      "description": "PipelineRef can be used to refer to a specific instance of a Pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Pipeline.",
          "type": "string"
        },
        "bundle": {
          "description": "Bundle url reference to a Tekton Bundle.",
          "type": "string"
        }
      }
    },
    "WorkflowOptions": {
      "id": "WorkflowOptions",
      "description": "Workflow runs can be modified through several Workflow options.",
      "type": "object",
      "properties": {
        "executionEnvironment": {
          "description": "Contains the workerpool.",
          "$ref": "ExecutionEnvironment"
        },
        "statusUpdateOptions": {
          "description": "How\/where status on the workflow is posted.",
          "$ref": "WorkflowStatusUpdateOptions"
        },
        "timeout": {
          "description": "Time after which the Workflow times out.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "ExecutionEnvironment": {
      "id": "ExecutionEnvironment",
      "description": "Contains the workerpool.",
      "type": "object",
      "properties": {
        "workerPool": {
          "description": "Required. The workerpool used to run the PipelineRun.",
          "type": "string"
        }
      }
    },
    "WorkflowStatusUpdateOptions": {
      "id": "WorkflowStatusUpdateOptions",
      "description": "Configure how\/where status is posted.",
      "type": "object",
      "properties": {
        "pubsubTopic": {
          "description": "Controls which Pub\/Sub topic is used to send status updates as a build progresses and terminates. Default: projects\/\/pub-sub\/topics\/cloud-build",
          "type": "string"
        },
        "repositoryStatus": {
          "description": "Options that specify additional information related to a Repo that should be sent in Pub\/Sub Notifications",
          "type": "string",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Include the event_source of the WorkflowTrigger that results in the PipelineRun\/TaskRun",
            "Include the GCL log url of the PipelineRun\/TaskRun in addition to the event source"
          ],
          "enum": [
            "REPOSITORY_STATUS_UNSPECIFIED",
            "REPOSITORY_STATUS_NAME",
            "REPOSITORY_STATUS_NAME_LOG"
          ]
        }
      }
    },
    "WorkspaceBinding": {
      "id": "WorkspaceBinding",
      "description": "WorkspaceBinding maps a workspace to a Volume. PipelineRef can be used to refer to a specific instance of a Pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the workspace.",
          "type": "string"
        },
        "emptyDir": {
          "description": "EmptyDir represents a temporary directory that shares a Task's lifetime.",
          "$ref": "EmptyDir"
        },
        "volumeClaimTemplate": {
          "description": "Template for a claim that will be created in the same namespace.",
          "$ref": "PersistentVolumeClaim"
        },
        "secret": {
          "description": "Secret Volume Source.",
          "$ref": "SecretVolumeSource"
        }
      }
    },
    "EmptyDir": {
      "id": "EmptyDir",
      "description": "Represents an empty directory",
      "type": "object",
      "properties": {
      }
    },
    "PersistentVolumeClaim": {
      "id": "PersistentVolumeClaim",
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "type": "object",
      "properties": {
        "spec": {
          "description": "Spec defines the desired characteristics of a volume requested by a pod author.",
          "$ref": "PersistentVolumeClaimSpec"
        }
      }
    },
    "PersistentVolumeClaimSpec": {
      "id": "PersistentVolumeClaimSpec",
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes.",
      "type": "object",
      "properties": {
        "accessModes": {
          "description": "Desired access modes the volume should have.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default enum type; should not be used.",
              "can be mounted in read\/write mode to exactly 1 host",
              "can be mounted in read-only mode to many hosts",
              "can be mounted in read\/write mode to many hosts"
            ],
            "enum": [
              "PERSISTENT_VOLUME_ACCESS_MODE_UNSPECIFIED",
              "READ_WRITE_ONCE",
              "READ_ONLY_MANY",
              "READ_WRITE_MANY"
            ]
          }
        },
        "resources": {
          "description": "The minimum resources the volume should have.",
          "$ref": "ResourceRequirements"
        }
      }
    },
    "ResourceRequirements": {
      "id": "ResourceRequirements",
      "description": "Compute resource requirements.",
      "type": "object",
      "properties": {
        "limits": {
          "description": "The maximum amount of compute resources allowed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requests": {
          "description": "The minimum amount of compute resources needed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SecretVolumeSource": {
      "id": "SecretVolumeSource",
      "description": "Secret Volume Source.",
      "type": "object",
      "properties": {
        "secretName": {
          "description": "Name of the secret referenced by the WorkspaceBinding.",
          "type": "string"
        },
        "secretVersion": {
          "description": "Output only. Resource name of the SecretVersion. In format: projects\/*\/secrets\/*\/versions\/*",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "WorkflowTrigger": {
      "id": "WorkflowTrigger",
      "description": "Workflow trigger within a Workflow.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Immutable. id given by the users to the Workflow.",
          "type": "string"
        },
        "eventSource": {
          "description": "Optional. The event source the WorkflowTrigger listens to.",
          "$ref": "EventSource"
        },
        "eventType": {
          "description": "Optional. The type of the events the WorkflowTrigger accepts.",
          "type": "string",
          "enumDescriptions": [
            "Default to ALL.",
            "All events.",
            "PR events.",
            "Push to branch events.",
            "Push to tag events."
          ],
          "enum": [
            "EVENTTYPE_UNSPECIFIED",
            "ALL",
            "PULL_REQUEST",
            "PUSH_BRANCH",
            "PUSH_TAG"
          ]
        },
        "createTime": {
          "description": "Output only. Creation time of the WorkflowTrigger.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Update time of the WorkflowTrigger.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "gitRef": {
          "description": "Optional. The Git ref matching the SCM repo branch\/tag.",
          "$ref": "GitRef"
        },
        "pullRequest": {
          "description": "Optional. The Pull request role and comment that triggers the Workflow.",
          "$ref": "PullRequest"
        },
        "custom": {
          "description": "The CEL filters that triggers the Workflow.",
          "type": "array",
          "items": {
            "$ref": "CEL"
          }
        },
        "uuid": {
          "description": "Output only. The internal id of the WorkflowTrigger.",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "Output only. The status of the WorkflowTrigger.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Defaults to ACTIVE.",
            "WorkflowTrigger is active.",
            "WorkflowTrigger is deactivated."
          ],
          "enum": [
            "STATUS_UNSPECIFIED",
            "ACTIVE",
            "DEACTIVATED"
          ]
        },
        "statusMessage": {
          "description": "Output only. The reason why WorkflowTrigger is deactivated.",
          "readOnly": true,
          "type": "string"
        },
        "params": {
          "description": "List of parameters associated with the WorkflowTrigger.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        }
      }
    },
    "EventSource": {
      "id": "EventSource",
      "description": "Event Source referenceable within a WorkflowTrigger.",
      "type": "object",
      "properties": {
        "id": {
          "description": "identification to Resource.",
          "type": "string"
        },
        "repository": {
          "description": "Output only. Resource name of GCB v2 repo.",
          "readOnly": true,
          "type": "string"
        },
        "subscription": {
          "description": "Output only. Resource name of PubSub subscription.",
          "readOnly": true,
          "type": "string"
        },
        "secret": {
          "description": "Output only. Secret Manager secret.",
          "readOnly": true,
          "$ref": "GoogleDevtoolsCloudbuildV2SecretManagerSecret"
        }
      }
    },
    "GitRef": {
      "id": "GitRef",
      "description": "Git ref configuration for filters.",
      "type": "object",
      "properties": {
        "nameRegex": {
          "description": "Regex to match the branch or tag of SCM.",
          "type": "string"
        },
        "inverse": {
          "description": "If true, the regex matching result is inversed.",
          "type": "boolean"
        }
      }
    },
    "PullRequest": {
      "id": "PullRequest",
      "description": "Pull request configuration for filters.",
      "type": "object",
      "properties": {
        "pusher": {
          "description": "Allowed PR role that triggers a Workflow.",
          "type": "string",
          "enumDescriptions": [
            "Default to OWNER_AND_COLLABORATOR.",
            "PR author are ownes and\/or collaborators of the SCM repo.",
            "PR author is the owner of the SCM repo.",
            "PR author can be everyone."
          ],
          "enum": [
            "PUSHER_UNSPECIFIED",
            "OWNER_AND_COLLABORATORS",
            "OWNER",
            "ALL_USERS"
          ]
        },
        "comment": {
          "description": "Comment that should be included to trigger a Workflow.",
          "type": "string"
        }
      }
    },
    "CEL": {
      "id": "CEL",
      "description": "Filters in CEL.",
      "type": "object",
      "properties": {
        "cel": {
          "description": "The filter logic in CEL.",
          "type": "string"
        },
        "notification": {
          "description": "A notification sent back to SCM if the cel program fails.",
          "type": "string"
        }
      }
    },
    "ListWorkflowsResponse": {
      "id": "ListWorkflowsResponse",
      "description": "Message for response to listing Workflows.",
      "type": "object",
      "properties": {
        "workflows": {
          "description": "The list of Workflows.",
          "type": "array",
          "items": {
            "$ref": "Workflow"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "RunWorkflowRequest": {
      "id": "RunWorkflowRequest",
      "description": "Message for running a Workflow.",
      "type": "object",
      "properties": {
        "params": {
          "description": "Run-time params.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "validateOnly": {
          "description": "When true, the query is validated only, but not executed.",
          "type": "boolean"
        },
        "etag": {
          "description": "Needed for declarative-friendly resources.",
          "type": "string"
        }
      }
    },
    "ListPipelineRunsResponse": {
      "id": "ListPipelineRunsResponse",
      "description": "Message for response to listing PipelineRuns",
      "type": "object",
      "properties": {
        "pipelineRuns": {
          "description": "The list of PipelineRun",
          "type": "array",
          "items": {
            "$ref": "PipelineRun"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "PipelineRun": {
      "id": "PipelineRun",
      "description": "Message describing PipelineRun object",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The `PipelineRun` name with format `projects\/{project}\/locations\/{location}\/pipelineRuns\/{pipeline_run}`",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. A unique identifier for the `PipelineRun`.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the `PipelineRun` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `PipelineRun` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "Map of key-value pairs of user-defined labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "User annotations. See https:\/\/google.aip.dev\/128#annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "workflow": {
          "description": "Output only. The Workflow used to create this PipelineRun.",
          "readOnly": true,
          "type": "string"
        },
        "workerPool": {
          "description": "Output only. The WorkerPool used to run this PipelineRun.",
          "readOnly": true,
          "type": "string"
        },
        "pipelineSpec": {
          "description": "PipelineSpec defines the desired state of Pipeline.",
          "$ref": "PipelineSpec"
        },
        "pipelineRef": {
          "description": "PipelineRef refer to a specific instance of a Pipeline.",
          "$ref": "PipelineRef"
        },
        "params": {
          "description": "Params is a list of parameter names and values.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "workspaces": {
          "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.",
          "type": "array",
          "items": {
            "$ref": "WorkspaceBinding"
          }
        },
        "timeout": {
          "description": "Time after which the Pipeline times out.",
          "type": "string",
          "format": "google-duration"
        },
        "serviceAccount": {
          "description": "Service account used in the Pipeline.",
          "type": "string"
        },
        "pipelineRunStatus": {
          "description": "Status of the PipelineRun.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Cancelled status."
          ],
          "enum": [
            "PIPELINE_RUN_STATUS_UNSPECIFIED",
            "PIPELINE_RUN_CANCELLED"
          ]
        },
        "conditions": {
          "description": "Output only. Kubernetes Conditions convention for PipelineRun status and error.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "startTime": {
          "description": "Output only. Time the pipeline is actually started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "completionTime": {
          "description": "Output only. Time the pipeline completed.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "taskRuns": {
          "description": "Output only. List of TaskRuns and their status.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "PipelineRunTaskRunStatus"
          }
        },
        "etag": {
          "description": "Needed for declarative-friendly resources.",
          "type": "string"
        },
        "timeouts": {
          "description": "Time after which the Pipeline times out. Currently three keys are accepted in the map pipeline, tasks and finally with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally",
          "$ref": "TimeoutFields"
        },
        "skippedTasks": {
          "description": "Output only. List of tasks that were skipped due to when expressions evaluating to false.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "SkippedTask"
          }
        },
        "resolvedPipelineSpec": {
          "description": "Output only. The exact PipelineSpec used to instantiate the run.",
          "readOnly": true,
          "$ref": "PipelineSpec"
        }
      }
    },
    "Condition": {
      "id": "Condition",
      "description": "Conditions defines a readiness condition for a Knative resource.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of condition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type indicating execution is still ongoing.",
            "Success",
            "Failure"
          ],
          "enum": [
            "UNKNOWN",
            "TRUE",
            "FALSE"
          ]
        },
        "severity": {
          "description": "Severity with which to treat failures of this type of condition.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Severity is warning.",
            "Severity is informational only."
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "WARNING",
            "INFO"
          ]
        },
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
          "type": "string",
          "format": "google-datetime"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        }
      }
    },
    "PipelineRunTaskRunStatus": {
      "id": "PipelineRunTaskRunStatus",
      "description": "PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status.",
      "type": "object",
      "properties": {
        "pipelineTaskName": {
          "description": "Name of the pipeline task.",
          "type": "string"
        },
        "status": {
          "description": "Status of the task run.",
          "$ref": "TaskRunStatus"
        }
      }
    },
    "TaskRunStatus": {
      "id": "TaskRunStatus",
      "description": "TaskRunStatus defines the status of TaskRun",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Output only. Kubernetes Conditions convention for PipelineRun status and error.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "startTime": {
          "description": "Output only. Time the task is actually started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "completionTime": {
          "description": "Output only. Time the task completed.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "steps": {
          "description": "Output only. Steps describes the state of each build step container.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "StepState"
          }
        },
        "taskSpec": {
          "description": "Spec for the task.",
          "$ref": "TaskSpec"
        },
        "sidecars": {
          "description": "Output only. State of each Sidecar.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "SidecarState"
          }
        },
        "taskRunResults": {
          "description": "Output only. List of results written out by the task's containers",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "TaskRunResult"
          }
        }
      }
    },
    "StepState": {
      "id": "StepState",
      "description": "StepState reports the results of running a step in a Task.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the StepState.",
          "type": "string"
        },
        "imageId": {
          "description": "Image ID of the StepState.",
          "type": "string"
        },
        "waiting": {
          "description": "Details about a waiting container",
          "$ref": "ContainerStateWaiting"
        },
        "running": {
          "description": "Details about a running container",
          "$ref": "ContainerStateRunning"
        },
        "terminated": {
          "description": "Details about a terminated container",
          "$ref": "ContainerStateTerminated"
        }
      }
    },
    "ContainerStateWaiting": {
      "id": "ContainerStateWaiting",
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "type": "object",
      "properties": {
        "reason": {
          "description": "Reason the container is not yet running.",
          "type": "string"
        },
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        }
      }
    },
    "ContainerStateRunning": {
      "id": "ContainerStateRunning",
      "description": "ContainerStateWaiting is a running state of a container.",
      "type": "object",
      "properties": {
        "startedAt": {
          "description": "Time at which the container was last (re-)started.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ContainerStateTerminated": {
      "id": "ContainerStateTerminated",
      "description": "ContainerStateWaiting is a terminated state of a container.",
      "type": "object",
      "properties": {
        "exitCode": {
          "description": "Exit status from the last termination of the container.",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "Reason from the last termination of the container",
          "type": "string"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "startedAt": {
          "description": "Time at which previous execution of the container started",
          "type": "string",
          "format": "google-datetime"
        },
        "finishedAt": {
          "description": "Time at which the container last terminated",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "SidecarState": {
      "id": "SidecarState",
      "description": "The state of a sidecar.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Sidecar.",
          "type": "string"
        },
        "containerName": {
          "description": "Name of the container.",
          "type": "string"
        },
        "imageId": {
          "description": "ID of the image.",
          "type": "string"
        },
        "waiting": {
          "description": "Details about a waiting container.",
          "$ref": "ContainerStateWaiting"
        },
        "running": {
          "description": "Details about a running container.",
          "$ref": "ContainerStateRunning"
        },
        "terminated": {
          "description": "Details about a terminated container.",
          "$ref": "ContainerStateTerminated"
        }
      }
    },
    "TaskRunResult": {
      "id": "TaskRunResult",
      "description": "TaskRunResult used to describe the results of a task",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the TaskRun",
          "type": "string"
        },
        "value": {
          "description": "Value of the result",
          "type": "string"
        }
      }
    },
    "TimeoutFields": {
      "id": "TimeoutFields",
      "description": "TimeoutFields allows granular specification of pipeline, task, and finally timeouts",
      "type": "object",
      "properties": {
        "pipeline": {
          "description": "Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.",
          "type": "string",
          "format": "google-duration"
        },
        "tasks": {
          "description": "Tasks sets the maximum allowed duration of this pipeline's tasks",
          "type": "string",
          "format": "google-duration"
        },
        "finally": {
          "description": "Finally sets the maximum allowed duration of this pipeline's finally",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "SkippedTask": {
      "id": "SkippedTask",
      "description": "SkippedTask is used to describe the Tasks that were skipped due to their When Expressions evaluating to False.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the Pipeline Task name",
          "type": "string"
        },
        "whenExpressions": {
          "description": "WhenExpressions is the list of checks guarding the execution of the PipelineTask",
          "type": "array",
          "items": {
            "$ref": "WhenExpression"
          }
        }
      }
    },
    "ListTaskRunsResponse": {
      "id": "ListTaskRunsResponse",
      "description": "Message for response to listing TaskRuns",
      "type": "object",
      "properties": {
        "taskRuns": {
          "description": "The list of TaskRun",
          "type": "array",
          "items": {
            "$ref": "TaskRun"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "TaskRun": {
      "id": "TaskRun",
      "description": "Message describing TaskRun object",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The 'TaskRun' name with format: `projects\/{project}\/locations\/{location}\/taskRuns\/{task_run}`",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. A unique identifier for the `TaskRun`.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the `TaskRun` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `TaskRun` was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "labels": {
          "description": "Map of key-value pairs of user-defined labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "description": "User annotations. See https:\/\/google.aip.dev\/128#annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "workerPool": {
          "description": "Output only. The WorkerPool used to run this TaskRun.",
          "readOnly": true,
          "type": "string"
        },
        "taskSpec": {
          "description": "TaskSpec contains the Spec to instantiate a TaskRun.",
          "$ref": "TaskSpec"
        },
        "taskRef": {
          "description": "TaskRef refer to a specific instance of a task.",
          "$ref": "TaskRef"
        },
        "params": {
          "description": "Params is a list of parameter names and values.",
          "type": "array",
          "items": {
            "$ref": "Param"
          }
        },
        "workspaces": {
          "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.",
          "type": "array",
          "items": {
            "$ref": "WorkspaceBinding"
          }
        },
        "timeout": {
          "description": "Time after which the task times out. Defaults to 1 hour. If you set the timeout to 0, the TaskRun will have no timeout and will run until it completes successfully or fails from an error.",
          "type": "string",
          "format": "google-duration"
        },
        "serviceAccount": {
          "description": "Required. Service account used in the task.",
          "type": "string"
        },
        "taskRunStatus": {
          "description": "Status of the TaskRun.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type; should not be used.",
            "Cancelled status."
          ],
          "enum": [
            "TASK_RUN_STATUS_UNSPECIFIED",
            "TASK_RUN_CANCELLED"
          ]
        },
        "conditions": {
          "description": "Output only. Kubernetes Conditions convention for PipelineRun status and error.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "startTime": {
          "description": "Output only. Time the task is actually started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "completionTime": {
          "description": "Output only. Time the task completed.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "steps": {
          "description": "Output only. Steps describes the state of each build step container.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "StepState"
          }
        },
        "taskRunResults": {
          "description": "Output only. List of results written out by the task's containers",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "TaskRunResult"
          }
        },
        "etag": {
          "description": "Needed for declarative-friendly resources.",
          "type": "string"
        },
        "sidecars": {
          "description": "Output only. State of each Sidecar in the TaskSpec.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "SidecarState"
          }
        },
        "resolvedTaskSpec": {
          "description": "Output only. The exact TaskSpec used to instantiate the run.",
          "readOnly": true,
          "$ref": "TaskSpec"
        }
      }
    },
    "Result": {
      "id": "Result",
      "description": "Result of a single event\/execution.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The name of Result.",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned uid.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Server assigned timestamp for when the result was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Server assigned timestamp for when the result was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "recordSummaries": {
          "description": "Output only. Summary of the underlying Record. GCB only returns a summary for the primary Record, e.g. a PipelineRun but not its TaskRuns.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "RecordSummary"
          }
        }
      }
    },
    "RecordSummary": {
      "id": "RecordSummary",
      "description": "Summary of the underlying Record.",
      "type": "object",
      "properties": {
        "record": {
          "description": "Output only. Summarized record.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Output only. Identifier of underlying data. e.g. `cloudbuild.googleapis.com\/PipelineRun`",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time the Record was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. The time the Record was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "recordData": {
          "description": "Output only. Key-value pairs representing underlying record data, e.g. \"status\", \"SUCCESS\"",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListResultsResponse": {
      "id": "ListResultsResponse",
      "description": "Message for response to listing Results.",
      "type": "object",
      "properties": {
        "results": {
          "description": "The list of Results.",
          "type": "array",
          "items": {
            "$ref": "Result"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "Record": {
      "id": "Record",
      "description": "Record belonging to a Result.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The name of Record.",
          "readOnly": true,
          "type": "string"
        },
        "uid": {
          "description": "Output only. Server assigned uid.",
          "readOnly": true,
          "type": "string"
        },
        "createTime": {
          "description": "Output only. Server assigned timestamp for when the record was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "Output only. Server assigned timestamp for when the record was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "data": {
          "description": "Output only. JSON serialized Record data.",
          "readOnly": true,
          "$ref": "JsonAny"
        }
      }
    },
    "JsonAny": {
      "id": "JsonAny",
      "description": "JSON serialized data.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Identifier of underlying data. e.g. `cloudbuild.googleapis.com\/PipelineRun`",
          "type": "string"
        },
        "value": {
          "description": "JSON-serialized data of above type.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListRecordsResponse": {
      "id": "ListRecordsResponse",
      "description": "Message for response to listing Records.",
      "type": "object",
      "properties": {
        "records": {
          "description": "The list of Records.",
          "type": "array",
          "items": {
            "$ref": "Record"
          }
        },
        "nextPageToken": {
          "description": "A token identifying a page of results the server should return.",
          "type": "string"
        }
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
          "$ref": "Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles\/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles\/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles\/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles\/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/docs\/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members`, or principals, with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}\/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https:\/\/cloud.google.com\/kubernetes-engine\/docs\/how-to\/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace\/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "$ref": "Expr"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https:\/\/github.com\/google\/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      }
    },
    "AuditConfig": {
      "id": "AuditConfig",
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "AuditLogConfig"
          }
        }
      }
    },
    "AuditLogConfig": {
      "id": "AuditLogConfig",
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "description": "Metadata for build operations.",
      "type": "object",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      }
    },
    "Build": {
      "id": "Build",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location\/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The 'Build' name with format: `projects\/{project}\/locations\/{location}\/builds\/{build}`, where {build} is a unique identifier generated by the service.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "Output only. Status of the build.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "readOnly": true,
          "type": "string"
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "BuildStep"
          }
        },
        "results": {
          "description": "Output only. Results of the build.",
          "readOnly": true,
          "$ref": "Results"
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "finishTime": {
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queueTtl": {
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string",
          "format": "google-duration"
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}\/log-${build_id}.txt`.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true,
          "$ref": "SourceProvenance"
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true,
          "type": "string"
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https:\/\/cloud.google.com\/cloud-build\/docs\/securing-builds\/use-secrets",
          "type": "array",
          "items": {
            "$ref": "Secret"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "approval": {
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true,
          "$ref": "BuildApproval"
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects\/{PROJECT_ID}\/serviceAccounts\/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ",
          "type": "string"
        },
        "availableSecrets": {
          "description": "Secrets and secret environment variables.",
          "$ref": "Secrets"
        },
        "warnings": {
          "description": "Output only. Non-fatal problems encountered during the execution of the build.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "Warning"
          }
        },
        "failureInfo": {
          "description": "Output only. Contains information about the build when status=FAILURE.",
          "readOnly": true,
          "$ref": "FailureInfo"
        }
      }
    },
    "Source": {
      "id": "Source",
      "description": "Location of the source in a supported storage service.",
      "type": "object",
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "RepoSource"
        },
        "storageSourceManifest": {
          "description": "If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders\/tree\/master\/gcs-fetcher).",
          "$ref": "StorageSourceManifest"
        }
      }
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RepoSource": {
      "id": "RepoSource",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the Cloud Source Repository.",
          "type": "string"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "StorageSourceManifest": {
      "id": "StorageSourceManifest",
      "description": "Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders\/tree\/master\/gcs-fetcher).",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source manifest. This object must be a JSON file.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BuildStep": {
      "id": "BuildStep",
      "description": "A step in the build pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders](https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "secretEnv": {
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "status": {
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "allowFailure": {
          "description": "Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.",
          "type": "boolean"
        },
        "exitCode": {
          "description": "Output only. Return code from running the step.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "allowExitCodes": {
          "description": "Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "script": {
          "description": "A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.",
          "type": "string"
        }
      }
    },
    "Volume": {
      "id": "Volume",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        }
      }
    },
    "TimeSpan": {
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "Start of time span.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "End of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Results": {
      "id": "Results",
      "description": "Artifacts created by the build pipeline.",
      "type": "object",
      "properties": {
        "images": {
          "description": "Container images that were built as a part of the build.",
          "type": "array",
          "items": {
            "$ref": "BuiltImage"
          }
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string"
        },
        "numArtifacts": {
          "description": "Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.",
          "type": "string",
          "format": "int64"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https:\/\/cloud.google.com\/cloud-build\/docs\/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT\/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "artifactTiming": {
          "description": "Time to push all non-container artifacts to Cloud Storage.",
          "$ref": "TimeSpan"
        },
        "pythonPackages": {
          "description": "Python artifacts uploaded to Artifact Registry at the end of the build.",
          "type": "array",
          "items": {
            "$ref": "UploadedPythonPackage"
          }
        },
        "mavenArtifacts": {
          "description": "Maven artifacts uploaded to Artifact Registry at the end of the build.",
          "type": "array",
          "items": {
            "$ref": "UploadedMavenArtifact"
          }
        }
      }
    },
    "BuiltImage": {
      "id": "BuiltImage",
      "description": "An image built by the pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "UploadedPythonPackage": {
      "id": "UploadedPythonPackage",
      "description": "Artifact uploaded using the PythonPackage directive.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        },
        "fileHashes": {
          "description": "Hash types and values of the Python Artifact.",
          "$ref": "FileHashes"
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "FileHashes": {
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      }
    },
    "Hash": {
      "id": "Hash",
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of hash that was performed.",
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "UploadedMavenArtifact": {
      "id": "UploadedMavenArtifact",
      "description": "A Maven artifact uploaded using the MavenArtifact directive.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "URI of the uploaded artifact.",
          "type": "string"
        },
        "fileHashes": {
          "description": "Hash types and values of the Maven Artifact.",
          "$ref": "FileHashes"
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified artifact.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "Artifacts": {
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        },
        "mavenArtifacts": {
          "description": "A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "$ref": "MavenArtifact"
          }
        },
        "pythonPackages": {
          "description": "A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "$ref": "PythonPackage"
          }
        }
      }
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs:\/\/bucket\/path\/to\/somewhere\/\". (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "MavenArtifact": {
      "id": "MavenArtifact",
      "description": "A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "repository": {
          "description": "Artifact Registry repository, in the form \"https:\/\/$REGION-maven.pkg.dev\/$PROJECT\/$REPOSITORY\" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.",
          "type": "string"
        },
        "path": {
          "description": "Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. \/workspace\/my-app\/target\/my-app-1.0.SNAPSHOT.jar or a relative path from \/workspace, e.g. my-app\/target\/my-app-1.0.SNAPSHOT.jar.",
          "type": "string"
        },
        "artifactId": {
          "description": "Maven `artifactId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "groupId": {
          "description": "Maven `groupId` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        },
        "version": {
          "description": "Maven `version` value used when uploading the artifact to Artifact Registry.",
          "type": "string"
        }
      }
    },
    "PythonPackage": {
      "id": "PythonPackage",
      "description": "Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.",
      "type": "object",
      "properties": {
        "repository": {
          "description": "Artifact Registry repository, in the form \"https:\/\/$REGION-python.pkg.dev\/$PROJECT\/$REPOSITORY\" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace. For Python\/ Twine, this is usually `dist\/*`, and sometimes additionally an `.asc` file.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SourceProvenance": {
      "id": "SourceProvenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "type": "object",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "resolvedStorageSourceManifest": {
          "description": "A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
          "$ref": "StorageSourceManifest"
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        }
      }
    },
    "BuildOptions": {
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object",
      "properties": {
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ]
          }
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "type": "string",
          "enumDescriptions": [
            "Not a verifiable build (the default).",
            "Build must be verified."
          ],
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ]
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ],
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ]
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "substitutionOption": {
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ]
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "logStreamingOption": {
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "type": "string",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "workerPool": {
          "description": "This field deprecated; please use `pool.name` instead.",
          "type": "string"
        },
        "pool": {
          "description": "Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https:\/\/cloud.google.com\/build\/docs\/private-pools\/run-builds-in-private-pool) for more information.",
          "$ref": "PoolOption"
        },
        "logging": {
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "type": "string",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Build logs are stored in Cloud Logging and Cloud Storage.",
            "Build logs are stored in Cloud Storage.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https:\/\/cloud.google.com\/sdk\/gcloud\/reference\/builds\/log).",
            "Turn off all logging. No build logs will be captured."
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ]
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        }
      }
    },
    "PoolOption": {
      "id": "PoolOption",
      "description": "Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https:\/\/cloud.google.com\/build\/docs\/private-pools\/run-builds-in-private-pool) for more information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects\/{project}\/locations\/{location}\/workerPools\/{workerPoolId}",
          "type": "string"
        }
      }
    },
    "Secret": {
      "id": "Secret",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https:\/\/cloud.google.com\/cloud-build\/docs\/securing-builds\/use-encrypted-credentials.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        },
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "BuildApproval": {
      "id": "BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object",
      "properties": {
        "state": {
          "description": "Output only. The state of this build's approval.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ]
        },
        "config": {
          "description": "Output only. Configuration for manual approval of this build.",
          "readOnly": true,
          "$ref": "ApprovalConfig"
        },
        "result": {
          "description": "Output only. Result of manual approval for this Build.",
          "readOnly": true,
          "$ref": "ApprovalResult"
        }
      }
    },
    "ApprovalConfig": {
      "id": "ApprovalConfig",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "type": "object",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      }
    },
    "ApprovalResult": {
      "id": "ApprovalResult",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "type": "object",
      "properties": {
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.",
          "readOnly": true,
          "type": "string"
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "decision": {
          "description": "Required. The decision of this manual approval.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ]
        },
        "comment": {
          "description": "Optional. An optional comment for this manual approval result.",
          "type": "string"
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        }
      }
    },
    "Secrets": {
      "id": "Secrets",
      "description": "Secrets and secret environment variables.",
      "type": "object",
      "properties": {
        "secretManager": {
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "SecretManagerSecret"
          }
        },
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "InlineSecret"
          }
        }
      }
    },
    "SecretManagerSecret": {
      "id": "SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object",
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects\/*\/secrets\/*\/versions\/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        }
      }
    },
    "InlineSecret": {
      "id": "InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects\/*\/locations\/*\/keyRings\/*\/cryptoKeys\/*",
          "type": "string"
        },
        "envMap": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "Warning": {
      "id": "Warning",
      "description": "A non-fatal problem encountered during the execution of the build.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Explanation of the warning generated.",
          "type": "string"
        },
        "priority": {
          "description": "The priority for this warning.",
          "type": "string",
          "enumDescriptions": [
            "Should not be used.",
            "e.g. deprecation warnings and alternative feature highlights.",
            "e.g. automated detection of possible issues with the build.",
            "e.g. alerts that a feature used in the build is pending removal"
          ],
          "enum": [
            "PRIORITY_UNSPECIFIED",
            "INFO",
            "WARNING",
            "ALERT"
          ]
        }
      }
    },
    "FailureInfo": {
      "id": "FailureInfo",
      "description": "A fatal problem encountered during the execution of the build.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The name of the failure.",
          "type": "string",
          "enumDescriptions": [
            "Type unspecified",
            "Unable to push the image to the repository.",
            "Final image not found.",
            "Unauthorized push of the final image.",
            "Backend logging failures. Should retry.",
            "A build step has failed.",
            "The source fetching has failed."
          ],
          "enum": [
            "FAILURE_TYPE_UNSPECIFIED",
            "PUSH_FAILED",
            "PUSH_IMAGE_NOT_FOUND",
            "PUSH_NOT_AUTHORIZED",
            "LOGGING_FAILURE",
            "USER_BUILD_STEP",
            "FETCH_SOURCE_FAILED"
          ]
        },
        "detail": {
          "description": "Explains the failure issue in more detail using hard-coded text.",
          "type": "string"
        }
      }
    },
    "CreateWorkerPoolOperationMetadata": {
      "id": "CreateWorkerPoolOperationMetadata",
      "description": "Metadata for the `CreateWorkerPool` operation.",
      "type": "object",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` to create. Format: `projects\/{project}\/locations\/{location}\/workerPools\/{worker_pool}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "UpdateWorkerPoolOperationMetadata": {
      "id": "UpdateWorkerPoolOperationMetadata",
      "description": "Metadata for the `UpdateWorkerPool` operation.",
      "type": "object",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being updated. Format: `projects\/{project}\/locations\/{location}\/workerPools\/{worker_pool}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "DeleteWorkerPoolOperationMetadata": {
      "id": "DeleteWorkerPoolOperationMetadata",
      "description": "Metadata for the `DeleteWorkerPool` operation.",
      "type": "object",
      "properties": {
        "workerPool": {
          "description": "The resource name of the `WorkerPool` being deleted. Format: `projects\/{project}\/locations\/{location}\/workerPools\/{worker_pool}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ArtifactResult": {
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "type": "object",
      "properties": {
        "location": {
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs:\/\/mybucket\/path\/to\/output.jar#generation`.",
          "type": "string"
        },
        "fileHash": {
          "description": "The file hash of the artifact.",
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          }
        }
      }
    },
    "CreateGitHubEnterpriseConfigOperationMetadata": {
      "id": "CreateGitHubEnterpriseConfigOperationMetadata",
      "description": "Metadata for `CreateGithubEnterpriseConfig` operation.",
      "type": "object",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects\/{project}\/locations\/{location}\/githubEnterpriseConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "UpdateGitHubEnterpriseConfigOperationMetadata": {
      "id": "UpdateGitHubEnterpriseConfigOperationMetadata",
      "description": "Metadata for `UpdateGitHubEnterpriseConfig` operation.",
      "type": "object",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be updated. Format: `projects\/{project}\/locations\/{location}\/githubEnterpriseConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "DeleteGitHubEnterpriseConfigOperationMetadata": {
      "id": "DeleteGitHubEnterpriseConfigOperationMetadata",
      "description": "Metadata for `DeleteGitHubEnterpriseConfig` operation.",
      "type": "object",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be deleted. Format: `projects\/{project}\/locations\/{location}\/githubEnterpriseConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ProcessAppManifestCallbackOperationMetadata": {
      "id": "ProcessAppManifestCallbackOperationMetadata",
      "description": "Metadata for `ProcessAppManifestCallback` operation.",
      "type": "object",
      "properties": {
        "githubEnterpriseConfig": {
          "description": "The resource name of the GitHubEnterprise to be created. Format: `projects\/{project}\/locations\/{location}\/githubEnterpriseConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata",
      "description": "Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.",
      "type": "object",
      "properties": {
        "config": {
          "description": "The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects\/{project}\/locations\/{location}\/bitbucketServerConfigs\/{config}`",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "BatchCreateBitbucketServerConnectedRepositoriesResponse": {
      "id": "BatchCreateBitbucketServerConnectedRepositoriesResponse",
      "description": "Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.",
      "type": "object",
      "properties": {
        "bitbucketServerConnectedRepositories": {
          "description": "The connected Bitbucket Server repositories.",
          "type": "array",
          "items": {
            "$ref": "BitbucketServerConnectedRepository"
          }
        }
      }
    },
    "BitbucketServerConnectedRepository": {
      "id": "BitbucketServerConnectedRepository",
      "description": "\/ BitbucketServerConnectedRepository represents a connected Bitbucket Server \/ repository.",
      "type": "object",
      "properties": {
        "parent": {
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects\/{project}\/locations\/{location}\/bitbucketServerConfigs\/{config}`",
          "type": "string"
        },
        "repo": {
          "description": "The Bitbucket Server repositories to connect.",
          "$ref": "BitbucketServerRepositoryId"
        },
        "status": {
          "description": "Output only. The status of the repo connection request.",
          "readOnly": true,
          "$ref": "Status"
        }
      }
    },
    "BitbucketServerRepositoryId": {
      "id": "BitbucketServerRepositoryId",
      "description": "BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.",
      "type": "object",
      "properties": {
        "projectKey": {
          "description": "Required. Identifier for the project storing the repository.",
          "type": "string"
        },
        "repoSlug": {
          "description": "Required. Identifier for the repository.",
          "type": "string"
        },
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CreateBitbucketServerConfigOperationMetadata": {
      "id": "CreateBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `CreateBitbucketServerConfig` operation.",
      "type": "object",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be created. Format: `projects\/{project}\/locations\/{location}\/bitbucketServerConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "UpdateBitbucketServerConfigOperationMetadata": {
      "id": "UpdateBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `UpdateBitbucketServerConfig` operation.",
      "type": "object",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be updated. Format: `projects\/{project}\/locations\/{location}\/bitbucketServerConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "DeleteBitbucketServerConfigOperationMetadata": {
      "id": "DeleteBitbucketServerConfigOperationMetadata",
      "description": "Metadata for `DeleteBitbucketServerConfig` operation.",
      "type": "object",
      "properties": {
        "bitbucketServerConfig": {
          "description": "The resource name of the BitbucketServerConfig to be deleted. Format: `projects\/{project}\/locations\/{location}\/bitbucketServerConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "CreateGitLabConfigOperationMetadata": {
      "id": "CreateGitLabConfigOperationMetadata",
      "description": "Metadata for `CreateGitLabConfig` operation.",
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects\/{project}\/locations\/{location}\/gitlabConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "UpdateGitLabConfigOperationMetadata": {
      "id": "UpdateGitLabConfigOperationMetadata",
      "description": "Metadata for `UpdateGitLabConfig` operation.",
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects\/{project}\/locations\/{location}\/gitlabConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "DeleteGitLabConfigOperationMetadata": {
      "id": "DeleteGitLabConfigOperationMetadata",
      "description": "Metadata for `DeleteGitLabConfig` operation.",
      "type": "object",
      "properties": {
        "gitlabConfig": {
          "description": "The resource name of the GitLabConfig to be created. Format: `projects\/{project}\/locations\/{location}\/gitlabConfigs\/{id}`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "BatchCreateGitLabConnectedRepositoriesResponse": {
      "id": "BatchCreateGitLabConnectedRepositoriesResponse",
      "description": "Response of BatchCreateGitLabConnectedRepositories RPC method.",
      "type": "object",
      "properties": {
        "gitlabConnectedRepositories": {
          "description": "The GitLab connected repository requests' responses.",
          "type": "array",
          "items": {
            "$ref": "GitLabConnectedRepository"
          }
        }
      }
    },
    "GitLabConnectedRepository": {
      "id": "GitLabConnectedRepository",
      "description": "GitLabConnectedRepository represents a GitLab connected repository request response.",
      "type": "object",
      "properties": {
        "parent": {
          "description": "The name of the `GitLabConfig` that added connected repository. Format: `projects\/{project}\/locations\/{location}\/gitLabConfigs\/{config}`",
          "type": "string"
        },
        "repo": {
          "description": "The GitLab repositories to connect.",
          "$ref": "GitLabRepositoryId"
        },
        "status": {
          "description": "Output only. The status of the repo connection request.",
          "readOnly": true,
          "$ref": "Status"
        }
      }
    },
    "GitLabRepositoryId": {
      "id": "GitLabRepositoryId",
      "description": "GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise",
      "type": "object",
      "properties": {
        "id": {
          "description": "Required. Identifier for the repository. example: \"namespace\/project-slug\", namespace is usually the username or group ID",
          "type": "string"
        },
        "webhookId": {
          "description": "Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BatchCreateGitLabConnectedRepositoriesResponseMetadata": {
      "id": "BatchCreateGitLabConnectedRepositoriesResponseMetadata",
      "description": "Metadata for `BatchCreateGitLabConnectedRepositories` operation.",
      "type": "object",
      "properties": {
        "config": {
          "description": "The name of the `GitLabConfig` that added connected repositories. Format: `projects\/{project}\/locations\/{location}\/gitLabConfigs\/{config}`",
          "type": "string"
        },
        "createTime": {
          "description": "Time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "completeTime": {
          "description": "Time the operation was completed.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "HTTPDelivery": {
      "id": "HTTPDelivery",
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      }
    },
    "Notification": {
      "id": "Notification",
      "description": "Notification is the container which holds the data that is relevant to this particular notification.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https:\/\/opensource.google\/projects\/cel for more.",
          "type": "string"
        },
        "smtpDelivery": {
          "description": "Configuration for SMTP (email) delivery.",
          "$ref": "SMTPDelivery"
        },
        "slackDelivery": {
          "description": "Configuration for Slack delivery.",
          "$ref": "SlackDelivery"
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "structDelivery": {
          "description": "Escape hatch for users to supply custom delivery configs.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "SMTPDelivery": {
      "id": "SMTPDelivery",
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "type": "object",
      "properties": {
        "server": {
          "description": "The address of the SMTP server.",
          "type": "string"
        },
        "port": {
          "description": "The SMTP port of the server.",
          "type": "string"
        },
        "senderAddress": {
          "description": "This is the SMTP account\/email that is used to send the message.",
          "type": "string"
        },
        "fromAddress": {
          "description": "This is the SMTP account\/email that appears in the `From:` of the email. If empty, it is assumed to be sender.",
          "type": "string"
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        }
      }
    },
    "NotifierSecretRef": {
      "id": "NotifierSecretRef",
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      }
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https:\/\/api.slack.com\/messaging\/webhooks.",
      "type": "object",
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      }
    },
    "NotifierConfig": {
      "id": "NotifierConfig",
      "description": "NotifierConfig is the top-level configuration message.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        },
        "kind": {
          "description": "The type of notifier to use (e.g. SMTPNotifier).",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata for referring to\/handling\/deploying this notifier.",
          "$ref": "NotifierMetadata"
        },
        "spec": {
          "description": "The actual configuration for this notifier.",
          "$ref": "NotifierSpec"
        }
      }
    },
    "NotifierMetadata": {
      "id": "NotifierMetadata",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\".",
          "type": "string"
        },
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"\/:\". For example: \"gcr.io\/my-project\/notifiers\/smtp:1.2.34\".",
          "type": "string"
        }
      }
    },
    "NotifierSpec": {
      "id": "NotifierSpec",
      "description": "NotifierSpec is the configuration container for notifications.",
      "type": "object",
      "properties": {
        "notification": {
          "description": "The configuration of this particular notifier.",
          "$ref": "Notification"
        },
        "secrets": {
          "description": "Configurations for secret resources used by this particular notifier.",
          "type": "array",
          "items": {
            "$ref": "NotifierSecret"
          }
        }
      }
    },
    "NotifierSecret": {
      "id": "NotifierSecret",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects\/my-project\/secrets\/my-secret\/versions\/latest\".",
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsCloudbuildV2OperationMetadata": {
      "id": "GoogleDevtoolsCloudbuildV2OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "statusMessage": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "RunWorkflowCustomOperationMetadata": {
      "id": "RunWorkflowCustomOperationMetadata",
      "description": "Represents the custom metadata of the RunWorkflow long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "requestedCancellation": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "pipelineRunId": {
          "description": "Output only. ID of the pipeline run created by RunWorkflow.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true,
          "type": "string"
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "id": "cloudbuild.projects.locations.operations.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "cancel": {
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "path": "v2/{+name}:cancel",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                }
              }
            },
            "connections": {
              "methods": {
                "create": {
                  "id": "cloudbuild.projects.locations.connections.create",
                  "path": "v2/{+parent}/connections",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Project and location where the connection will be created. Format: `projects\/*\/locations\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "connectionId": {
                      "description": "Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. This value should be 4-63 characters, start with a lowercase letter, contain only lowercase letters, digits and dashes, and end with a lowercase letter or a digit. Regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Connection"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a Connection."
                },
                "get": {
                  "id": "cloudbuild.projects.locations.connections.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the Connection to retrieve. Format: `projects\/*\/locations\/*\/connections\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Connection"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single connection."
                },
                "list": {
                  "id": "cloudbuild.projects.locations.connections.list",
                  "path": "v2/{+parent}/connections",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent, which owns this collection of Connections. Format: `projects\/*\/locations\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListConnectionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists Connections in a given project and location."
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.connections.patch",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Immutable. The resource name of the connection, in the format `projects\/{project}\/locations\/{location}\/connections\/{connection_id}`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "The list of fields to be updated.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "allowMissing": {
                      "description": "If set to true, and the connection is not found a new connection will be created. In this situation `update_mask` is ignored. The creation will succeed only if the input connection has all the necessary information (e.g a github_config with both user_oauth_token and installation_id properties).",
                      "location": "query",
                      "type": "boolean"
                    },
                    "etag": {
                      "description": "The current etag of the connection. If an etag is provided and does not match the current etag of the connection, update will be blocked and an ABORTED error will be returned.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Connection"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates a single connection."
                },
                "delete": {
                  "id": "cloudbuild.projects.locations.connections.delete",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the Connection to delete. Format: `projects\/*\/locations\/*\/connections\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "etag": {
                      "description": "The current etag of the connection. If an etag is provided and does not match the current etag of the connection, deletion will be blocked and an ABORTED error will be returned.",
                      "location": "query",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "If set, validate the request, but do not actually post it.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single connection."
                },
                "accessReadWriteToken": {
                  "id": "cloudbuild.projects.locations.connections.accessReadWriteToken",
                  "path": "v2/{+connection}:accessReadWriteToken",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:accessReadWriteToken",
                  "httpMethod": "POST",
                  "parameters": {
                    "connection": {
                      "description": "Required. The resource name of the connection in the format `projects\/*\/locations\/*\/connections\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "connection"
                  ],
                  "request": {
                    "$ref": "AccessReadWriteTokenRequest"
                  },
                  "response": {
                    "$ref": "AccessReadWriteTokenResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets read\/write token of a given connection."
                },
                "accessReadToken": {
                  "id": "cloudbuild.projects.locations.connections.accessReadToken",
                  "path": "v2/{+connection}:accessReadToken",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:accessReadToken",
                  "httpMethod": "POST",
                  "parameters": {
                    "connection": {
                      "description": "Required. The resource name of the connection in the format `projects\/*\/locations\/*\/connections\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "connection"
                  ],
                  "request": {
                    "$ref": "AccessReadTokenRequest"
                  },
                  "response": {
                    "$ref": "AccessReadTokenResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets read token of a given connection."
                },
                "processWebhook": {
                  "id": "cloudbuild.projects.locations.connections.processWebhook",
                  "path": "v2/{+parent}/connections:processWebhook",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections:processWebhook",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Project and location where the webhook will be received. Format: `projects\/*\/locations\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "webhookKey": {
                      "description": "Arbitrary additional key to find the maching repository for a webhook event if needed.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "HttpBody"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "description": "ProcessWebhook is called by the external SCM for notifying of events."
                },
                "fetchLinkableRepositories": {
                  "id": "cloudbuild.projects.locations.connections.fetchLinkableRepositories",
                  "path": "v2/{+connection}:fetchLinkableRepositories",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:fetchLinkableRepositories",
                  "httpMethod": "GET",
                  "parameters": {
                    "connection": {
                      "description": "Required. The name of the Connection. Format: `projects\/*\/locations\/*\/connections\/*`.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list. Default to 20.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "connection"
                  ],
                  "response": {
                    "$ref": "FetchLinkableRepositoriesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "FetchLinkableRepositories get repositories from SCM that are accessible and could be added to the connection."
                },
                "setIamPolicy": {
                  "id": "cloudbuild.projects.locations.connections.setIamPolicy",
                  "path": "v2/{+resource}:setIamPolicy",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "getIamPolicy": {
                  "id": "cloudbuild.projects.locations.connections.getIamPolicy",
                  "path": "v2/{+resource}:getIamPolicy",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                },
                "testIamPermissions": {
                  "id": "cloudbuild.projects.locations.connections.testIamPermissions",
                  "path": "v2/{+resource}:testIamPermissions",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https:\/\/cloud.google.com\/apis\/design\/resource_names) for the appropriate value for this field.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                }
              }
              ,
              "resources": {
                "repositories": {
                  "methods": {
                    "create": {
                      "id": "cloudbuild.projects.locations.connections.repositories.create",
                      "path": "v2/{+parent}/repositories",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The connection to contain the repository. If the request is part of a BatchCreateRepositoriesRequest, this field should be empty or match the parent specified there.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "repositoryId": {
                          "description": "Required. The ID to use for the repository, which will become the final component of the repository's resource name.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "Repository"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a Repository."
                    },
                    "get": {
                      "id": "cloudbuild.projects.locations.connections.repositories.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories/{repositoriesId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the Repository to retrieve. Format: `projects\/*\/locations\/*\/connections\/*\/repositories\/*`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Repository"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets details of a single repository."
                    },
                    "list": {
                      "id": "cloudbuild.projects.locations.connections.repositories.list",
                      "path": "v2/{+parent}/repositories",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent, which owns this collection of Repositories. Format: `projects\/*\/locations\/*\/connections\/*`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of results to return in the list.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page start.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "A filter expression that filters resources listed in the response. Expressions must follow API improvement proposal [AIP-160](https:\/\/google.aip.dev\/160). e.g. `remote_uri:\"https:\/\/github.com*\"`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListRepositoriesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists Repositories in a given connection."
                    },
                    "delete": {
                      "id": "cloudbuild.projects.locations.connections.repositories.delete",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories/{repositoriesId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the Repository to delete. Format: `projects\/*\/locations\/*\/connections\/*\/repositories\/*`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "etag": {
                          "description": "The current etag of the repository. If an etag is provided and does not match the current etag of the repository, deletion will be blocked and an ABORTED error will be returned.",
                          "location": "query",
                          "type": "string"
                        },
                        "validateOnly": {
                          "description": "If set, validate the request, but do not actually post it.",
                          "location": "query",
                          "type": "boolean"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes a single repository."
                    },
                    "accessReadWriteToken": {
                      "id": "cloudbuild.projects.locations.connections.repositories.accessReadWriteToken",
                      "path": "v2/{+repository}:accessReadWriteToken",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories/{repositoriesId}:accessReadWriteToken",
                      "httpMethod": "POST",
                      "parameters": {
                        "repository": {
                          "description": "Required. The resource name of the repository in the format `projects\/*\/locations\/*\/connections\/*\/repositories\/*`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "repository"
                      ],
                      "request": {
                        "$ref": "FetchReadWriteTokenRequest"
                      },
                      "response": {
                        "$ref": "FetchReadWriteTokenResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Fetches read\/write token of a given repository."
                    },
                    "accessReadToken": {
                      "id": "cloudbuild.projects.locations.connections.repositories.accessReadToken",
                      "path": "v2/{+repository}:accessReadToken",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/repositories/{repositoriesId}:accessReadToken",
                      "httpMethod": "POST",
                      "parameters": {
                        "repository": {
                          "description": "Required. The resource name of the repository in the format `projects\/*\/locations\/*\/connections\/*\/repositories\/*`.",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/connections\/[^\/]+\/repositories\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "repository"
                      ],
                      "request": {
                        "$ref": "FetchReadTokenRequest"
                      },
                      "response": {
                        "$ref": "FetchReadTokenResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Fetches read token of a given repository."
                    }
                  }
                }
              }
            },
            "workflows": {
              "methods": {
                "create": {
                  "id": "cloudbuild.projects.locations.workflows.create",
                  "path": "v2/{+parent}/workflows",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Format: `projects\/{project}\/locations\/{location}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "workflowId": {
                      "description": "Required. The ID to use for the Workflow, which will become the final component of the Workflow\u2019s resource name.",
                      "location": "query",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Workflow"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new Workflow in a given project and location."
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.workflows.patch",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Output only. Format: `projects\/{project}\/locations\/{location}\/workflows\/{workflow}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/workflows\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "The list of fields to be updated.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "allowMissing": {
                      "description": "If set to true, and the workflow is not found, a new workflow will be created. In this situation, `update_mask` is ignored.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "validateOnly": {
                      "description": "When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Workflow"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single Workflow."
                },
                "delete": {
                  "id": "cloudbuild.projects.locations.workflows.delete",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects\/{project}\/locations\/{location}\/workflow\/{workflow}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/workflows\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "etag": {
                      "description": "The etag of the workflow. If this is provided, it must match the server\u2019s etag.",
                      "location": "query",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a single Workflow."
                },
                "get": {
                  "id": "cloudbuild.projects.locations.workflows.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects\/{project}\/locations\/{location}\/workflow\/{workflow}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/workflows\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Workflow"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single Workflow."
                },
                "list": {
                  "id": "cloudbuild.projects.locations.workflows.list",
                  "path": "v2/{+parent}/workflows",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. Format: `projects\/{project}\/locations\/{location}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Filter for the results.",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "The order to sort results by.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListWorkflowsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists Workflows in a given project and location."
                },
                "run": {
                  "id": "cloudbuild.projects.locations.workflows.run",
                  "path": "v2/{+name}:run",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}:run",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects\/{project}\/locations\/{location}\/workflow\/{workflow}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/workflows\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RunWorkflowRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Runs a Workflow."
                }
              }
            },
            "pipelineRuns": {
              "methods": {
                "list": {
                  "id": "cloudbuild.projects.locations.pipelineRuns.list",
                  "path": "v2/{+parent}/pipelineRuns",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/pipelineRuns",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent, which owns this collection of PipelineRuns. Format: projects\/{project}\/locations\/{location}",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Filter for the results.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListPipelineRunsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists PipelineRuns in a given project and location."
                },
                "get": {
                  "id": "cloudbuild.projects.locations.pipelineRuns.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/pipelineRuns/{pipelineRunsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the PipelineRun to retrieve. Format: projects\/{project}\/locations\/{location}\/pipelineRuns\/{pipelineRun}",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/pipelineRuns\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "PipelineRun"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single PipelineRun."
                },
                "create": {
                  "id": "cloudbuild.projects.locations.pipelineRuns.create",
                  "path": "v2/{+parent}/pipelineRuns",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/pipelineRuns",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Value for parent.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pipelineRunId": {
                      "description": "Required. The ID to use for the PipelineRun, which will become the final component of the PipelineRun's resource name. Names must be unique per-project per-location. This value should be 4-63 characters, and valid characters are \/a-z-\/.",
                      "location": "query",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "Optional. When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "PipelineRun"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new PipelineRun in a given project and location."
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.pipelineRuns.patch",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/pipelineRuns/{pipelineRunsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Output only. The `PipelineRun` name with format `projects\/{project}\/locations\/{location}\/pipelineRuns\/{pipeline_run}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/pipelineRuns\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. The list of fields to be updated.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "allowMissing": {
                      "description": "Optional. If set to true, and the PipelineRun is not found, a new PipelineRun will be created. In this situation, `update_mask` is ignored.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "validateOnly": {
                      "description": "Optional. When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "PipelineRun"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single PipelineRun."
                }
              }
            },
            "taskRuns": {
              "methods": {
                "list": {
                  "id": "cloudbuild.projects.locations.taskRuns.list",
                  "path": "v2/{+parent}/taskRuns",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/taskRuns",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent, which owns this collection of TaskRuns. Format: projects\/{project}\/locations\/{location}",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Filter for the results.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListTaskRunsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists TaskRuns in a given project and location."
                },
                "get": {
                  "id": "cloudbuild.projects.locations.taskRuns.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/taskRuns/{taskRunsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the TaskRun to retrieve. Format: projects\/{project}\/locations\/{location}\/taskRuns\/{taskRun}",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/taskRuns\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "TaskRun"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single TaskRun."
                },
                "create": {
                  "id": "cloudbuild.projects.locations.taskRuns.create",
                  "path": "v2/{+parent}/taskRuns",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/taskRuns",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Value for parent.",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "taskRunId": {
                      "description": "Required. The ID to use for the TaskRun, which will become the final component of the TaskRun's resource name. Names must be unique per-project per-location. This value should be 4-63 characters, and valid characters are \/a-z-\/.",
                      "location": "query",
                      "type": "string"
                    },
                    "validateOnly": {
                      "description": "Optional. When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "TaskRun"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new TaskRun in a given project and location."
                },
                "patch": {
                  "id": "cloudbuild.projects.locations.taskRuns.patch",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/taskRuns/{taskRunsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Output only. The 'TaskRun' name with format: `projects\/{project}\/locations\/{location}\/taskRuns\/{task_run}`",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/taskRuns\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. The list of fields to be updated.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    },
                    "allowMissing": {
                      "description": "Optional. If set to true, and the TaskRun is not found, a new TaskRun will be created. In this situation, `update_mask` is ignored.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "validateOnly": {
                      "description": "Optional. When true, the query is validated only, but not executed.",
                      "location": "query",
                      "type": "boolean"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "TaskRun"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the parameters of a single TaskRun."
                }
              }
            },
            "results": {
              "methods": {
                "get": {
                  "id": "cloudbuild.projects.locations.results.get",
                  "path": "v2/{+name}",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/results/{resultsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. The name of the Result to retrieve. Format: projects\/{project}\/locations\/{location}\/results\/{result}",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/results\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Result"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets Results of a given project and location."
                },
                "list": {
                  "id": "cloudbuild.projects.locations.results.list",
                  "path": "v2/{+parent}/results",
                  "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/results",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The parent, which owns this collection of Results. Format: projects\/{project}\/locations\/{location}\/",
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Size of the page to return. Default page_size = 50 Maximum page_size = 1000",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Page start.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Filter for the Records.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListResultsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists Results of a given project and location."
                }
              }
              ,
              "resources": {
                "records": {
                  "methods": {
                    "get": {
                      "id": "cloudbuild.projects.locations.results.records.get",
                      "path": "v2/{+name}",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/results/{resultsId}/records/{recordsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The name of the Record to retrieve. Format: projects\/{project}\/locations\/{location}\/results\/{result}\/records\/{record}",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/results\/[^\/]+\/records\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Record"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets Records of a given project and location."
                    },
                    "list": {
                      "id": "cloudbuild.projects.locations.results.records.list",
                      "path": "v2/{+parent}/records",
                      "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/results/{resultsId}/records",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The parent, which owns this collection of Records. Format: projects\/{project}\/locations\/{location}\/results\/{result}\/",
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/results\/[^\/]+$",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Size of the page to return.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Page start.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Filter for the Records.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListRecordsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists Records of a given project and location."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}